// Code generated by gowrap. DO NOT EDIT.
// template: ../.prom-gowrap.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package datastore

//go:generate gowrap gen -p github.com/brave/go-sync/datastore -i DynamoDatastore -t ../.prom-gowrap.tmpl -o instrumented_dynamo_datastore.go -l ""

import (
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// DynamoDatastoreWithPrometheus implements DynamoDatastore interface with all methods wrapped
// with Prometheus metrics
type DynamoDatastoreWithPrometheus struct {
	base         DynamoDatastore
	instanceName string
}

var dynamodatastoreDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "dynamodatastore_duration_seconds",
		Help:       "dynamodatastore runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewDynamoDatastoreWithPrometheus returns an instance of the DynamoDatastore decorated with prometheus summary metric
func NewDynamoDatastoreWithPrometheus(base DynamoDatastore, instanceName string) DynamoDatastoreWithPrometheus {
	return DynamoDatastoreWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// ClearServerData implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) ClearServerData(clientID string) (sa1 []SyncEntity, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "ClearServerData", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ClearServerData(clientID)
}

// DeleteEntities implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) DeleteEntities(entities []*SyncEntity) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteEntities", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteEntities(entities)
}

// DisableSyncChain implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) DisableSyncChain(clientID string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "DisableSyncChain", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DisableSyncChain(clientID)
}

// GetClientItemCount implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) GetClientItemCount(clientID string) (dp1 *DynamoItemCounts, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "GetClientItemCount", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetClientItemCount(clientID)
}

// GetEntity implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) GetEntity(query ItemQuery) (sp1 *SyncEntity, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "GetEntity", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetEntity(query)
}

// GetUpdatesForType implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) GetUpdatesForType(dataType int, minMtime *int64, maxMtime *int64, fetchFolders bool, clientID string, maxSize int, ascOrder bool) (hasChangesRemaining bool, entities []SyncEntity, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "GetUpdatesForType", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetUpdatesForType(dataType, minMtime, maxMtime, fetchFolders, clientID, maxSize, ascOrder)
}

// HasItem implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) HasItem(clientID string, ID string) (b1 bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "HasItem", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.HasItem(clientID, ID)
}

// HasServerDefinedUniqueTag implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) HasServerDefinedUniqueTag(clientID string, tag string) (b1 bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "HasServerDefinedUniqueTag", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.HasServerDefinedUniqueTag(clientID, tag)
}

// InsertSyncEntitiesWithServerTags implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) InsertSyncEntitiesWithServerTags(entities []*SyncEntity) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "InsertSyncEntitiesWithServerTags", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.InsertSyncEntitiesWithServerTags(entities)
}

// InsertSyncEntity implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) InsertSyncEntity(entity *SyncEntity) (b1 bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "InsertSyncEntity", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.InsertSyncEntity(entity)
}

// IsSyncChainDisabled implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) IsSyncChainDisabled(clientID string) (b1 bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "IsSyncChainDisabled", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.IsSyncChainDisabled(clientID)
}

// UpdateClientItemCount implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) UpdateClientItemCount(counts *DynamoItemCounts, newNormalItemCount int, newHistoryItemCount int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateClientItemCount", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateClientItemCount(counts, newNormalItemCount, newHistoryItemCount)
}

// UpdateSyncEntity implements DynamoDatastore
func (_d DynamoDatastoreWithPrometheus) UpdateSyncEntity(entity *SyncEntity, oldVersion int64) (conflict bool, deleted bool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		dynamodatastoreDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateSyncEntity", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateSyncEntity(entity, oldVersion)
}
