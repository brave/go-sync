// Copyright 2017 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for user events.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: user_event_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserEventSpecifics_Translation_Interaction int32

const (
	UserEventSpecifics_Translation_UNKNOWN UserEventSpecifics_Translation_Interaction = 0
	UserEventSpecifics_Translation_ACCEPT  UserEventSpecifics_Translation_Interaction = 1
	UserEventSpecifics_Translation_DECLINE UserEventSpecifics_Translation_Interaction = 2
	// This happens when user scroll or click outside the UI without
	// translation.
	UserEventSpecifics_Translation_IGNORED UserEventSpecifics_Translation_Interaction = 3
	// This happens when user choose to close the translation window without
	// translation.
	UserEventSpecifics_Translation_DISMISSED UserEventSpecifics_Translation_Interaction = 4
	// User manually entered either language.
	// In this case, from_language_code and to_language_code will be user
	// chosen values.
	UserEventSpecifics_Translation_MANUAL UserEventSpecifics_Translation_Interaction = 5
	// User choose to revert the translation, in this case, from_language_code
	// and to_language_code will be previous chosen values.
	UserEventSpecifics_Translation_TRANSLATION_REVERTED UserEventSpecifics_Translation_Interaction = 6
	// Automatically triggered translation.
	// User sets always translate in user settings.
	UserEventSpecifics_Translation_AUTO_TRANSLATION_BY_PREF UserEventSpecifics_Translation_Interaction = 7
	// User navigated through a click from a translated page.
	UserEventSpecifics_Translation_AUTO_TRANSLATION_BY_LINK UserEventSpecifics_Translation_Interaction = 8
	// Failed to initialize the translate script, this can happen for iOS due
	// to CSPs.
	UserEventSpecifics_Translation_INITIALIZATION_ERROR UserEventSpecifics_Translation_Interaction = 9
)

// Enum value maps for UserEventSpecifics_Translation_Interaction.
var (
	UserEventSpecifics_Translation_Interaction_name = map[int32]string{
		0: "UNKNOWN",
		1: "ACCEPT",
		2: "DECLINE",
		3: "IGNORED",
		4: "DISMISSED",
		5: "MANUAL",
		6: "TRANSLATION_REVERTED",
		7: "AUTO_TRANSLATION_BY_PREF",
		8: "AUTO_TRANSLATION_BY_LINK",
		9: "INITIALIZATION_ERROR",
	}
	UserEventSpecifics_Translation_Interaction_value = map[string]int32{
		"UNKNOWN":                  0,
		"ACCEPT":                   1,
		"DECLINE":                  2,
		"IGNORED":                  3,
		"DISMISSED":                4,
		"MANUAL":                   5,
		"TRANSLATION_REVERTED":     6,
		"AUTO_TRANSLATION_BY_PREF": 7,
		"AUTO_TRANSLATION_BY_LINK": 8,
		"INITIALIZATION_ERROR":     9,
	}
)

func (x UserEventSpecifics_Translation_Interaction) Enum() *UserEventSpecifics_Translation_Interaction {
	p := new(UserEventSpecifics_Translation_Interaction)
	*p = x
	return p
}

func (x UserEventSpecifics_Translation_Interaction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserEventSpecifics_Translation_Interaction) Descriptor() protoreflect.EnumDescriptor {
	return file_user_event_specifics_proto_enumTypes[0].Descriptor()
}

func (UserEventSpecifics_Translation_Interaction) Type() protoreflect.EnumType {
	return &file_user_event_specifics_proto_enumTypes[0]
}

func (x UserEventSpecifics_Translation_Interaction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserEventSpecifics_Translation_Interaction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserEventSpecifics_Translation_Interaction(num)
	return nil
}

// Deprecated: Use UserEventSpecifics_Translation_Interaction.Descriptor instead.
func (UserEventSpecifics_Translation_Interaction) EnumDescriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0, 2, 0}
}

type UserEventSpecifics_GaiaPasswordCaptured_EventTrigger int32

const (
	UserEventSpecifics_GaiaPasswordCaptured_UNSPECIFIED UserEventSpecifics_GaiaPasswordCaptured_EventTrigger = 0
	// Event added because user logged in.
	UserEventSpecifics_GaiaPasswordCaptured_USER_LOGGED_IN UserEventSpecifics_GaiaPasswordCaptured_EventTrigger = 1
	// Event added because 28d timer fired.
	UserEventSpecifics_GaiaPasswordCaptured_EXPIRED_28D_TIMER UserEventSpecifics_GaiaPasswordCaptured_EventTrigger = 2
)

// Enum value maps for UserEventSpecifics_GaiaPasswordCaptured_EventTrigger.
var (
	UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "USER_LOGGED_IN",
		2: "EXPIRED_28D_TIMER",
	}
	UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_value = map[string]int32{
		"UNSPECIFIED":       0,
		"USER_LOGGED_IN":    1,
		"EXPIRED_28D_TIMER": 2,
	}
)

func (x UserEventSpecifics_GaiaPasswordCaptured_EventTrigger) Enum() *UserEventSpecifics_GaiaPasswordCaptured_EventTrigger {
	p := new(UserEventSpecifics_GaiaPasswordCaptured_EventTrigger)
	*p = x
	return p
}

func (x UserEventSpecifics_GaiaPasswordCaptured_EventTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserEventSpecifics_GaiaPasswordCaptured_EventTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_user_event_specifics_proto_enumTypes[1].Descriptor()
}

func (UserEventSpecifics_GaiaPasswordCaptured_EventTrigger) Type() protoreflect.EnumType {
	return &file_user_event_specifics_proto_enumTypes[1]
}

func (x UserEventSpecifics_GaiaPasswordCaptured_EventTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserEventSpecifics_GaiaPasswordCaptured_EventTrigger) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserEventSpecifics_GaiaPasswordCaptured_EventTrigger(num)
	return nil
}

// Deprecated: Use UserEventSpecifics_GaiaPasswordCaptured_EventTrigger.Descriptor instead.
func (UserEventSpecifics_GaiaPasswordCaptured_EventTrigger) EnumDescriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0, 3, 0}
}

type UserEventSpecifics_FlocIdComputed_EventTrigger int32

const (
	UserEventSpecifics_FlocIdComputed_UNSPECIFIED UserEventSpecifics_FlocIdComputed_EventTrigger = 0
	// Event added because the floc id is computed for the 1st floc session.
	UserEventSpecifics_FlocIdComputed_NEW UserEventSpecifics_FlocIdComputed_EventTrigger = 1
	// Event added because the floc id is re-computed due to a long period of
	// time has passed since the last computation.
	UserEventSpecifics_FlocIdComputed_REFRESHED UserEventSpecifics_FlocIdComputed_EventTrigger = 2
	// Event added because the floc id is re-computed due to history deletion.
	UserEventSpecifics_FlocIdComputed_HISTORY_DELETE UserEventSpecifics_FlocIdComputed_EventTrigger = 3
)

// Enum value maps for UserEventSpecifics_FlocIdComputed_EventTrigger.
var (
	UserEventSpecifics_FlocIdComputed_EventTrigger_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NEW",
		2: "REFRESHED",
		3: "HISTORY_DELETE",
	}
	UserEventSpecifics_FlocIdComputed_EventTrigger_value = map[string]int32{
		"UNSPECIFIED":    0,
		"NEW":            1,
		"REFRESHED":      2,
		"HISTORY_DELETE": 3,
	}
)

func (x UserEventSpecifics_FlocIdComputed_EventTrigger) Enum() *UserEventSpecifics_FlocIdComputed_EventTrigger {
	p := new(UserEventSpecifics_FlocIdComputed_EventTrigger)
	*p = x
	return p
}

func (x UserEventSpecifics_FlocIdComputed_EventTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserEventSpecifics_FlocIdComputed_EventTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_user_event_specifics_proto_enumTypes[2].Descriptor()
}

func (UserEventSpecifics_FlocIdComputed_EventTrigger) Type() protoreflect.EnumType {
	return &file_user_event_specifics_proto_enumTypes[2]
}

func (x UserEventSpecifics_FlocIdComputed_EventTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserEventSpecifics_FlocIdComputed_EventTrigger) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserEventSpecifics_FlocIdComputed_EventTrigger(num)
	return nil
}

// Deprecated: Use UserEventSpecifics_FlocIdComputed_EventTrigger.Descriptor instead.
func (UserEventSpecifics_FlocIdComputed_EventTrigger) EnumDescriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0, 4, 0}
}

type UserEventSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of event, as measured by client in microseconds since Windows epoch.
	EventTimeUsec *int64 `protobuf:"varint,1,opt,name=event_time_usec,json=eventTimeUsec" json:"event_time_usec,omitempty"`
	// The |global_id| field of the associated navigation, if there is one.
	NavigationId *int64 `protobuf:"varint,2,opt,name=navigation_id,json=navigationId" json:"navigation_id,omitempty"`
	// On startup we generate a new random id to identify which FieldTrialEvents
	// other events belonged to.
	SessionId *uint64 `protobuf:"fixed64,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// Types that are assignable to Event:
	//	*UserEventSpecifics_TestEvent
	//	*UserEventSpecifics_LanguageDetectionEvent
	//	*UserEventSpecifics_TranslationEvent
	//	*UserEventSpecifics_GaiaPasswordReuseEvent
	//	*UserEventSpecifics_GaiaPasswordCapturedEvent
	//	*UserEventSpecifics_FlocIdComputedEvent
	Event isUserEventSpecifics_Event `protobuf_oneof:"event"`
}

func (x *UserEventSpecifics) Reset() {
	*x = UserEventSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_event_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventSpecifics) ProtoMessage() {}

func (x *UserEventSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_user_event_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventSpecifics.ProtoReflect.Descriptor instead.
func (*UserEventSpecifics) Descriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0}
}

func (x *UserEventSpecifics) GetEventTimeUsec() int64 {
	if x != nil && x.EventTimeUsec != nil {
		return *x.EventTimeUsec
	}
	return 0
}

func (x *UserEventSpecifics) GetNavigationId() int64 {
	if x != nil && x.NavigationId != nil {
		return *x.NavigationId
	}
	return 0
}

func (x *UserEventSpecifics) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (m *UserEventSpecifics) GetEvent() isUserEventSpecifics_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *UserEventSpecifics) GetTestEvent() *UserEventSpecifics_Test {
	if x, ok := x.GetEvent().(*UserEventSpecifics_TestEvent); ok {
		return x.TestEvent
	}
	return nil
}

// Deprecated: Marked as deprecated in user_event_specifics.proto.
func (x *UserEventSpecifics) GetLanguageDetectionEvent() *UserEventSpecifics_LanguageDetection {
	if x, ok := x.GetEvent().(*UserEventSpecifics_LanguageDetectionEvent); ok {
		return x.LanguageDetectionEvent
	}
	return nil
}

// Deprecated: Marked as deprecated in user_event_specifics.proto.
func (x *UserEventSpecifics) GetTranslationEvent() *UserEventSpecifics_Translation {
	if x, ok := x.GetEvent().(*UserEventSpecifics_TranslationEvent); ok {
		return x.TranslationEvent
	}
	return nil
}

func (x *UserEventSpecifics) GetGaiaPasswordReuseEvent() *GaiaPasswordReuse {
	if x, ok := x.GetEvent().(*UserEventSpecifics_GaiaPasswordReuseEvent); ok {
		return x.GaiaPasswordReuseEvent
	}
	return nil
}

func (x *UserEventSpecifics) GetGaiaPasswordCapturedEvent() *UserEventSpecifics_GaiaPasswordCaptured {
	if x, ok := x.GetEvent().(*UserEventSpecifics_GaiaPasswordCapturedEvent); ok {
		return x.GaiaPasswordCapturedEvent
	}
	return nil
}

func (x *UserEventSpecifics) GetFlocIdComputedEvent() *UserEventSpecifics_FlocIdComputed {
	if x, ok := x.GetEvent().(*UserEventSpecifics_FlocIdComputedEvent); ok {
		return x.FlocIdComputedEvent
	}
	return nil
}

type isUserEventSpecifics_Event interface {
	isUserEventSpecifics_Event()
}

type UserEventSpecifics_TestEvent struct {
	TestEvent *UserEventSpecifics_Test `protobuf:"bytes,8,opt,name=test_event,json=testEvent,oneof"`
}

type UserEventSpecifics_LanguageDetectionEvent struct {
	// Deprecated: Marked as deprecated in user_event_specifics.proto.
	LanguageDetectionEvent *UserEventSpecifics_LanguageDetection `protobuf:"bytes,10,opt,name=language_detection_event,json=languageDetectionEvent,oneof"`
}

type UserEventSpecifics_TranslationEvent struct {
	// Deprecated: Marked as deprecated in user_event_specifics.proto.
	TranslationEvent *UserEventSpecifics_Translation `protobuf:"bytes,11,opt,name=translation_event,json=translationEvent,oneof"`
}

type UserEventSpecifics_GaiaPasswordReuseEvent struct {
	// Happens when a user types their Google account password on another site.
	GaiaPasswordReuseEvent *GaiaPasswordReuse `protobuf:"bytes,104,opt,name=gaia_password_reuse_event,json=gaiaPasswordReuseEvent,oneof"`
}

type UserEventSpecifics_GaiaPasswordCapturedEvent struct {
	GaiaPasswordCapturedEvent *UserEventSpecifics_GaiaPasswordCaptured `protobuf:"bytes,15,opt,name=gaia_password_captured_event,json=gaiaPasswordCapturedEvent,oneof"`
}

type UserEventSpecifics_FlocIdComputedEvent struct {
	FlocIdComputedEvent *UserEventSpecifics_FlocIdComputed `protobuf:"bytes,16,opt,name=floc_id_computed_event,json=flocIdComputedEvent,oneof"`
}

func (*UserEventSpecifics_TestEvent) isUserEventSpecifics_Event() {}

func (*UserEventSpecifics_LanguageDetectionEvent) isUserEventSpecifics_Event() {}

func (*UserEventSpecifics_TranslationEvent) isUserEventSpecifics_Event() {}

func (*UserEventSpecifics_GaiaPasswordReuseEvent) isUserEventSpecifics_Event() {}

func (*UserEventSpecifics_GaiaPasswordCapturedEvent) isUserEventSpecifics_Event() {}

func (*UserEventSpecifics_FlocIdComputedEvent) isUserEventSpecifics_Event() {}

// Used for testing and debugging EventLog system.
type UserEventSpecifics_Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserEventSpecifics_Test) Reset() {
	*x = UserEventSpecifics_Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_event_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventSpecifics_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventSpecifics_Test) ProtoMessage() {}

func (x *UserEventSpecifics_Test) ProtoReflect() protoreflect.Message {
	mi := &file_user_event_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventSpecifics_Test.ProtoReflect.Descriptor instead.
func (*UserEventSpecifics_Test) Descriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0, 0}
}

// Language detection output.
//
// Deprecated: Marked as deprecated in user_event_specifics.proto.
type UserEventSpecifics_LanguageDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Top n languages. Typically we just log the top language, but for page
	// that we're not confident about, we may log up to 3 top languages in
	// descending order.
	DetectedLanguages []*UserEventSpecifics_LanguageDetection_Language `protobuf:"bytes,1,rep,name=detected_languages,json=detectedLanguages" json:"detected_languages,omitempty"`
	// Adopted language code is the code of final determined language.
	// It will be stored only if it's different from the first detected
	// language.
	AdoptedLanguageCode *string `protobuf:"bytes,2,opt,name=adopted_language_code,json=adoptedLanguageCode" json:"adopted_language_code,omitempty"`
}

func (x *UserEventSpecifics_LanguageDetection) Reset() {
	*x = UserEventSpecifics_LanguageDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_event_specifics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventSpecifics_LanguageDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventSpecifics_LanguageDetection) ProtoMessage() {}

func (x *UserEventSpecifics_LanguageDetection) ProtoReflect() protoreflect.Message {
	mi := &file_user_event_specifics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventSpecifics_LanguageDetection.ProtoReflect.Descriptor instead.
func (*UserEventSpecifics_LanguageDetection) Descriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0, 1}
}

func (x *UserEventSpecifics_LanguageDetection) GetDetectedLanguages() []*UserEventSpecifics_LanguageDetection_Language {
	if x != nil {
		return x.DetectedLanguages
	}
	return nil
}

func (x *UserEventSpecifics_LanguageDetection) GetAdoptedLanguageCode() string {
	if x != nil && x.AdoptedLanguageCode != nil {
		return *x.AdoptedLanguageCode
	}
	return ""
}

// User translated a page or interacted with translate suggestion.
//
// Deprecated: Marked as deprecated in user_event_specifics.proto.
type UserEventSpecifics_Translation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source language of the translation.
	FromLanguageCode *string `protobuf:"bytes,1,opt,name=from_language_code,json=fromLanguageCode" json:"from_language_code,omitempty"`
	// Target language of the translation.
	ToLanguageCode *string                                     `protobuf:"bytes,2,opt,name=to_language_code,json=toLanguageCode" json:"to_language_code,omitempty"`
	Interaction    *UserEventSpecifics_Translation_Interaction `protobuf:"varint,3,opt,name=interaction,enum=sync_pb.UserEventSpecifics_Translation_Interaction" json:"interaction,omitempty"`
}

func (x *UserEventSpecifics_Translation) Reset() {
	*x = UserEventSpecifics_Translation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_event_specifics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventSpecifics_Translation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventSpecifics_Translation) ProtoMessage() {}

func (x *UserEventSpecifics_Translation) ProtoReflect() protoreflect.Message {
	mi := &file_user_event_specifics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventSpecifics_Translation.ProtoReflect.Descriptor instead.
func (*UserEventSpecifics_Translation) Descriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0, 2}
}

func (x *UserEventSpecifics_Translation) GetFromLanguageCode() string {
	if x != nil && x.FromLanguageCode != nil {
		return *x.FromLanguageCode
	}
	return ""
}

func (x *UserEventSpecifics_Translation) GetToLanguageCode() string {
	if x != nil && x.ToLanguageCode != nil {
		return *x.ToLanguageCode
	}
	return ""
}

func (x *UserEventSpecifics_Translation) GetInteraction() UserEventSpecifics_Translation_Interaction {
	if x != nil && x.Interaction != nil {
		return *x.Interaction
	}
	return UserEventSpecifics_Translation_UNKNOWN
}

// Logged when the user logs into Google, and at least once per 28d.
type UserEventSpecifics_GaiaPasswordCaptured struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTrigger *UserEventSpecifics_GaiaPasswordCaptured_EventTrigger `protobuf:"varint,1,opt,name=event_trigger,json=eventTrigger,enum=sync_pb.UserEventSpecifics_GaiaPasswordCaptured_EventTrigger" json:"event_trigger,omitempty"`
}

func (x *UserEventSpecifics_GaiaPasswordCaptured) Reset() {
	*x = UserEventSpecifics_GaiaPasswordCaptured{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_event_specifics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventSpecifics_GaiaPasswordCaptured) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventSpecifics_GaiaPasswordCaptured) ProtoMessage() {}

func (x *UserEventSpecifics_GaiaPasswordCaptured) ProtoReflect() protoreflect.Message {
	mi := &file_user_event_specifics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventSpecifics_GaiaPasswordCaptured.ProtoReflect.Descriptor instead.
func (*UserEventSpecifics_GaiaPasswordCaptured) Descriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0, 3}
}

func (x *UserEventSpecifics_GaiaPasswordCaptured) GetEventTrigger() UserEventSpecifics_GaiaPasswordCaptured_EventTrigger {
	if x != nil && x.EventTrigger != nil {
		return *x.EventTrigger
	}
	return UserEventSpecifics_GaiaPasswordCaptured_UNSPECIFIED
}

type UserEventSpecifics_FlocIdComputed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If not set, it means that the floc is disabled.
	FlocId *uint64 `protobuf:"varint,2,opt,name=floc_id,json=flocId" json:"floc_id,omitempty"`
}

func (x *UserEventSpecifics_FlocIdComputed) Reset() {
	*x = UserEventSpecifics_FlocIdComputed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_event_specifics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventSpecifics_FlocIdComputed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventSpecifics_FlocIdComputed) ProtoMessage() {}

func (x *UserEventSpecifics_FlocIdComputed) ProtoReflect() protoreflect.Message {
	mi := &file_user_event_specifics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventSpecifics_FlocIdComputed.ProtoReflect.Descriptor instead.
func (*UserEventSpecifics_FlocIdComputed) Descriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0, 4}
}

func (x *UserEventSpecifics_FlocIdComputed) GetFlocId() uint64 {
	if x != nil && x.FlocId != nil {
		return *x.FlocId
	}
	return 0
}

type UserEventSpecifics_LanguageDetection_Language struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 639 language code will be used.
	LanguageCode *string `protobuf:"bytes,1,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Whether the detected language is reliable, note this is determined by
	// the CLD3.
	IsReliable *bool `protobuf:"varint,2,opt,name=is_reliable,json=isReliable" json:"is_reliable,omitempty"`
}

func (x *UserEventSpecifics_LanguageDetection_Language) Reset() {
	*x = UserEventSpecifics_LanguageDetection_Language{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_event_specifics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventSpecifics_LanguageDetection_Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventSpecifics_LanguageDetection_Language) ProtoMessage() {}

func (x *UserEventSpecifics_LanguageDetection_Language) ProtoReflect() protoreflect.Message {
	mi := &file_user_event_specifics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventSpecifics_LanguageDetection_Language.ProtoReflect.Descriptor instead.
func (*UserEventSpecifics_LanguageDetection_Language) Descriptor() ([]byte, []int) {
	return file_user_event_specifics_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *UserEventSpecifics_LanguageDetection_Language) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

func (x *UserEventSpecifics_LanguageDetection_Language) GetIsReliable() bool {
	if x != nil && x.IsReliable != nil {
		return *x.IsReliable
	}
	return false
}

var File_user_event_specifics_proto protoreflect.FileDescriptor

var file_user_event_specifics_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x1a, 0x19, 0x67, 0x61, 0x69, 0x61, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xec, 0x0d, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x18, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x16, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x57, 0x0a, 0x19, 0x67, 0x61, 0x69, 0x61, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47,
	0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x67, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x1c, 0x67, 0x61,
	0x69, 0x61, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x61,
	0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x19, 0x67, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x61, 0x0a, 0x16, 0x66, 0x6c, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x6f,
	0x63, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x66,
	0x6c, 0x6f, 0x63, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x06, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x84, 0x02, 0x0a, 0x11, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x65, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x6f, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x50, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x02, 0x18,
	0x01, 0x1a, 0x8e, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x56, 0x45, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x3a, 0x02,
	0x18, 0x01, 0x1a, 0xc6, 0x01, 0x0a, 0x14, 0x47, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x47, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22,
	0x4a, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f,
	0x32, 0x38, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x8b, 0x01, 0x0a, 0x0e,
	0x46, 0x6c, 0x6f, 0x63, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x66, 0x6c, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x52, 0x11,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42,
	0x36, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03, 0x50, 0x01, 0x5a, 0x09, 0x2e, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_user_event_specifics_proto_rawDescOnce sync.Once
	file_user_event_specifics_proto_rawDescData = file_user_event_specifics_proto_rawDesc
)

func file_user_event_specifics_proto_rawDescGZIP() []byte {
	file_user_event_specifics_proto_rawDescOnce.Do(func() {
		file_user_event_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_event_specifics_proto_rawDescData)
	})
	return file_user_event_specifics_proto_rawDescData
}

var file_user_event_specifics_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_user_event_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_user_event_specifics_proto_goTypes = []interface{}{
	(UserEventSpecifics_Translation_Interaction)(0),           // 0: sync_pb.UserEventSpecifics.Translation.Interaction
	(UserEventSpecifics_GaiaPasswordCaptured_EventTrigger)(0), // 1: sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger
	(UserEventSpecifics_FlocIdComputed_EventTrigger)(0),       // 2: sync_pb.UserEventSpecifics.FlocIdComputed.EventTrigger
	(*UserEventSpecifics)(nil),                                // 3: sync_pb.UserEventSpecifics
	(*UserEventSpecifics_Test)(nil),                           // 4: sync_pb.UserEventSpecifics.Test
	(*UserEventSpecifics_LanguageDetection)(nil),              // 5: sync_pb.UserEventSpecifics.LanguageDetection
	(*UserEventSpecifics_Translation)(nil),                    // 6: sync_pb.UserEventSpecifics.Translation
	(*UserEventSpecifics_GaiaPasswordCaptured)(nil),           // 7: sync_pb.UserEventSpecifics.GaiaPasswordCaptured
	(*UserEventSpecifics_FlocIdComputed)(nil),                 // 8: sync_pb.UserEventSpecifics.FlocIdComputed
	(*UserEventSpecifics_LanguageDetection_Language)(nil),     // 9: sync_pb.UserEventSpecifics.LanguageDetection.Language
	(*GaiaPasswordReuse)(nil),                                 // 10: sync_pb.GaiaPasswordReuse
}
var file_user_event_specifics_proto_depIdxs = []int32{
	4,  // 0: sync_pb.UserEventSpecifics.test_event:type_name -> sync_pb.UserEventSpecifics.Test
	5,  // 1: sync_pb.UserEventSpecifics.language_detection_event:type_name -> sync_pb.UserEventSpecifics.LanguageDetection
	6,  // 2: sync_pb.UserEventSpecifics.translation_event:type_name -> sync_pb.UserEventSpecifics.Translation
	10, // 3: sync_pb.UserEventSpecifics.gaia_password_reuse_event:type_name -> sync_pb.GaiaPasswordReuse
	7,  // 4: sync_pb.UserEventSpecifics.gaia_password_captured_event:type_name -> sync_pb.UserEventSpecifics.GaiaPasswordCaptured
	8,  // 5: sync_pb.UserEventSpecifics.floc_id_computed_event:type_name -> sync_pb.UserEventSpecifics.FlocIdComputed
	9,  // 6: sync_pb.UserEventSpecifics.LanguageDetection.detected_languages:type_name -> sync_pb.UserEventSpecifics.LanguageDetection.Language
	0,  // 7: sync_pb.UserEventSpecifics.Translation.interaction:type_name -> sync_pb.UserEventSpecifics.Translation.Interaction
	1,  // 8: sync_pb.UserEventSpecifics.GaiaPasswordCaptured.event_trigger:type_name -> sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_user_event_specifics_proto_init() }
func file_user_event_specifics_proto_init() {
	if File_user_event_specifics_proto != nil {
		return
	}
	file_gaia_password_reuse_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_event_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_event_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventSpecifics_Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_event_specifics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventSpecifics_LanguageDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_event_specifics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventSpecifics_Translation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_event_specifics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventSpecifics_GaiaPasswordCaptured); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_event_specifics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventSpecifics_FlocIdComputed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_event_specifics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventSpecifics_LanguageDetection_Language); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_event_specifics_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*UserEventSpecifics_TestEvent)(nil),
		(*UserEventSpecifics_LanguageDetectionEvent)(nil),
		(*UserEventSpecifics_TranslationEvent)(nil),
		(*UserEventSpecifics_GaiaPasswordReuseEvent)(nil),
		(*UserEventSpecifics_GaiaPasswordCapturedEvent)(nil),
		(*UserEventSpecifics_FlocIdComputedEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_event_specifics_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_event_specifics_proto_goTypes,
		DependencyIndexes: file_user_event_specifics_proto_depIdxs,
		EnumInfos:         file_user_event_specifics_proto_enumTypes,
		MessageInfos:      file_user_event_specifics_proto_msgTypes,
	}.Build()
	File_user_event_specifics_proto = out.File
	file_user_event_specifics_proto_rawDesc = nil
	file_user_event_specifics_proto_goTypes = nil
	file_user_event_specifics_proto_depIdxs = nil
}
