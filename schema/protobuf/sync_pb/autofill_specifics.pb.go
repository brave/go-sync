// Copyright 2012 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for autofill.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: autofill_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the validation status of value stored in the AutofillProfile.
type AutofillProfileSpecifics_VerificationStatus int32

const (
	// No verification status assigned.
	AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED AutofillProfileSpecifics_VerificationStatus = 0
	// The value token was parsed from a parent token.
	// For example, the first name was derived by splitting a full name into
	// its components.
	AutofillProfileSpecifics_PARSED AutofillProfileSpecifics_VerificationStatus = 1
	// Value was built from its subcomponents.
	// For example, the full name was built from the first, middle and last
	// name.
	AutofillProfileSpecifics_FORMATTED AutofillProfileSpecifics_VerificationStatus = 2
	// The value was observed in a form transmission.
	// For example, the user filled a form that contained at NAME_FULL field.
	// The value of NAME_FULL will be stored as OBSERVED.
	AutofillProfileSpecifics_OBSERVED AutofillProfileSpecifics_VerificationStatus = 3
	// The user used the autofill settings to verify and store this token.
	// This is currently only applicable to the full name, since users cannot
	// edit individual components of their name.
	AutofillProfileSpecifics_USER_VERIFIED AutofillProfileSpecifics_VerificationStatus = 4
	// The token was parsed remotely.
	AutofillProfileSpecifics_SERVER_PARSED AutofillProfileSpecifics_VerificationStatus = 5
)

// Enum value maps for AutofillProfileSpecifics_VerificationStatus.
var (
	AutofillProfileSpecifics_VerificationStatus_name = map[int32]string{
		0: "VERIFICATION_STATUS_UNSPECIFIED",
		1: "PARSED",
		2: "FORMATTED",
		3: "OBSERVED",
		4: "USER_VERIFIED",
		5: "SERVER_PARSED",
	}
	AutofillProfileSpecifics_VerificationStatus_value = map[string]int32{
		"VERIFICATION_STATUS_UNSPECIFIED": 0,
		"PARSED":                          1,
		"FORMATTED":                       2,
		"OBSERVED":                        3,
		"USER_VERIFIED":                   4,
		"SERVER_PARSED":                   5,
	}
)

func (x AutofillProfileSpecifics_VerificationStatus) Enum() *AutofillProfileSpecifics_VerificationStatus {
	p := new(AutofillProfileSpecifics_VerificationStatus)
	*p = x
	return p
}

func (x AutofillProfileSpecifics_VerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutofillProfileSpecifics_VerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[0].Descriptor()
}

func (AutofillProfileSpecifics_VerificationStatus) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[0]
}

func (x AutofillProfileSpecifics_VerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AutofillProfileSpecifics_VerificationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AutofillProfileSpecifics_VerificationStatus(num)
	return nil
}

// Deprecated: Use AutofillProfileSpecifics_VerificationStatus.Descriptor instead.
func (AutofillProfileSpecifics_VerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{0, 0}
}

// For category benefits, represents the category of purchases that the
// benefit can be applied to.
type CardBenefit_CategoryBenefitType int32

const (
	CardBenefit_CATEGORY_BENEFIT_TYPE_UNKNOWN CardBenefit_CategoryBenefitType = 0
	CardBenefit_SUBSCRIPTION                  CardBenefit_CategoryBenefitType = 1
	CardBenefit_FLIGHTS                       CardBenefit_CategoryBenefitType = 2
	CardBenefit_DINING                        CardBenefit_CategoryBenefitType = 3
	CardBenefit_ENTERTAINMENT                 CardBenefit_CategoryBenefitType = 4
	CardBenefit_STREAMING                     CardBenefit_CategoryBenefitType = 5
	CardBenefit_GROCERY_STORES                CardBenefit_CategoryBenefitType = 6
)

// Enum value maps for CardBenefit_CategoryBenefitType.
var (
	CardBenefit_CategoryBenefitType_name = map[int32]string{
		0: "CATEGORY_BENEFIT_TYPE_UNKNOWN",
		1: "SUBSCRIPTION",
		2: "FLIGHTS",
		3: "DINING",
		4: "ENTERTAINMENT",
		5: "STREAMING",
		6: "GROCERY_STORES",
	}
	CardBenefit_CategoryBenefitType_value = map[string]int32{
		"CATEGORY_BENEFIT_TYPE_UNKNOWN": 0,
		"SUBSCRIPTION":                  1,
		"FLIGHTS":                       2,
		"DINING":                        3,
		"ENTERTAINMENT":                 4,
		"STREAMING":                     5,
		"GROCERY_STORES":                6,
	}
)

func (x CardBenefit_CategoryBenefitType) Enum() *CardBenefit_CategoryBenefitType {
	p := new(CardBenefit_CategoryBenefitType)
	*p = x
	return p
}

func (x CardBenefit_CategoryBenefitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardBenefit_CategoryBenefitType) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[1].Descriptor()
}

func (CardBenefit_CategoryBenefitType) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[1]
}

func (x CardBenefit_CategoryBenefitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardBenefit_CategoryBenefitType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardBenefit_CategoryBenefitType(num)
	return nil
}

// Deprecated: Use CardBenefit_CategoryBenefitType.Descriptor instead.
func (CardBenefit_CategoryBenefitType) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{3, 0}
}

type CardIssuer_Issuer int32

const (
	CardIssuer_ISSUER_UNKNOWN CardIssuer_Issuer = 0
	// Card where the issuer is Google.
	CardIssuer_GOOGLE CardIssuer_Issuer = 1
	// Card where the issuer is external.
	CardIssuer_EXTERNAL_ISSUER CardIssuer_Issuer = 2
)

// Enum value maps for CardIssuer_Issuer.
var (
	CardIssuer_Issuer_name = map[int32]string{
		0: "ISSUER_UNKNOWN",
		1: "GOOGLE",
		2: "EXTERNAL_ISSUER",
	}
	CardIssuer_Issuer_value = map[string]int32{
		"ISSUER_UNKNOWN":  0,
		"GOOGLE":          1,
		"EXTERNAL_ISSUER": 2,
	}
)

func (x CardIssuer_Issuer) Enum() *CardIssuer_Issuer {
	p := new(CardIssuer_Issuer)
	*p = x
	return p
}

func (x CardIssuer_Issuer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardIssuer_Issuer) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[2].Descriptor()
}

func (CardIssuer_Issuer) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[2]
}

func (x CardIssuer_Issuer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardIssuer_Issuer) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardIssuer_Issuer(num)
	return nil
}

// Deprecated: Use CardIssuer_Issuer.Descriptor instead.
func (CardIssuer_Issuer) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{4, 0}
}

type WalletMaskedCreditCard_WalletCardStatus int32

const (
	WalletMaskedCreditCard_VALID   WalletMaskedCreditCard_WalletCardStatus = 0
	WalletMaskedCreditCard_EXPIRED WalletMaskedCreditCard_WalletCardStatus = 1
)

// Enum value maps for WalletMaskedCreditCard_WalletCardStatus.
var (
	WalletMaskedCreditCard_WalletCardStatus_name = map[int32]string{
		0: "VALID",
		1: "EXPIRED",
	}
	WalletMaskedCreditCard_WalletCardStatus_value = map[string]int32{
		"VALID":   0,
		"EXPIRED": 1,
	}
)

func (x WalletMaskedCreditCard_WalletCardStatus) Enum() *WalletMaskedCreditCard_WalletCardStatus {
	p := new(WalletMaskedCreditCard_WalletCardStatus)
	*p = x
	return p
}

func (x WalletMaskedCreditCard_WalletCardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletMaskedCreditCard_WalletCardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[3].Descriptor()
}

func (WalletMaskedCreditCard_WalletCardStatus) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[3]
}

func (x WalletMaskedCreditCard_WalletCardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WalletMaskedCreditCard_WalletCardStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WalletMaskedCreditCard_WalletCardStatus(num)
	return nil
}

// Deprecated: Use WalletMaskedCreditCard_WalletCardStatus.Descriptor instead.
func (WalletMaskedCreditCard_WalletCardStatus) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{5, 0}
}

type WalletMaskedCreditCard_WalletCardType int32

const (
	WalletMaskedCreditCard_UNKNOWN     WalletMaskedCreditCard_WalletCardType = 0
	WalletMaskedCreditCard_AMEX        WalletMaskedCreditCard_WalletCardType = 1
	WalletMaskedCreditCard_DISCOVER    WalletMaskedCreditCard_WalletCardType = 2
	WalletMaskedCreditCard_JCB         WalletMaskedCreditCard_WalletCardType = 3
	WalletMaskedCreditCard_MAESTRO     WalletMaskedCreditCard_WalletCardType = 4
	WalletMaskedCreditCard_MASTER_CARD WalletMaskedCreditCard_WalletCardType = 5
	WalletMaskedCreditCard_SOLO        WalletMaskedCreditCard_WalletCardType = 6
	WalletMaskedCreditCard_SWITCH      WalletMaskedCreditCard_WalletCardType = 7
	WalletMaskedCreditCard_VISA        WalletMaskedCreditCard_WalletCardType = 8
	WalletMaskedCreditCard_UNIONPAY    WalletMaskedCreditCard_WalletCardType = 9
	WalletMaskedCreditCard_ELO         WalletMaskedCreditCard_WalletCardType = 10
)

// Enum value maps for WalletMaskedCreditCard_WalletCardType.
var (
	WalletMaskedCreditCard_WalletCardType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "AMEX",
		2:  "DISCOVER",
		3:  "JCB",
		4:  "MAESTRO",
		5:  "MASTER_CARD",
		6:  "SOLO",
		7:  "SWITCH",
		8:  "VISA",
		9:  "UNIONPAY",
		10: "ELO",
	}
	WalletMaskedCreditCard_WalletCardType_value = map[string]int32{
		"UNKNOWN":     0,
		"AMEX":        1,
		"DISCOVER":    2,
		"JCB":         3,
		"MAESTRO":     4,
		"MASTER_CARD": 5,
		"SOLO":        6,
		"SWITCH":      7,
		"VISA":        8,
		"UNIONPAY":    9,
		"ELO":         10,
	}
)

func (x WalletMaskedCreditCard_WalletCardType) Enum() *WalletMaskedCreditCard_WalletCardType {
	p := new(WalletMaskedCreditCard_WalletCardType)
	*p = x
	return p
}

func (x WalletMaskedCreditCard_WalletCardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletMaskedCreditCard_WalletCardType) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[4].Descriptor()
}

func (WalletMaskedCreditCard_WalletCardType) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[4]
}

func (x WalletMaskedCreditCard_WalletCardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WalletMaskedCreditCard_WalletCardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WalletMaskedCreditCard_WalletCardType(num)
	return nil
}

// Deprecated: Use WalletMaskedCreditCard_WalletCardType.Descriptor instead.
func (WalletMaskedCreditCard_WalletCardType) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{5, 1}
}

type WalletMaskedCreditCard_VirtualCardEnrollmentState int32

const (
	WalletMaskedCreditCard_UNSPECIFIED WalletMaskedCreditCard_VirtualCardEnrollmentState = 0
	// Deprecated: Marked as deprecated in autofill_specifics.proto.
	WalletMaskedCreditCard_UNENROLLED                  WalletMaskedCreditCard_VirtualCardEnrollmentState = 1
	WalletMaskedCreditCard_ENROLLED                    WalletMaskedCreditCard_VirtualCardEnrollmentState = 2
	WalletMaskedCreditCard_UNENROLLED_AND_NOT_ELIGIBLE WalletMaskedCreditCard_VirtualCardEnrollmentState = 3
	WalletMaskedCreditCard_UNENROLLED_AND_ELIGIBLE     WalletMaskedCreditCard_VirtualCardEnrollmentState = 4
)

// Enum value maps for WalletMaskedCreditCard_VirtualCardEnrollmentState.
var (
	WalletMaskedCreditCard_VirtualCardEnrollmentState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNENROLLED",
		2: "ENROLLED",
		3: "UNENROLLED_AND_NOT_ELIGIBLE",
		4: "UNENROLLED_AND_ELIGIBLE",
	}
	WalletMaskedCreditCard_VirtualCardEnrollmentState_value = map[string]int32{
		"UNSPECIFIED":                 0,
		"UNENROLLED":                  1,
		"ENROLLED":                    2,
		"UNENROLLED_AND_NOT_ELIGIBLE": 3,
		"UNENROLLED_AND_ELIGIBLE":     4,
	}
)

func (x WalletMaskedCreditCard_VirtualCardEnrollmentState) Enum() *WalletMaskedCreditCard_VirtualCardEnrollmentState {
	p := new(WalletMaskedCreditCard_VirtualCardEnrollmentState)
	*p = x
	return p
}

func (x WalletMaskedCreditCard_VirtualCardEnrollmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletMaskedCreditCard_VirtualCardEnrollmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[5].Descriptor()
}

func (WalletMaskedCreditCard_VirtualCardEnrollmentState) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[5]
}

func (x WalletMaskedCreditCard_VirtualCardEnrollmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WalletMaskedCreditCard_VirtualCardEnrollmentState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WalletMaskedCreditCard_VirtualCardEnrollmentState(num)
	return nil
}

// Deprecated: Use WalletMaskedCreditCard_VirtualCardEnrollmentState.Descriptor instead.
func (WalletMaskedCreditCard_VirtualCardEnrollmentState) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{5, 2}
}

type WalletMaskedCreditCard_VirtualCardEnrollmentType int32

const (
	WalletMaskedCreditCard_TYPE_UNSPECIFIED WalletMaskedCreditCard_VirtualCardEnrollmentType = 0
	WalletMaskedCreditCard_ISSUER           WalletMaskedCreditCard_VirtualCardEnrollmentType = 1
	WalletMaskedCreditCard_NETWORK          WalletMaskedCreditCard_VirtualCardEnrollmentType = 2
)

// Enum value maps for WalletMaskedCreditCard_VirtualCardEnrollmentType.
var (
	WalletMaskedCreditCard_VirtualCardEnrollmentType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "ISSUER",
		2: "NETWORK",
	}
	WalletMaskedCreditCard_VirtualCardEnrollmentType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"ISSUER":           1,
		"NETWORK":          2,
	}
)

func (x WalletMaskedCreditCard_VirtualCardEnrollmentType) Enum() *WalletMaskedCreditCard_VirtualCardEnrollmentType {
	p := new(WalletMaskedCreditCard_VirtualCardEnrollmentType)
	*p = x
	return p
}

func (x WalletMaskedCreditCard_VirtualCardEnrollmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletMaskedCreditCard_VirtualCardEnrollmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[6].Descriptor()
}

func (WalletMaskedCreditCard_VirtualCardEnrollmentType) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[6]
}

func (x WalletMaskedCreditCard_VirtualCardEnrollmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WalletMaskedCreditCard_VirtualCardEnrollmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WalletMaskedCreditCard_VirtualCardEnrollmentType(num)
	return nil
}

// Deprecated: Use WalletMaskedCreditCard_VirtualCardEnrollmentType.Descriptor instead.
func (WalletMaskedCreditCard_VirtualCardEnrollmentType) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{5, 3}
}

// Supported payment infrastructures (rail) that allow users to send money
// between the payer and the payee. https://en.wikipedia.org/wiki/Payment_rail
type PaymentInstrument_SupportedRail int32

const (
	PaymentInstrument_SUPPORTED_RAIL_UNKNOWN PaymentInstrument_SupportedRail = 0
	// Payment rails for Brazil Open Banking.
	PaymentInstrument_PIX PaymentInstrument_SupportedRail = 1
	// International Bank Account Numbers.
	PaymentInstrument_IBAN PaymentInstrument_SupportedRail = 2
)

// Enum value maps for PaymentInstrument_SupportedRail.
var (
	PaymentInstrument_SupportedRail_name = map[int32]string{
		0: "SUPPORTED_RAIL_UNKNOWN",
		1: "PIX",
		2: "IBAN",
	}
	PaymentInstrument_SupportedRail_value = map[string]int32{
		"SUPPORTED_RAIL_UNKNOWN": 0,
		"PIX":                    1,
		"IBAN":                   2,
	}
)

func (x PaymentInstrument_SupportedRail) Enum() *PaymentInstrument_SupportedRail {
	p := new(PaymentInstrument_SupportedRail)
	*p = x
	return p
}

func (x PaymentInstrument_SupportedRail) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentInstrument_SupportedRail) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[7].Descriptor()
}

func (PaymentInstrument_SupportedRail) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[7]
}

func (x PaymentInstrument_SupportedRail) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PaymentInstrument_SupportedRail) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PaymentInstrument_SupportedRail(num)
	return nil
}

// Deprecated: Use PaymentInstrument_SupportedRail.Descriptor instead.
func (PaymentInstrument_SupportedRail) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{9, 0}
}

type BankAccountDetails_AccountType int32

const (
	BankAccountDetails_ACCOUNT_TYPE_UNSPECIFIED BankAccountDetails_AccountType = 0
	BankAccountDetails_CHECKING                 BankAccountDetails_AccountType = 1
	BankAccountDetails_SAVINGS                  BankAccountDetails_AccountType = 2
	BankAccountDetails_CURRENT                  BankAccountDetails_AccountType = 3
	BankAccountDetails_SALARY                   BankAccountDetails_AccountType = 4
	BankAccountDetails_TRANSACTING_ACCOUNT      BankAccountDetails_AccountType = 5
)

// Enum value maps for BankAccountDetails_AccountType.
var (
	BankAccountDetails_AccountType_name = map[int32]string{
		0: "ACCOUNT_TYPE_UNSPECIFIED",
		1: "CHECKING",
		2: "SAVINGS",
		3: "CURRENT",
		4: "SALARY",
		5: "TRANSACTING_ACCOUNT",
	}
	BankAccountDetails_AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED": 0,
		"CHECKING":                 1,
		"SAVINGS":                  2,
		"CURRENT":                  3,
		"SALARY":                   4,
		"TRANSACTING_ACCOUNT":      5,
	}
)

func (x BankAccountDetails_AccountType) Enum() *BankAccountDetails_AccountType {
	p := new(BankAccountDetails_AccountType)
	*p = x
	return p
}

func (x BankAccountDetails_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankAccountDetails_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[8].Descriptor()
}

func (BankAccountDetails_AccountType) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[8]
}

func (x BankAccountDetails_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BankAccountDetails_AccountType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BankAccountDetails_AccountType(num)
	return nil
}

// Deprecated: Use BankAccountDetails_AccountType.Descriptor instead.
func (BankAccountDetails_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{11, 0}
}

type AutofillWalletSpecifics_WalletInfoType int32

const (
	AutofillWalletSpecifics_UNKNOWN            AutofillWalletSpecifics_WalletInfoType = 0
	AutofillWalletSpecifics_MASKED_CREDIT_CARD AutofillWalletSpecifics_WalletInfoType = 1
	// POSTAL_ADDRESS is unused by the client since M121.
	AutofillWalletSpecifics_POSTAL_ADDRESS               AutofillWalletSpecifics_WalletInfoType = 2
	AutofillWalletSpecifics_CUSTOMER_DATA                AutofillWalletSpecifics_WalletInfoType = 3
	AutofillWalletSpecifics_CREDIT_CARD_CLOUD_TOKEN_DATA AutofillWalletSpecifics_WalletInfoType = 4
	AutofillWalletSpecifics_PAYMENT_INSTRUMENT           AutofillWalletSpecifics_WalletInfoType = 5
	// Deprecated: Marked as deprecated in autofill_specifics.proto.
	AutofillWalletSpecifics_MASKED_IBAN AutofillWalletSpecifics_WalletInfoType = 6
)

// Enum value maps for AutofillWalletSpecifics_WalletInfoType.
var (
	AutofillWalletSpecifics_WalletInfoType_name = map[int32]string{
		0: "UNKNOWN",
		1: "MASKED_CREDIT_CARD",
		2: "POSTAL_ADDRESS",
		3: "CUSTOMER_DATA",
		4: "CREDIT_CARD_CLOUD_TOKEN_DATA",
		5: "PAYMENT_INSTRUMENT",
		6: "MASKED_IBAN",
	}
	AutofillWalletSpecifics_WalletInfoType_value = map[string]int32{
		"UNKNOWN":                      0,
		"MASKED_CREDIT_CARD":           1,
		"POSTAL_ADDRESS":               2,
		"CUSTOMER_DATA":                3,
		"CREDIT_CARD_CLOUD_TOKEN_DATA": 4,
		"PAYMENT_INSTRUMENT":           5,
		"MASKED_IBAN":                  6,
	}
)

func (x AutofillWalletSpecifics_WalletInfoType) Enum() *AutofillWalletSpecifics_WalletInfoType {
	p := new(AutofillWalletSpecifics_WalletInfoType)
	*p = x
	return p
}

func (x AutofillWalletSpecifics_WalletInfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutofillWalletSpecifics_WalletInfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[9].Descriptor()
}

func (AutofillWalletSpecifics_WalletInfoType) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[9]
}

func (x AutofillWalletSpecifics_WalletInfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AutofillWalletSpecifics_WalletInfoType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AutofillWalletSpecifics_WalletInfoType(num)
	return nil
}

// Deprecated: Use AutofillWalletSpecifics_WalletInfoType.Descriptor instead.
func (AutofillWalletSpecifics_WalletInfoType) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{12, 0}
}

type WalletMetadataSpecifics_Type int32

const (
	WalletMetadataSpecifics_UNKNOWN WalletMetadataSpecifics_Type = 0
	WalletMetadataSpecifics_CARD    WalletMetadataSpecifics_Type = 1
	// Unused by the client since M121.
	// TODO(crbug.com/1457187): Some server-side code still relies on this.
	// To keep the protos in sync, it is kept until that code is cleaned up.
	WalletMetadataSpecifics_ADDRESS WalletMetadataSpecifics_Type = 2
	WalletMetadataSpecifics_IBAN    WalletMetadataSpecifics_Type = 3
)

// Enum value maps for WalletMetadataSpecifics_Type.
var (
	WalletMetadataSpecifics_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "CARD",
		2: "ADDRESS",
		3: "IBAN",
	}
	WalletMetadataSpecifics_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"CARD":    1,
		"ADDRESS": 2,
		"IBAN":    3,
	}
)

func (x WalletMetadataSpecifics_Type) Enum() *WalletMetadataSpecifics_Type {
	p := new(WalletMetadataSpecifics_Type)
	*p = x
	return p
}

func (x WalletMetadataSpecifics_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletMetadataSpecifics_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[10].Descriptor()
}

func (WalletMetadataSpecifics_Type) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[10]
}

func (x WalletMetadataSpecifics_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WalletMetadataSpecifics_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WalletMetadataSpecifics_Type(num)
	return nil
}

// Deprecated: Use WalletMetadataSpecifics_Type.Descriptor instead.
func (WalletMetadataSpecifics_Type) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{13, 0}
}

// An AutofillProfile.
type AutofillProfileSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid *string `protobuf:"bytes,15,opt,name=guid" json:"guid,omitempty"`
	// Starting from M115, Autofill ignores the origin and doesn't distinguish
	// between verified (meaning `deprecated_origin == kSettingsOrigin`) and
	// unverified profiles anymore. However, clients prior to this milestone only
	// accept updates to verified profiles through Sync if the remote profile is
	// verified as well. For this reason, M115 clients and above always set the
	// origin to kSettingsOrigin.
	// TODO(crbug.com/1441905): Remove in a few milestones.
	DeprecatedOrigin *string `protobuf:"bytes,16,opt,name=deprecated_origin,json=deprecatedOrigin" json:"deprecated_origin,omitempty"`
	UseCount         *int64  `protobuf:"varint,22,opt,name=use_count,json=useCount" json:"use_count,omitempty"`
	// The time_t value of the last time this profile was used. This
	// value makes sense wrt base::Time::To/FromTimeT, which measures
	// from the Windows epoch.
	UseDate *int64 `protobuf:"varint,23,opt,name=use_date,json=useDate" json:"use_date,omitempty"`
	// A user chosen profile label that is used to identify the profile.
	// The value of the label can be freely chosen by the user. Two possible label
	// values are '$HOME$' or '$WORK$' which have a special meaning.
	ProfileLabel *string `protobuf:"bytes,62,opt,name=profile_label,json=profileLabel" json:"profile_label,omitempty"`
	// Contact info name fields.
	NameFirst  []string `protobuf:"bytes,2,rep,name=name_first,json=nameFirst" json:"name_first,omitempty"`
	NameMiddle []string `protobuf:"bytes,3,rep,name=name_middle,json=nameMiddle" json:"name_middle,omitempty"`
	NameLast   []string `protobuf:"bytes,4,rep,name=name_last,json=nameLast" json:"name_last,omitempty"`
	// Sometimes the last name is composed of two names as it is common for
	// Hispanic/Latinx names. In the unstructured representation of the last name,
	// there may be even a conjunction between the first and the second last
	// name. For example, the more-complete version of Pablo Picasso's surname is
	// "Ruiz y Picasso" containing a first last name, a conjunction (the y) and a
	// second last name.
	NameLastFirst             []string                                      `protobuf:"bytes,27,rep,name=name_last_first,json=nameLastFirst" json:"name_last_first,omitempty"`
	NameLastConjunction       []string                                      `protobuf:"bytes,28,rep,name=name_last_conjunction,json=nameLastConjunction" json:"name_last_conjunction,omitempty"`
	NameLastSecond            []string                                      `protobuf:"bytes,29,rep,name=name_last_second,json=nameLastSecond" json:"name_last_second,omitempty"`
	NameFull                  []string                                      `protobuf:"bytes,21,rep,name=name_full,json=nameFull" json:"name_full,omitempty"`
	NameFirstStatus           []AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,31,rep,name=name_first_status,json=nameFirstStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"name_first_status,omitempty"`
	NameMiddleStatus          []AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,32,rep,name=name_middle_status,json=nameMiddleStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"name_middle_status,omitempty"`
	NameLastStatus            []AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,33,rep,name=name_last_status,json=nameLastStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"name_last_status,omitempty"`
	NameLastFirstStatus       []AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,34,rep,name=name_last_first_status,json=nameLastFirstStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"name_last_first_status,omitempty"`
	NameLastConjunctionStatus []AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,35,rep,name=name_last_conjunction_status,json=nameLastConjunctionStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"name_last_conjunction_status,omitempty"`
	NameLastSecondStatus      []AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,36,rep,name=name_last_second_status,json=nameLastSecondStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"name_last_second_status,omitempty"`
	NameFullStatus            []AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,37,rep,name=name_full_status,json=nameFullStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"name_full_status,omitempty"`
	// Contact info additional fields.
	EmailAddress []string `protobuf:"bytes,5,rep,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	CompanyName  *string  `protobuf:"bytes,6,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
	// Address field.
	// The address_home_line1/2 fields are deprecated and
	// address_home_street_address should be used instead by
	// joining address_home_line1/2 with a newline ("\n").
	// Full deprecation can not be achieved before all sync profiles have been
	// updated with a M86+ client.
	// TODO(crbug/1111740): Remove usages of address_home_line1/2 and mark field
	// as deprecated.
	AddressHomeLine1        *string `protobuf:"bytes,7,opt,name=address_home_line1,json=addressHomeLine1" json:"address_home_line1,omitempty"`
	AddressHomeLine2        *string `protobuf:"bytes,8,opt,name=address_home_line2,json=addressHomeLine2" json:"address_home_line2,omitempty"`
	AddressHomeCity         *string `protobuf:"bytes,9,opt,name=address_home_city,json=addressHomeCity" json:"address_home_city,omitempty"`
	AddressHomeState        *string `protobuf:"bytes,10,opt,name=address_home_state,json=addressHomeState" json:"address_home_state,omitempty"`
	AddressHomeZip          *string `protobuf:"bytes,11,opt,name=address_home_zip,json=addressHomeZip" json:"address_home_zip,omitempty"`
	AddressHomeCountry      *string `protobuf:"bytes,12,opt,name=address_home_country,json=addressHomeCountry" json:"address_home_country,omitempty"`
	AddressHomeAdminLevel_2 *string `protobuf:"bytes,71,opt,name=address_home_admin_level_2,json=addressHomeAdminLevel2" json:"address_home_admin_level_2,omitempty"`
	// Additional address fields for i18n.
	AddressHomeStreetAddress      *string `protobuf:"bytes,17,opt,name=address_home_street_address,json=addressHomeStreetAddress" json:"address_home_street_address,omitempty"`
	AddressHomeSortingCode        *string `protobuf:"bytes,18,opt,name=address_home_sorting_code,json=addressHomeSortingCode" json:"address_home_sorting_code,omitempty"`
	AddressHomeDependentLocality  *string `protobuf:"bytes,19,opt,name=address_home_dependent_locality,json=addressHomeDependentLocality" json:"address_home_dependent_locality,omitempty"`
	AddressHomeLanguageCode       *string `protobuf:"bytes,20,opt,name=address_home_language_code,json=addressHomeLanguageCode" json:"address_home_language_code,omitempty"`
	AddressHomeThoroughfareName   *string `protobuf:"bytes,38,opt,name=address_home_thoroughfare_name,json=addressHomeThoroughfareName" json:"address_home_thoroughfare_name,omitempty"`
	AddressHomeThoroughfareNumber *string `protobuf:"bytes,39,opt,name=address_home_thoroughfare_number,json=addressHomeThoroughfareNumber" json:"address_home_thoroughfare_number,omitempty"`
	AddressHomeStreetLocation     *string `protobuf:"bytes,73,opt,name=address_home_street_location,json=addressHomeStreetLocation" json:"address_home_street_location,omitempty"`
	AddressHomeSubpremiseName     *string `protobuf:"bytes,42,opt,name=address_home_subpremise_name,json=addressHomeSubpremiseName" json:"address_home_subpremise_name,omitempty"`
	// All the information related to the apartment. Normally a combination of the
	// apartment type (address_home_apt_type) and number (address_home_apt_num).
	// E.g. "Apt 5".
	AddressHomeApt *string `protobuf:"bytes,85,opt,name=address_home_apt,json=addressHomeApt" json:"address_home_apt,omitempty"`
	// The raw number (or identifier) of an apartment (e.g. "5") but without a
	// prefix. The value "apt 5" would correspond to the address_home_apt.
	AddressHomeAptNum *string `protobuf:"bytes,56,opt,name=address_home_apt_num,json=addressHomeAptNum" json:"address_home_apt_num,omitempty"`
	// Information describing the type of apartment (e.g. Apt, Apartamento, Sala,
	// Departamento).
	AddressHomeAptType  *string `protobuf:"bytes,87,opt,name=address_home_apt_type,json=addressHomeAptType" json:"address_home_apt_type,omitempty"`
	AddressHomeFloor    *string `protobuf:"bytes,57,opt,name=address_home_floor,json=addressHomeFloor" json:"address_home_floor,omitempty"`
	AddressHomeLandmark *string `protobuf:"bytes,67,opt,name=address_home_landmark,json=addressHomeLandmark" json:"address_home_landmark,omitempty"`
	// The type indicates that the address is at the intersection between two
	// streets. This is a common way of writing addresses in Mexico.
	AddressHomeBetweenStreets *string `protobuf:"bytes,69,opt,name=address_home_between_streets,json=addressHomeBetweenStreets" json:"address_home_between_streets,omitempty"`
	// The meaning of the field is similar to address_home_between_streets. The
	// type should be used for "Entre calle 1" in MX addresses which also
	// contain the "Entre calle 2" field.
	AddressHomeBetweenStreets_1 *string `protobuf:"bytes,77,opt,name=address_home_between_streets_1,json=addressHomeBetweenStreets1" json:"address_home_between_streets_1,omitempty"`
	// The meaning of the field is similar to address_home_between_streets. The
	// type should be used for "Entre calle 2" in MX addresses which also
	// contain the "Entre calle 1" field.
	AddressHomeBetweenStreets_2 *string `protobuf:"bytes,79,opt,name=address_home_between_streets_2,json=addressHomeBetweenStreets2" json:"address_home_between_streets_2,omitempty"`
	AddressHomeOverflow         *string `protobuf:"bytes,75,opt,name=address_home_overflow,json=addressHomeOverflow" json:"address_home_overflow,omitempty"`
	// Combination of types address_home_between_streets or address_home_landmark.
	// Note that some address forms require the combination of both in a single
	// field as opposed to each one separately.
	AddressHomeBetweenStreetsOrLandmark *string `protobuf:"bytes,81,opt,name=address_home_between_streets_or_landmark,json=addressHomeBetweenStreetsOrLandmark" json:"address_home_between_streets_or_landmark,omitempty"`
	// Combination of types address_home_overflow and address_home_landmark.
	// Note that some address forms require the combination of both in a single
	// field as opposed to each one separately.
	AddressHomeOverflowAndLandmark *string `protobuf:"bytes,83,opt,name=address_home_overflow_and_landmark,json=addressHomeOverflowAndLandmark" json:"address_home_overflow_and_landmark,omitempty"`
	// Combination of types address_home_street_location and
	// address_home_dependent_locality. Note that some address forms require the
	// combination of both in a single field as opposed to each one separately.
	AddressHomeStreetLocationAndLocality *string `protobuf:"bytes,89,opt,name=address_home_street_location_and_locality,json=addressHomeStreetLocationAndLocality" json:"address_home_street_location_and_locality,omitempty"`
	// Validation status records for address fields.
	AddressHomeCityStatus                      *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,43,opt,name=address_home_city_status,json=addressHomeCityStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_city_status,omitempty"`
	AddressHomeStateStatus                     *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,44,opt,name=address_home_state_status,json=addressHomeStateStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_state_status,omitempty"`
	AddressHomeZipStatus                       *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,45,opt,name=address_home_zip_status,json=addressHomeZipStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_zip_status,omitempty"`
	AddressHomeCountryStatus                   *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,46,opt,name=address_home_country_status,json=addressHomeCountryStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_country_status,omitempty"`
	AddressHomeLandmarkStatus                  *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,68,opt,name=address_home_landmark_status,json=addressHomeLandmarkStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_landmark_status,omitempty"`
	AddressHomeBetweenStreetsStatus            *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,70,opt,name=address_home_between_streets_status,json=addressHomeBetweenStreetsStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_between_streets_status,omitempty"`
	AddressHomeBetweenStreets_1Status          *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,78,opt,name=address_home_between_streets_1_status,json=addressHomeBetweenStreets1Status,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_between_streets_1_status,omitempty"`
	AddressHomeBetweenStreets_2Status          *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,80,opt,name=address_home_between_streets_2_status,json=addressHomeBetweenStreets2Status,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_between_streets_2_status,omitempty"`
	AddressHomeAdminLevel_2Status              *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,72,opt,name=address_home_admin_level_2_status,json=addressHomeAdminLevel2Status,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_admin_level_2_status,omitempty"`
	AddressHomeOverflowStatus                  *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,76,opt,name=address_home_overflow_status,json=addressHomeOverflowStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_overflow_status,omitempty"`
	AddressHomeBetweenStreetsOrLandmarkStatus  *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,82,opt,name=address_home_between_streets_or_landmark_status,json=addressHomeBetweenStreetsOrLandmarkStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_between_streets_or_landmark_status,omitempty"`
	AddressHomeOverflowAndLandmarkStatus       *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,84,opt,name=address_home_overflow_and_landmark_status,json=addressHomeOverflowAndLandmarkStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_overflow_and_landmark_status,omitempty"`
	AddressHomeStreetLocationAndLocalityStatus *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,90,opt,name=address_home_street_location_and_locality_status,json=addressHomeStreetLocationAndLocalityStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_street_location_and_locality_status,omitempty"`
	AddressHomeStreetAddressStatus             *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,47,opt,name=address_home_street_address_status,json=addressHomeStreetAddressStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_street_address_status,omitempty"`
	AddressHomeSortingCodeStatus               *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,48,opt,name=address_home_sorting_code_status,json=addressHomeSortingCodeStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_sorting_code_status,omitempty"`
	AddressHomeDependentLocalityStatus         *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,49,opt,name=address_home_dependent_locality_status,json=addressHomeDependentLocalityStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_dependent_locality_status,omitempty"`
	AddressHomeLanguageCodeStatus              *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,50,opt,name=address_home_language_code_status,json=addressHomeLanguageCodeStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_language_code_status,omitempty"`
	AddressHomeThoroughfareNameStatus          *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,51,opt,name=address_home_thoroughfare_name_status,json=addressHomeThoroughfareNameStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_thoroughfare_name_status,omitempty"`
	AddressHomeThoroughfareNumberStatus        *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,52,opt,name=address_home_thoroughfare_number_status,json=addressHomeThoroughfareNumberStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_thoroughfare_number_status,omitempty"`
	AddressHomeStreetLocationStatus            *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,74,opt,name=address_home_street_location_status,json=addressHomeStreetLocationStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_street_location_status,omitempty"`
	AddressHomeSubpremiseNameStatus            *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,55,opt,name=address_home_subpremise_name_status,json=addressHomeSubpremiseNameStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_subpremise_name_status,omitempty"`
	AddressHomeAptStatus                       *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,86,opt,name=address_home_apt_status,json=addressHomeAptStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_apt_status,omitempty"`
	AddressHomeAptNumStatus                    *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,58,opt,name=address_home_apt_num_status,json=addressHomeAptNumStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_apt_num_status,omitempty"`
	AddressHomeAptTypeStatus                   *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,88,opt,name=address_home_apt_type_status,json=addressHomeAptTypeStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_apt_type_status,omitempty"`
	AddressHomeFloorStatus                     *AutofillProfileSpecifics_VerificationStatus `protobuf:"varint,59,opt,name=address_home_floor_status,json=addressHomeFloorStatus,enum=sync_pb.AutofillProfileSpecifics_VerificationStatus" json:"address_home_floor_status,omitempty"`
	// Phone.
	PhoneHomeWholeNumber []string `protobuf:"bytes,13,rep,name=phone_home_whole_number,json=phoneHomeWholeNumber" json:"phone_home_whole_number,omitempty"`
	// Deprecated.
	//
	// Deprecated: Marked as deprecated in autofill_specifics.proto.
	DeprecatedLabel *string `protobuf:"bytes,1,opt,name=deprecated_label,json=deprecatedLabel" json:"deprecated_label,omitempty"`
	// Deprecated: Marked as deprecated in autofill_specifics.proto.
	PhoneFaxWholeNumber *string `protobuf:"bytes,14,opt,name=phone_fax_whole_number,json=phoneFaxWholeNumber" json:"phone_fax_whole_number,omitempty"`
	// The following validity-related fields have only been used in combination
	// with an experimental features that are disabled for all clients and have
	// been removed in M100.
	//
	// Deprecated: Marked as deprecated in autofill_specifics.proto.
	ValidityStateBitfield *int64 `protobuf:"varint,24,opt,name=validity_state_bitfield,json=validityStateBitfield" json:"validity_state_bitfield,omitempty"`
	// Deprecated: Marked as deprecated in autofill_specifics.proto.
	IsClientValidityStatesUpdated *bool `protobuf:"varint,25,opt,name=is_client_validity_states_updated,json=isClientValidityStatesUpdated" json:"is_client_validity_states_updated,omitempty"`
}

func (x *AutofillProfileSpecifics) Reset() {
	*x = AutofillProfileSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillProfileSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillProfileSpecifics) ProtoMessage() {}

func (x *AutofillProfileSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillProfileSpecifics.ProtoReflect.Descriptor instead.
func (*AutofillProfileSpecifics) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{0}
}

func (x *AutofillProfileSpecifics) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetDeprecatedOrigin() string {
	if x != nil && x.DeprecatedOrigin != nil {
		return *x.DeprecatedOrigin
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetUseCount() int64 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

func (x *AutofillProfileSpecifics) GetUseDate() int64 {
	if x != nil && x.UseDate != nil {
		return *x.UseDate
	}
	return 0
}

func (x *AutofillProfileSpecifics) GetProfileLabel() string {
	if x != nil && x.ProfileLabel != nil {
		return *x.ProfileLabel
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetNameFirst() []string {
	if x != nil {
		return x.NameFirst
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameMiddle() []string {
	if x != nil {
		return x.NameMiddle
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameLast() []string {
	if x != nil {
		return x.NameLast
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameLastFirst() []string {
	if x != nil {
		return x.NameLastFirst
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameLastConjunction() []string {
	if x != nil {
		return x.NameLastConjunction
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameLastSecond() []string {
	if x != nil {
		return x.NameLastSecond
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameFull() []string {
	if x != nil {
		return x.NameFull
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameFirstStatus() []AutofillProfileSpecifics_VerificationStatus {
	if x != nil {
		return x.NameFirstStatus
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameMiddleStatus() []AutofillProfileSpecifics_VerificationStatus {
	if x != nil {
		return x.NameMiddleStatus
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameLastStatus() []AutofillProfileSpecifics_VerificationStatus {
	if x != nil {
		return x.NameLastStatus
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameLastFirstStatus() []AutofillProfileSpecifics_VerificationStatus {
	if x != nil {
		return x.NameLastFirstStatus
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameLastConjunctionStatus() []AutofillProfileSpecifics_VerificationStatus {
	if x != nil {
		return x.NameLastConjunctionStatus
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameLastSecondStatus() []AutofillProfileSpecifics_VerificationStatus {
	if x != nil {
		return x.NameLastSecondStatus
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameFullStatus() []AutofillProfileSpecifics_VerificationStatus {
	if x != nil {
		return x.NameFullStatus
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetEmailAddress() []string {
	if x != nil {
		return x.EmailAddress
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetCompanyName() string {
	if x != nil && x.CompanyName != nil {
		return *x.CompanyName
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeLine1() string {
	if x != nil && x.AddressHomeLine1 != nil {
		return *x.AddressHomeLine1
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeLine2() string {
	if x != nil && x.AddressHomeLine2 != nil {
		return *x.AddressHomeLine2
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeCity() string {
	if x != nil && x.AddressHomeCity != nil {
		return *x.AddressHomeCity
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeState() string {
	if x != nil && x.AddressHomeState != nil {
		return *x.AddressHomeState
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeZip() string {
	if x != nil && x.AddressHomeZip != nil {
		return *x.AddressHomeZip
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeCountry() string {
	if x != nil && x.AddressHomeCountry != nil {
		return *x.AddressHomeCountry
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeAdminLevel_2() string {
	if x != nil && x.AddressHomeAdminLevel_2 != nil {
		return *x.AddressHomeAdminLevel_2
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeStreetAddress() string {
	if x != nil && x.AddressHomeStreetAddress != nil {
		return *x.AddressHomeStreetAddress
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeSortingCode() string {
	if x != nil && x.AddressHomeSortingCode != nil {
		return *x.AddressHomeSortingCode
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeDependentLocality() string {
	if x != nil && x.AddressHomeDependentLocality != nil {
		return *x.AddressHomeDependentLocality
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeLanguageCode() string {
	if x != nil && x.AddressHomeLanguageCode != nil {
		return *x.AddressHomeLanguageCode
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeThoroughfareName() string {
	if x != nil && x.AddressHomeThoroughfareName != nil {
		return *x.AddressHomeThoroughfareName
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeThoroughfareNumber() string {
	if x != nil && x.AddressHomeThoroughfareNumber != nil {
		return *x.AddressHomeThoroughfareNumber
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeStreetLocation() string {
	if x != nil && x.AddressHomeStreetLocation != nil {
		return *x.AddressHomeStreetLocation
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeSubpremiseName() string {
	if x != nil && x.AddressHomeSubpremiseName != nil {
		return *x.AddressHomeSubpremiseName
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeApt() string {
	if x != nil && x.AddressHomeApt != nil {
		return *x.AddressHomeApt
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeAptNum() string {
	if x != nil && x.AddressHomeAptNum != nil {
		return *x.AddressHomeAptNum
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeAptType() string {
	if x != nil && x.AddressHomeAptType != nil {
		return *x.AddressHomeAptType
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeFloor() string {
	if x != nil && x.AddressHomeFloor != nil {
		return *x.AddressHomeFloor
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeLandmark() string {
	if x != nil && x.AddressHomeLandmark != nil {
		return *x.AddressHomeLandmark
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeBetweenStreets() string {
	if x != nil && x.AddressHomeBetweenStreets != nil {
		return *x.AddressHomeBetweenStreets
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeBetweenStreets_1() string {
	if x != nil && x.AddressHomeBetweenStreets_1 != nil {
		return *x.AddressHomeBetweenStreets_1
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeBetweenStreets_2() string {
	if x != nil && x.AddressHomeBetweenStreets_2 != nil {
		return *x.AddressHomeBetweenStreets_2
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeOverflow() string {
	if x != nil && x.AddressHomeOverflow != nil {
		return *x.AddressHomeOverflow
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeBetweenStreetsOrLandmark() string {
	if x != nil && x.AddressHomeBetweenStreetsOrLandmark != nil {
		return *x.AddressHomeBetweenStreetsOrLandmark
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeOverflowAndLandmark() string {
	if x != nil && x.AddressHomeOverflowAndLandmark != nil {
		return *x.AddressHomeOverflowAndLandmark
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeStreetLocationAndLocality() string {
	if x != nil && x.AddressHomeStreetLocationAndLocality != nil {
		return *x.AddressHomeStreetLocationAndLocality
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeCityStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeCityStatus != nil {
		return *x.AddressHomeCityStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeStateStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeStateStatus != nil {
		return *x.AddressHomeStateStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeZipStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeZipStatus != nil {
		return *x.AddressHomeZipStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeCountryStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeCountryStatus != nil {
		return *x.AddressHomeCountryStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeLandmarkStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeLandmarkStatus != nil {
		return *x.AddressHomeLandmarkStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeBetweenStreetsStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeBetweenStreetsStatus != nil {
		return *x.AddressHomeBetweenStreetsStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeBetweenStreets_1Status() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeBetweenStreets_1Status != nil {
		return *x.AddressHomeBetweenStreets_1Status
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeBetweenStreets_2Status() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeBetweenStreets_2Status != nil {
		return *x.AddressHomeBetweenStreets_2Status
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeAdminLevel_2Status() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeAdminLevel_2Status != nil {
		return *x.AddressHomeAdminLevel_2Status
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeOverflowStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeOverflowStatus != nil {
		return *x.AddressHomeOverflowStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeBetweenStreetsOrLandmarkStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeBetweenStreetsOrLandmarkStatus != nil {
		return *x.AddressHomeBetweenStreetsOrLandmarkStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeOverflowAndLandmarkStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeOverflowAndLandmarkStatus != nil {
		return *x.AddressHomeOverflowAndLandmarkStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeStreetLocationAndLocalityStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeStreetLocationAndLocalityStatus != nil {
		return *x.AddressHomeStreetLocationAndLocalityStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeStreetAddressStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeStreetAddressStatus != nil {
		return *x.AddressHomeStreetAddressStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeSortingCodeStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeSortingCodeStatus != nil {
		return *x.AddressHomeSortingCodeStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeDependentLocalityStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeDependentLocalityStatus != nil {
		return *x.AddressHomeDependentLocalityStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeLanguageCodeStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeLanguageCodeStatus != nil {
		return *x.AddressHomeLanguageCodeStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeThoroughfareNameStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeThoroughfareNameStatus != nil {
		return *x.AddressHomeThoroughfareNameStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeThoroughfareNumberStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeThoroughfareNumberStatus != nil {
		return *x.AddressHomeThoroughfareNumberStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeStreetLocationStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeStreetLocationStatus != nil {
		return *x.AddressHomeStreetLocationStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeSubpremiseNameStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeSubpremiseNameStatus != nil {
		return *x.AddressHomeSubpremiseNameStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeAptStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeAptStatus != nil {
		return *x.AddressHomeAptStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeAptNumStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeAptNumStatus != nil {
		return *x.AddressHomeAptNumStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeAptTypeStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeAptTypeStatus != nil {
		return *x.AddressHomeAptTypeStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetAddressHomeFloorStatus() AutofillProfileSpecifics_VerificationStatus {
	if x != nil && x.AddressHomeFloorStatus != nil {
		return *x.AddressHomeFloorStatus
	}
	return AutofillProfileSpecifics_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *AutofillProfileSpecifics) GetPhoneHomeWholeNumber() []string {
	if x != nil {
		return x.PhoneHomeWholeNumber
	}
	return nil
}

// Deprecated: Marked as deprecated in autofill_specifics.proto.
func (x *AutofillProfileSpecifics) GetDeprecatedLabel() string {
	if x != nil && x.DeprecatedLabel != nil {
		return *x.DeprecatedLabel
	}
	return ""
}

// Deprecated: Marked as deprecated in autofill_specifics.proto.
func (x *AutofillProfileSpecifics) GetPhoneFaxWholeNumber() string {
	if x != nil && x.PhoneFaxWholeNumber != nil {
		return *x.PhoneFaxWholeNumber
	}
	return ""
}

// Deprecated: Marked as deprecated in autofill_specifics.proto.
func (x *AutofillProfileSpecifics) GetValidityStateBitfield() int64 {
	if x != nil && x.ValidityStateBitfield != nil {
		return *x.ValidityStateBitfield
	}
	return 0
}

// Deprecated: Marked as deprecated in autofill_specifics.proto.
func (x *AutofillProfileSpecifics) GetIsClientValidityStatesUpdated() bool {
	if x != nil && x.IsClientValidityStatesUpdated != nil {
		return *x.IsClientValidityStatesUpdated
	}
	return false
}

type AutofillSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If any of these 3 fields are present, then all 3 should be, and it implies
	// that this entity represents a classic autofill object.  In this case,
	// none of the autofill++ objects below should be present.
	Name           *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value          *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	UsageTimestamp []int64 `protobuf:"varint,3,rep,name=usage_timestamp,json=usageTimestamp" json:"usage_timestamp,omitempty"`
	// An autofill++ profile object.  If present, indicates this entity
	// represents an AutofillProfile exclusively, and no other fields (such as
	// name/value or credit_card) should be present.
	Profile *AutofillProfileSpecifics `protobuf:"bytes,4,opt,name=profile" json:"profile,omitempty"`
}

func (x *AutofillSpecifics) Reset() {
	*x = AutofillSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillSpecifics) ProtoMessage() {}

func (x *AutofillSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillSpecifics.ProtoReflect.Descriptor instead.
func (*AutofillSpecifics) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{1}
}

func (x *AutofillSpecifics) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AutofillSpecifics) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *AutofillSpecifics) GetUsageTimestamp() []int64 {
	if x != nil {
		return x.UsageTimestamp
	}
	return nil
}

func (x *AutofillSpecifics) GetProfile() *AutofillProfileSpecifics {
	if x != nil {
		return x.Profile
	}
	return nil
}

// TODO(crbug.com/1020740): Deprecated, remove this once dependent change is
// done. Use WalletCreditCardCloudTokenData instead.
type CloudTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last 4-5 digits of the Cloud Primary Account Number (CPAN).
	Suffix *string `protobuf:"bytes,1,opt,name=suffix" json:"suffix,omitempty"`
	// CPAN Month number 1-12.
	ExpMonth *int32 `protobuf:"varint,2,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	// CPAN Four-digit year (e.g. 2017).
	ExpYear *int32 `protobuf:"varint,3,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	// URL of the card art to be displayed for CPAN.
	ArtFifeUrl *string `protobuf:"bytes,4,opt,name=art_fife_url,json=artFifeUrl" json:"art_fife_url,omitempty"`
	// Opaque identifier for the cloud token associated with the payment
	// instrument.
	InstrumentToken *string `protobuf:"bytes,5,opt,name=instrument_token,json=instrumentToken" json:"instrument_token,omitempty"`
}

func (x *CloudTokenData) Reset() {
	*x = CloudTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudTokenData) ProtoMessage() {}

func (x *CloudTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudTokenData.ProtoReflect.Descriptor instead.
func (*CloudTokenData) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{2}
}

func (x *CloudTokenData) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *CloudTokenData) GetExpMonth() int32 {
	if x != nil && x.ExpMonth != nil {
		return *x.ExpMonth
	}
	return 0
}

func (x *CloudTokenData) GetExpYear() int32 {
	if x != nil && x.ExpYear != nil {
		return *x.ExpYear
	}
	return 0
}

func (x *CloudTokenData) GetArtFifeUrl() string {
	if x != nil && x.ArtFifeUrl != nil {
		return *x.ArtFifeUrl
	}
	return ""
}

func (x *CloudTokenData) GetInstrumentToken() string {
	if x != nil && x.InstrumentToken != nil {
		return *x.InstrumentToken
	}
	return ""
}

// Next id: 8
type CardBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the benefit. Generated originally in Chrome Sync
	// server.
	BenefitId *string `protobuf:"bytes,7,opt,name=benefit_id,json=benefitId" json:"benefit_id,omitempty"`
	// The benefit description (Engligh only currently) to be shown in the UI.
	BenefitDescription *string `protobuf:"bytes,1,opt,name=benefit_description,json=benefitDescription" json:"benefit_description,omitempty"`
	// When the benefit should be displayed, in UTC time.
	StartTimeUnixEpochMilliseconds *int64 `protobuf:"varint,2,opt,name=start_time_unix_epoch_milliseconds,json=startTimeUnixEpochMilliseconds" json:"start_time_unix_epoch_milliseconds,omitempty"`
	EndTimeUnixEpochMilliseconds   *int64 `protobuf:"varint,3,opt,name=end_time_unix_epoch_milliseconds,json=endTimeUnixEpochMilliseconds" json:"end_time_unix_epoch_milliseconds,omitempty"`
	// Proto data representing the actual data of the credit card benefit,
	// depending on the benefit type.
	//
	// Types that are assignable to DomainSpecificBenefit:
	//	*CardBenefit_FlatRateBenefit_
	//	*CardBenefit_CategoryBenefit_
	//	*CardBenefit_MerchantBenefit_
	DomainSpecificBenefit isCardBenefit_DomainSpecificBenefit `protobuf_oneof:"DomainSpecificBenefit"`
}

func (x *CardBenefit) Reset() {
	*x = CardBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBenefit) ProtoMessage() {}

func (x *CardBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBenefit.ProtoReflect.Descriptor instead.
func (*CardBenefit) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{3}
}

func (x *CardBenefit) GetBenefitId() string {
	if x != nil && x.BenefitId != nil {
		return *x.BenefitId
	}
	return ""
}

func (x *CardBenefit) GetBenefitDescription() string {
	if x != nil && x.BenefitDescription != nil {
		return *x.BenefitDescription
	}
	return ""
}

func (x *CardBenefit) GetStartTimeUnixEpochMilliseconds() int64 {
	if x != nil && x.StartTimeUnixEpochMilliseconds != nil {
		return *x.StartTimeUnixEpochMilliseconds
	}
	return 0
}

func (x *CardBenefit) GetEndTimeUnixEpochMilliseconds() int64 {
	if x != nil && x.EndTimeUnixEpochMilliseconds != nil {
		return *x.EndTimeUnixEpochMilliseconds
	}
	return 0
}

func (m *CardBenefit) GetDomainSpecificBenefit() isCardBenefit_DomainSpecificBenefit {
	if m != nil {
		return m.DomainSpecificBenefit
	}
	return nil
}

func (x *CardBenefit) GetFlatRateBenefit() *CardBenefit_FlatRateBenefit {
	if x, ok := x.GetDomainSpecificBenefit().(*CardBenefit_FlatRateBenefit_); ok {
		return x.FlatRateBenefit
	}
	return nil
}

func (x *CardBenefit) GetCategoryBenefit() *CardBenefit_CategoryBenefit {
	if x, ok := x.GetDomainSpecificBenefit().(*CardBenefit_CategoryBenefit_); ok {
		return x.CategoryBenefit
	}
	return nil
}

func (x *CardBenefit) GetMerchantBenefit() *CardBenefit_MerchantBenefit {
	if x, ok := x.GetDomainSpecificBenefit().(*CardBenefit_MerchantBenefit_); ok {
		return x.MerchantBenefit
	}
	return nil
}

type isCardBenefit_DomainSpecificBenefit interface {
	isCardBenefit_DomainSpecificBenefit()
}

type CardBenefit_FlatRateBenefit_ struct {
	FlatRateBenefit *CardBenefit_FlatRateBenefit `protobuf:"bytes,4,opt,name=flat_rate_benefit,json=flatRateBenefit,oneof"`
}

type CardBenefit_CategoryBenefit_ struct {
	CategoryBenefit *CardBenefit_CategoryBenefit `protobuf:"bytes,5,opt,name=category_benefit,json=categoryBenefit,oneof"`
}

type CardBenefit_MerchantBenefit_ struct {
	MerchantBenefit *CardBenefit_MerchantBenefit `protobuf:"bytes,6,opt,name=merchant_benefit,json=merchantBenefit,oneof"`
}

func (*CardBenefit_FlatRateBenefit_) isCardBenefit_DomainSpecificBenefit() {}

func (*CardBenefit_CategoryBenefit_) isCardBenefit_DomainSpecificBenefit() {}

func (*CardBenefit_MerchantBenefit_) isCardBenefit_DomainSpecificBenefit() {}

type CardIssuer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer *CardIssuer_Issuer `protobuf:"varint,1,opt,name=issuer,enum=sync_pb.CardIssuer_Issuer" json:"issuer,omitempty"`
	// Uniquely identifies the issuer of the card. This field is required when
	// Issuer is EXTERNAL_ISSUER.
	// Example: capitalone, amex.
	IssuerId *string `protobuf:"bytes,2,opt,name=issuer_id,json=issuerId" json:"issuer_id,omitempty"`
}

func (x *CardIssuer) Reset() {
	*x = CardIssuer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardIssuer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardIssuer) ProtoMessage() {}

func (x *CardIssuer) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardIssuer.ProtoReflect.Descriptor instead.
func (*CardIssuer) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{4}
}

func (x *CardIssuer) GetIssuer() CardIssuer_Issuer {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return CardIssuer_ISSUER_UNKNOWN
}

func (x *CardIssuer) GetIssuerId() string {
	if x != nil && x.IssuerId != nil {
		return *x.IssuerId
	}
	return ""
}

type WalletMaskedCreditCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server-generated unique ID string. This is opaque to the client.
	// This is the legacy version of |instrument_id|.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// What the server thinks of this card.
	Status     *WalletMaskedCreditCard_WalletCardStatus `protobuf:"varint,2,opt,name=status,enum=sync_pb.WalletMaskedCreditCard_WalletCardStatus" json:"status,omitempty"`
	NameOnCard *string                                  `protobuf:"bytes,3,opt,name=name_on_card,json=nameOnCard" json:"name_on_card,omitempty"`
	Type       *WalletMaskedCreditCard_WalletCardType   `protobuf:"varint,4,opt,name=type,enum=sync_pb.WalletMaskedCreditCard_WalletCardType" json:"type,omitempty"`
	// Last 4 digits of the credit card number.
	LastFour *string `protobuf:"bytes,5,opt,name=last_four,json=lastFour" json:"last_four,omitempty"`
	// Month number 1-12.
	ExpMonth *int32 `protobuf:"varint,6,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	// Four-digit year (e.g. 2017).
	ExpYear *int32 `protobuf:"varint,7,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	// The WalletPostalAddress.id of the billing address.
	BillingAddressId *string `protobuf:"bytes,8,opt,name=billing_address_id,json=billingAddressId" json:"billing_address_id,omitempty"`
	// Issuing Bank name which is internationalized (e.g. "Chase", "工商银行")
	BankName *string `protobuf:"bytes,10,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	// TODO(crbug.com/1020740): Deprecated, remove this once dependent change is
	// done.
	// Use WalletCreditCardCloudTokenData instead. This field will be set if
	// a cloud token is available for the instrument.
	CloudTokenData *CloudTokenData `protobuf:"bytes,11,opt,name=cloud_token_data,json=cloudTokenData" json:"cloud_token_data,omitempty"`
	// The card's nickname, if it exists.
	Nickname *string `protobuf:"bytes,12,opt,name=nickname" json:"nickname,omitempty"`
	// Issuer of the card.
	CardIssuer *CardIssuer `protobuf:"bytes,13,opt,name=card_issuer,json=cardIssuer" json:"card_issuer,omitempty"`
	// Server-generated unique ID. This is opaque to the client.
	// |id| is the legacy version of this.
	InstrumentId *int64 `protobuf:"varint,15,opt,name=instrument_id,json=instrumentId" json:"instrument_id,omitempty"`
	// The state of virtual card enrollment.
	VirtualCardEnrollmentState *WalletMaskedCreditCard_VirtualCardEnrollmentState `protobuf:"varint,16,opt,name=virtual_card_enrollment_state,json=virtualCardEnrollmentState,enum=sync_pb.WalletMaskedCreditCard_VirtualCardEnrollmentState" json:"virtual_card_enrollment_state,omitempty"`
	// The URL for the client to fetch the card art image.
	CardArtUrl *string `protobuf:"bytes,17,opt,name=card_art_url,json=cardArtUrl" json:"card_art_url,omitempty"`
	// The product description for the card. Used to be shown in the UI.
	ProductDescription *string `protobuf:"bytes,18,opt,name=product_description,json=productDescription" json:"product_description,omitempty"`
	// The type of virtual card enrollment. kTypeUnspecified indicates that the
	// card is unenrolled.
	VirtualCardEnrollmentType *WalletMaskedCreditCard_VirtualCardEnrollmentType `protobuf:"varint,19,opt,name=virtual_card_enrollment_type,json=virtualCardEnrollmentType,enum=sync_pb.WalletMaskedCreditCard_VirtualCardEnrollmentType" json:"virtual_card_enrollment_type,omitempty"`
	// The benefits (e.g. points or discounts) associated with purchases made
	// with the card.
	CardBenefit []*CardBenefit `protobuf:"bytes,20,rep,name=card_benefit,json=cardBenefit" json:"card_benefit,omitempty"`
	// Separate link from the card issuer which provides additional context or
	// terms and conditions regarding the credit card product and its benefits.
	ProductTermsUrl *string `protobuf:"bytes,21,opt,name=product_terms_url,json=productTermsUrl" json:"product_terms_url,omitempty"`
}

func (x *WalletMaskedCreditCard) Reset() {
	*x = WalletMaskedCreditCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletMaskedCreditCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletMaskedCreditCard) ProtoMessage() {}

func (x *WalletMaskedCreditCard) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletMaskedCreditCard.ProtoReflect.Descriptor instead.
func (*WalletMaskedCreditCard) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{5}
}

func (x *WalletMaskedCreditCard) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetStatus() WalletMaskedCreditCard_WalletCardStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return WalletMaskedCreditCard_VALID
}

func (x *WalletMaskedCreditCard) GetNameOnCard() string {
	if x != nil && x.NameOnCard != nil {
		return *x.NameOnCard
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetType() WalletMaskedCreditCard_WalletCardType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return WalletMaskedCreditCard_UNKNOWN
}

func (x *WalletMaskedCreditCard) GetLastFour() string {
	if x != nil && x.LastFour != nil {
		return *x.LastFour
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetExpMonth() int32 {
	if x != nil && x.ExpMonth != nil {
		return *x.ExpMonth
	}
	return 0
}

func (x *WalletMaskedCreditCard) GetExpYear() int32 {
	if x != nil && x.ExpYear != nil {
		return *x.ExpYear
	}
	return 0
}

func (x *WalletMaskedCreditCard) GetBillingAddressId() string {
	if x != nil && x.BillingAddressId != nil {
		return *x.BillingAddressId
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetBankName() string {
	if x != nil && x.BankName != nil {
		return *x.BankName
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetCloudTokenData() *CloudTokenData {
	if x != nil {
		return x.CloudTokenData
	}
	return nil
}

func (x *WalletMaskedCreditCard) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetCardIssuer() *CardIssuer {
	if x != nil {
		return x.CardIssuer
	}
	return nil
}

func (x *WalletMaskedCreditCard) GetInstrumentId() int64 {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return 0
}

func (x *WalletMaskedCreditCard) GetVirtualCardEnrollmentState() WalletMaskedCreditCard_VirtualCardEnrollmentState {
	if x != nil && x.VirtualCardEnrollmentState != nil {
		return *x.VirtualCardEnrollmentState
	}
	return WalletMaskedCreditCard_UNSPECIFIED
}

func (x *WalletMaskedCreditCard) GetCardArtUrl() string {
	if x != nil && x.CardArtUrl != nil {
		return *x.CardArtUrl
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetProductDescription() string {
	if x != nil && x.ProductDescription != nil {
		return *x.ProductDescription
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetVirtualCardEnrollmentType() WalletMaskedCreditCard_VirtualCardEnrollmentType {
	if x != nil && x.VirtualCardEnrollmentType != nil {
		return *x.VirtualCardEnrollmentType
	}
	return WalletMaskedCreditCard_TYPE_UNSPECIFIED
}

func (x *WalletMaskedCreditCard) GetCardBenefit() []*CardBenefit {
	if x != nil {
		return x.CardBenefit
	}
	return nil
}

func (x *WalletMaskedCreditCard) GetProductTermsUrl() string {
	if x != nil && x.ProductTermsUrl != nil {
		return *x.ProductTermsUrl
	}
	return ""
}

// Unused by the client since M121.
// TODO(crbug.com/1457187): Some server-side code still relies on this message.
// To keep the protos in sync, it is kept until that code is cleaned up.
// Different than an AutofillProfile because this represents some known address
// on the server that is pulled down rather than synced between Chromes.
type WalletPostalAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RecipientName *string `protobuf:"bytes,12,opt,name=recipient_name,json=recipientName" json:"recipient_name,omitempty"`
	CompanyName   *string `protobuf:"bytes,2,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
	// This is the street address, of which there may be multiple lines. This
	// corresponds to "address_home_line[1|2] in the AutofillProfileSpecifics
	// message above. In some locales there may be more than two lines.
	StreetAddress []string `protobuf:"bytes,3,rep,name=street_address,json=streetAddress" json:"street_address,omitempty"`
	// Also known as "administrative area". This is normally the state or
	// province in most countries.
	Address_1 *string `protobuf:"bytes,4,opt,name=address_1,json=address1" json:"address_1,omitempty"`
	// Also known as "locality". In the US this is the city.
	Address_2 *string `protobuf:"bytes,5,opt,name=address_2,json=address2" json:"address_2,omitempty"`
	// A sub-classification beneath the city, e.g. an inner-city district or
	// suburb. Also known as "dependent_locality"
	Address_3 *string `protobuf:"bytes,6,opt,name=address_3,json=address3" json:"address_3,omitempty"`
	// Used in certain countries. Also known as "sub_dependent_locality".
	Address_4  *string `protobuf:"bytes,7,opt,name=address_4,json=address4" json:"address_4,omitempty"`
	PostalCode *string `protobuf:"bytes,8,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	// Similar to the zipcode column, but used for businesses or organizations
	// that might not be geographically contiguous. The canonical example is
	// CEDEX in France.
	SortingCode  *string `protobuf:"bytes,9,opt,name=sorting_code,json=sortingCode" json:"sorting_code,omitempty"`
	CountryCode  *string `protobuf:"bytes,10,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	LanguageCode *string `protobuf:"bytes,11,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Phone number. The format is unspecified and will be explicitly ignored.
	PhoneNumber *string `protobuf:"bytes,13,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
}

func (x *WalletPostalAddress) Reset() {
	*x = WalletPostalAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletPostalAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletPostalAddress) ProtoMessage() {}

func (x *WalletPostalAddress) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletPostalAddress.ProtoReflect.Descriptor instead.
func (*WalletPostalAddress) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{6}
}

func (x *WalletPostalAddress) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *WalletPostalAddress) GetRecipientName() string {
	if x != nil && x.RecipientName != nil {
		return *x.RecipientName
	}
	return ""
}

func (x *WalletPostalAddress) GetCompanyName() string {
	if x != nil && x.CompanyName != nil {
		return *x.CompanyName
	}
	return ""
}

func (x *WalletPostalAddress) GetStreetAddress() []string {
	if x != nil {
		return x.StreetAddress
	}
	return nil
}

func (x *WalletPostalAddress) GetAddress_1() string {
	if x != nil && x.Address_1 != nil {
		return *x.Address_1
	}
	return ""
}

func (x *WalletPostalAddress) GetAddress_2() string {
	if x != nil && x.Address_2 != nil {
		return *x.Address_2
	}
	return ""
}

func (x *WalletPostalAddress) GetAddress_3() string {
	if x != nil && x.Address_3 != nil {
		return *x.Address_3
	}
	return ""
}

func (x *WalletPostalAddress) GetAddress_4() string {
	if x != nil && x.Address_4 != nil {
		return *x.Address_4
	}
	return ""
}

func (x *WalletPostalAddress) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *WalletPostalAddress) GetSortingCode() string {
	if x != nil && x.SortingCode != nil {
		return *x.SortingCode
	}
	return ""
}

func (x *WalletPostalAddress) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *WalletPostalAddress) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

func (x *WalletPostalAddress) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

// Contains information about a Payments Customer.
type PaymentsCustomerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The billable customer ID associated with the account.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *PaymentsCustomerData) Reset() {
	*x = PaymentsCustomerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentsCustomerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentsCustomerData) ProtoMessage() {}

func (x *PaymentsCustomerData) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentsCustomerData.ProtoReflect.Descriptor instead.
func (*PaymentsCustomerData) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{7}
}

func (x *PaymentsCustomerData) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// Contains information about the cloud token data of server credit cards.
type WalletCreditCardCloudTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server-generated ID string for the card this cloud token data is related
	// to. This should match the id in WalletMaskedCreditCard for to fetch the
	// corresponding actual card data. Note this is not unique across all cloud
	// token data, which means one card can have multiple sets of cloud token data
	// with the same masked_card_id.
	MaskedCardId *string `protobuf:"bytes,1,opt,name=masked_card_id,json=maskedCardId" json:"masked_card_id,omitempty"`
	// Last 4-5 digits of the Cloud Primary Account Number (CPAN).
	Suffix *string `protobuf:"bytes,2,opt,name=suffix" json:"suffix,omitempty"`
	// CPAN Month number 1-12.
	ExpMonth *int32 `protobuf:"varint,3,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	// CPAN Four-digit year (e.g. 2017).
	ExpYear *int32 `protobuf:"varint,4,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	// URL of the card art to be displayed for CPAN.
	ArtFifeUrl *string `protobuf:"bytes,5,opt,name=art_fife_url,json=artFifeUrl" json:"art_fife_url,omitempty"`
	// Opaque identifier for the cloud token.
	InstrumentToken *string `protobuf:"bytes,6,opt,name=instrument_token,json=instrumentToken" json:"instrument_token,omitempty"`
}

func (x *WalletCreditCardCloudTokenData) Reset() {
	*x = WalletCreditCardCloudTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletCreditCardCloudTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletCreditCardCloudTokenData) ProtoMessage() {}

func (x *WalletCreditCardCloudTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletCreditCardCloudTokenData.ProtoReflect.Descriptor instead.
func (*WalletCreditCardCloudTokenData) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{8}
}

func (x *WalletCreditCardCloudTokenData) GetMaskedCardId() string {
	if x != nil && x.MaskedCardId != nil {
		return *x.MaskedCardId
	}
	return ""
}

func (x *WalletCreditCardCloudTokenData) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *WalletCreditCardCloudTokenData) GetExpMonth() int32 {
	if x != nil && x.ExpMonth != nil {
		return *x.ExpMonth
	}
	return 0
}

func (x *WalletCreditCardCloudTokenData) GetExpYear() int32 {
	if x != nil && x.ExpYear != nil {
		return *x.ExpYear
	}
	return 0
}

func (x *WalletCreditCardCloudTokenData) GetArtFifeUrl() string {
	if x != nil && x.ArtFifeUrl != nil {
		return *x.ArtFifeUrl
	}
	return ""
}

func (x *WalletCreditCardCloudTokenData) GetInstrumentToken() string {
	if x != nil && x.InstrumentToken != nil {
		return *x.InstrumentToken
	}
	return ""
}

// Contains information of payment instruments that can be used by the user.
type PaymentInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque identifier for the account stored in Payments Platform.
	// This will be used to initiate the payment.
	InstrumentId *int64 `protobuf:"varint,1,opt,name=instrument_id,json=instrumentId" json:"instrument_id,omitempty"`
	// The supported rails for which a payment can be made for the given account.
	// For example, Pix is the open-banking rail in Brazil, UPI is the
	// open-banking rail in India.
	SupportedRails []PaymentInstrument_SupportedRail `protobuf:"varint,2,rep,name=supported_rails,json=supportedRails,enum=sync_pb.PaymentInstrument_SupportedRail" json:"supported_rails,omitempty"`
	// The URL for the image to be displayed when showing the account to the
	// user.
	DisplayIconUrl *string `protobuf:"bytes,3,opt,name=display_icon_url,json=displayIconUrl" json:"display_icon_url,omitempty"`
	// Nickname for the instrument.
	Nickname *string `protobuf:"bytes,4,opt,name=nickname" json:"nickname,omitempty"`
	// The backing source for the applicable rails.
	//
	// Types that are assignable to InstrumentDetails:
	//	*PaymentInstrument_BankAccount
	//	*PaymentInstrument_Iban
	InstrumentDetails isPaymentInstrument_InstrumentDetails `protobuf_oneof:"instrument_details"`
}

func (x *PaymentInstrument) Reset() {
	*x = PaymentInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentInstrument) ProtoMessage() {}

func (x *PaymentInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentInstrument.ProtoReflect.Descriptor instead.
func (*PaymentInstrument) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{9}
}

func (x *PaymentInstrument) GetInstrumentId() int64 {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return 0
}

func (x *PaymentInstrument) GetSupportedRails() []PaymentInstrument_SupportedRail {
	if x != nil {
		return x.SupportedRails
	}
	return nil
}

func (x *PaymentInstrument) GetDisplayIconUrl() string {
	if x != nil && x.DisplayIconUrl != nil {
		return *x.DisplayIconUrl
	}
	return ""
}

func (x *PaymentInstrument) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (m *PaymentInstrument) GetInstrumentDetails() isPaymentInstrument_InstrumentDetails {
	if m != nil {
		return m.InstrumentDetails
	}
	return nil
}

func (x *PaymentInstrument) GetBankAccount() *BankAccountDetails {
	if x, ok := x.GetInstrumentDetails().(*PaymentInstrument_BankAccount); ok {
		return x.BankAccount
	}
	return nil
}

func (x *PaymentInstrument) GetIban() *WalletMaskedIban {
	if x, ok := x.GetInstrumentDetails().(*PaymentInstrument_Iban); ok {
		return x.Iban
	}
	return nil
}

type isPaymentInstrument_InstrumentDetails interface {
	isPaymentInstrument_InstrumentDetails()
}

type PaymentInstrument_BankAccount struct {
	BankAccount *BankAccountDetails `protobuf:"bytes,5,opt,name=bank_account,json=bankAccount,oneof"`
}

type PaymentInstrument_Iban struct {
	Iban *WalletMaskedIban `protobuf:"bytes,6,opt,name=iban,oneof"`
}

func (*PaymentInstrument_BankAccount) isPaymentInstrument_InstrumentDetails() {}

func (*PaymentInstrument_Iban) isPaymentInstrument_InstrumentDetails() {}

// Contains information of server IBAN (International Bank Account Number).
type WalletMaskedIban struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque identifier for the account stored in Payments Platform.
	InstrumentId *string `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId" json:"instrument_id,omitempty"`
	// Prefix of the full IBAN value, if available.
	Prefix *string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
	// Suffix of the full IBAN value, if available.
	Suffix *string `protobuf:"bytes,3,opt,name=suffix" json:"suffix,omitempty"`
	// Length of the full IBAN value, if available.
	Length *int32 `protobuf:"varint,4,opt,name=length" json:"length,omitempty"`
	// Nickname for the IBAN, if available.
	Nickname *string `protobuf:"bytes,5,opt,name=nickname" json:"nickname,omitempty"`
}

func (x *WalletMaskedIban) Reset() {
	*x = WalletMaskedIban{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletMaskedIban) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletMaskedIban) ProtoMessage() {}

func (x *WalletMaskedIban) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletMaskedIban.ProtoReflect.Descriptor instead.
func (*WalletMaskedIban) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{10}
}

func (x *WalletMaskedIban) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

func (x *WalletMaskedIban) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *WalletMaskedIban) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *WalletMaskedIban) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *WalletMaskedIban) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

// Details of a bank account required to show it in the payment instrument
// selector.
type BankAccountDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the bank where the user has an account.
	BankName *string `protobuf:"bytes,1,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	// The last four digits of the account number to help the user identify their
	// account.
	AccountNumberSuffix *string `protobuf:"bytes,2,opt,name=account_number_suffix,json=accountNumberSuffix" json:"account_number_suffix,omitempty"`
	// The type of bank account.
	AccountType *BankAccountDetails_AccountType `protobuf:"varint,3,opt,name=account_type,json=accountType,enum=sync_pb.BankAccountDetails_AccountType" json:"account_type,omitempty"`
}

func (x *BankAccountDetails) Reset() {
	*x = BankAccountDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAccountDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAccountDetails) ProtoMessage() {}

func (x *BankAccountDetails) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAccountDetails.ProtoReflect.Descriptor instead.
func (*BankAccountDetails) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{11}
}

func (x *BankAccountDetails) GetBankName() string {
	if x != nil && x.BankName != nil {
		return *x.BankName
	}
	return ""
}

func (x *BankAccountDetails) GetAccountNumberSuffix() string {
	if x != nil && x.AccountNumberSuffix != nil {
		return *x.AccountNumberSuffix
	}
	return ""
}

func (x *BankAccountDetails) GetAccountType() BankAccountDetails_AccountType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return BankAccountDetails_ACCOUNT_TYPE_UNSPECIFIED
}

type AutofillWalletSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *AutofillWalletSpecifics_WalletInfoType `protobuf:"varint,1,opt,name=type,enum=sync_pb.AutofillWalletSpecifics_WalletInfoType" json:"type,omitempty"`
	// This field exists if and only if the "type" field equals to
	// MASKED_CREDIT_CARD.
	MaskedCard *WalletMaskedCreditCard `protobuf:"bytes,2,opt,name=masked_card,json=maskedCard" json:"masked_card,omitempty"`
	// Unused by the client since M121.
	// This field exists if and only if the `type` equals POSTAL_ADDRESS.
	// TODO(crbug.com/1457187): Some server-side code still relies on this field.
	// To keep the protos in sync, it is kept until that code is cleaned up.
	Address *WalletPostalAddress `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	// This field exists if and only if the "type" field equals to CUSTOMER_DATA.
	CustomerData *PaymentsCustomerData `protobuf:"bytes,4,opt,name=customer_data,json=customerData" json:"customer_data,omitempty"`
	// This field exists if and only if the "type" field equals to
	// CREDIT_CARD_CLOUD_TOKEN_DATA.
	CloudTokenData *WalletCreditCardCloudTokenData `protobuf:"bytes,5,opt,name=cloud_token_data,json=cloudTokenData" json:"cloud_token_data,omitempty"`
	// This field exists if and only if the "type" field equals to
	// PAYMENT_INSTRUMENT.
	PaymentInstrument *PaymentInstrument `protobuf:"bytes,6,opt,name=payment_instrument,json=paymentInstrument" json:"payment_instrument,omitempty"`
	// This field exists if and only if the `type` field equals to
	// MASKED_IBAN.
	//
	// Deprecated: Marked as deprecated in autofill_specifics.proto.
	MaskedIban *WalletMaskedIban `protobuf:"bytes,7,opt,name=masked_iban,json=maskedIban" json:"masked_iban,omitempty"`
}

func (x *AutofillWalletSpecifics) Reset() {
	*x = AutofillWalletSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillWalletSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillWalletSpecifics) ProtoMessage() {}

func (x *AutofillWalletSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillWalletSpecifics.ProtoReflect.Descriptor instead.
func (*AutofillWalletSpecifics) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{12}
}

func (x *AutofillWalletSpecifics) GetType() AutofillWalletSpecifics_WalletInfoType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AutofillWalletSpecifics_UNKNOWN
}

func (x *AutofillWalletSpecifics) GetMaskedCard() *WalletMaskedCreditCard {
	if x != nil {
		return x.MaskedCard
	}
	return nil
}

func (x *AutofillWalletSpecifics) GetAddress() *WalletPostalAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AutofillWalletSpecifics) GetCustomerData() *PaymentsCustomerData {
	if x != nil {
		return x.CustomerData
	}
	return nil
}

func (x *AutofillWalletSpecifics) GetCloudTokenData() *WalletCreditCardCloudTokenData {
	if x != nil {
		return x.CloudTokenData
	}
	return nil
}

func (x *AutofillWalletSpecifics) GetPaymentInstrument() *PaymentInstrument {
	if x != nil {
		return x.PaymentInstrument
	}
	return nil
}

// Deprecated: Marked as deprecated in autofill_specifics.proto.
func (x *AutofillWalletSpecifics) GetMaskedIban() *WalletMaskedIban {
	if x != nil {
		return x.MaskedIban
	}
	return nil
}

// Wallet card usage information that can be synced.
type WalletMetadataSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the Wallet metadata.
	Type *WalletMetadataSpecifics_Type `protobuf:"varint,1,opt,name=type,enum=sync_pb.WalletMetadataSpecifics_Type" json:"type,omitempty"`
	// Base64 encoding of the unique ID string of the corresponding
	// AutofillMetadata.
	// For Wallet cards, this value is WalletMaskedCreditCard::id.
	// For Wallet IBANs, this value is WalletMaskedIban::instrument_id.
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The number of times that this Wallet card or address was used.
	UseCount *int64 `protobuf:"varint,3,opt,name=use_count,json=useCount" json:"use_count,omitempty"`
	// The last use date of this Wallet card or address. Measured in microseconds
	// since the Windows epoch (1601).
	UseDate *int64 `protobuf:"varint,4,opt,name=use_date,json=useDate" json:"use_date,omitempty"`
	// The id of the profile/address that represents the billing address of this
	// Wallet card.
	CardBillingAddressId *string `protobuf:"bytes,5,opt,name=card_billing_address_id,json=cardBillingAddressId" json:"card_billing_address_id,omitempty"`
	// Unused by the client since M121.
	// TODO(crbug.com/1457187): Some server-side code still relies on this field.
	// To keep the protos in sync, it is kept until that code is cleaned up.
	AddressHasConverted *bool `protobuf:"varint,6,opt,name=address_has_converted,json=addressHasConverted" json:"address_has_converted,omitempty"`
}

func (x *WalletMetadataSpecifics) Reset() {
	*x = WalletMetadataSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletMetadataSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletMetadataSpecifics) ProtoMessage() {}

func (x *WalletMetadataSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletMetadataSpecifics.ProtoReflect.Descriptor instead.
func (*WalletMetadataSpecifics) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{13}
}

func (x *WalletMetadataSpecifics) GetType() WalletMetadataSpecifics_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return WalletMetadataSpecifics_UNKNOWN
}

func (x *WalletMetadataSpecifics) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *WalletMetadataSpecifics) GetUseCount() int64 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

func (x *WalletMetadataSpecifics) GetUseDate() int64 {
	if x != nil && x.UseDate != nil {
		return *x.UseDate
	}
	return 0
}

func (x *WalletMetadataSpecifics) GetCardBillingAddressId() string {
	if x != nil && x.CardBillingAddressId != nil {
		return *x.CardBillingAddressId
	}
	return ""
}

func (x *WalletMetadataSpecifics) GetAddressHasConverted() bool {
	if x != nil && x.AddressHasConverted != nil {
		return *x.AddressHasConverted
	}
	return false
}

// Proto containing data specific to a flat rate benefit. Empty as flat rate
// benefits don't have unique fields. The actual benefit (e.g. "2% cash back")
// is already included in the `benefit_description`.
type CardBenefit_FlatRateBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CardBenefit_FlatRateBenefit) Reset() {
	*x = CardBenefit_FlatRateBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBenefit_FlatRateBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBenefit_FlatRateBenefit) ProtoMessage() {}

func (x *CardBenefit_FlatRateBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBenefit_FlatRateBenefit.ProtoReflect.Descriptor instead.
func (*CardBenefit_FlatRateBenefit) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{3, 0}
}

// Proto containing data specific to a category benefit.
type CardBenefit_CategoryBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of category purchases the benefit is eligible on.
	CategoryBenefitType *CardBenefit_CategoryBenefitType `protobuf:"varint,1,opt,name=category_benefit_type,json=categoryBenefitType,enum=sync_pb.CardBenefit_CategoryBenefitType" json:"category_benefit_type,omitempty"`
}

func (x *CardBenefit_CategoryBenefit) Reset() {
	*x = CardBenefit_CategoryBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBenefit_CategoryBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBenefit_CategoryBenefit) ProtoMessage() {}

func (x *CardBenefit_CategoryBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBenefit_CategoryBenefit.ProtoReflect.Descriptor instead.
func (*CardBenefit_CategoryBenefit) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CardBenefit_CategoryBenefit) GetCategoryBenefitType() CardBenefit_CategoryBenefitType {
	if x != nil && x.CategoryBenefitType != nil {
		return *x.CategoryBenefitType
	}
	return CardBenefit_CATEGORY_BENEFIT_TYPE_UNKNOWN
}

// Proto containing data specific to a merchant benefit.
type CardBenefit_MerchantBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The merchant domain that the benefit is eligible on.
	// Example: https://www.acme.com
	MerchantDomain []string `protobuf:"bytes,1,rep,name=merchant_domain,json=merchantDomain" json:"merchant_domain,omitempty"`
}

func (x *CardBenefit_MerchantBenefit) Reset() {
	*x = CardBenefit_MerchantBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBenefit_MerchantBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBenefit_MerchantBenefit) ProtoMessage() {}

func (x *CardBenefit_MerchantBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBenefit_MerchantBenefit.ProtoReflect.Descriptor instead.
func (*CardBenefit_MerchantBenefit) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CardBenefit_MerchantBenefit) GetMerchantDomain() []string {
	if x != nil {
		return x.MerchantDomain
	}
	return nil
}

var File_autofill_specifics_proto protoreflect.FileDescriptor

var file_autofill_specifics_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x22, 0xe3, 0x35, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6a,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x60,
	0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x62, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x69, 0x0a, 0x16, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x75, 0x0a, 0x1c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x23, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x19, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6b, 0x0a, 0x17, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x6e,
	0x61, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x5a, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3a, 0x0a,
	0x1a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x66, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x68, 0x6f, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x6f,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x6f, 0x6d, 0x65, 0x54, 0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x70,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x61, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x70, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x61, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4c,
	0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x5f, 0x31, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x31, 0x12, 0x42, 0x0a, 0x1e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x5f, 0x32, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d,
	0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x32,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x55, 0x0a, 0x28, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x6f, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x73, 0x4f, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x4a, 0x0a, 0x22, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6e, 0x64, 0x4c,
	0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x29, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x6d, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x6f, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x6b, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x6d, 0x65, 0x5a, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x73, 0x0a,
	0x1b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x75, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x19,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x64, 0x6d,
	0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x85,
	0x01, 0x0a, 0x25, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x5f,
	0x31, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d,
	0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x31,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x25, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x5f, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x32, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7d,
	0x0a, 0x21, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a,
	0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x29, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d,
	0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x4f,
	0x72, 0x4c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x8d, 0x01, 0x0a, 0x29, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x61,
	0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6e,
	0x64, 0x4c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x9a, 0x01, 0x0a, 0x30, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x2a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x1e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x7c, 0x0a, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x88, 0x01,
	0x0a, 0x26, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d,
	0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7e, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x25, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x6f, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x21,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x68, 0x6f, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x8a, 0x01, 0x0a, 0x27, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x74, 0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x23, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61,
	0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x82,
	0x01, 0x0a, 0x23, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x1f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6b, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x14, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x72, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x17, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x70, 0x74,
	0x4e, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x74, 0x0a, 0x1c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x6d, 0x65, 0x41, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x6f, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x35, 0x0a, 0x17, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x77,
	0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x57, 0x68, 0x6f, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x66, 0x61, 0x78, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x46, 0x61, 0x78, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x69,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1d, 0x69, 0x73, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x1f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x53, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53,
	0x45, 0x44, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x3c, 0x10, 0x3d, 0x4a, 0x04, 0x08, 0x1e, 0x10, 0x1f,
	0x4a, 0x04, 0x08, 0x3d, 0x10, 0x3e, 0x4a, 0x04, 0x08, 0x3f, 0x10, 0x40, 0x4a, 0x04, 0x08, 0x40,
	0x10, 0x41, 0x4a, 0x04, 0x08, 0x41, 0x10, 0x42, 0x4a, 0x04, 0x08, 0x42, 0x10, 0x43, 0x4a, 0x04,
	0x08, 0x28, 0x10, 0x29, 0x4a, 0x04, 0x08, 0x29, 0x10, 0x2a, 0x4a, 0x04, 0x08, 0x35, 0x10, 0x36,
	0x4a, 0x04, 0x08, 0x36, 0x10, 0x37, 0x4a, 0x04, 0x08, 0x1a, 0x10, 0x1b, 0x52, 0x18, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x68, 0x6f, 0x6e,
	0x6f, 0x72, 0x69, 0x66, 0x69, 0x63, 0x52, 0x15, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x6e,
	0x6f, 0x72, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x68, 0x6f,
	0x6e, 0x6f, 0x72, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x21,
	0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x0d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x79,
	0x52, 0x0f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x52, 0x28, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x6f, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x19, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x69, 0x66, 0x69, 0x63, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4a,
	0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x52, 0x15, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x22,
	0xad, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78,
	0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x66, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x46, 0x69, 0x66,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xe0, 0x06, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x22, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x78, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x1a, 0x11, 0x0a,
	0x0f, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x1a, 0x6f, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x12, 0x5c, 0x0a, 0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x3a, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x99, 0x01,
	0x0a, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x43, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x06, 0x42, 0x17, 0x0a, 0x15, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x3d, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x10,
	0x02, 0x22, 0x9b, 0x0b, 0x0a, 0x16, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b,
	0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x73,
	0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x10,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x7d, 0x0a, 0x1d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x1a, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x72,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72,
	0x64, 0x41, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x1c, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x2a, 0x0a, 0x10, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x4d, 0x45, 0x58, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x4a, 0x43, 0x42, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x45, 0x53, 0x54, 0x52,
	0x4f, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x49,
	0x53, 0x41, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x50, 0x41, 0x59,
	0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4c, 0x4f, 0x10, 0x0a, 0x22, 0x8d, 0x01, 0x0a, 0x1a,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x55,
	0x4e, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a,
	0x1b, 0x55, 0x4e, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x55, 0x4e, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x22, 0x4a, 0x0a, 0x19, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08,
	0x0e, 0x10, 0x0f, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22,
	0xb9, 0x03, 0x0a, 0x13, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x33, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x34, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x34, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x26, 0x0a, 0x14, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x1e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x59, 0x65, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x66, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x46, 0x69, 0x66, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9a, 0x03, 0x0a, 0x11, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x65, 0x64, 0x49, 0x62, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x69, 0x62, 0x61, 0x6e,
	0x22, 0x3e, 0x0a, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x52,
	0x41, 0x49, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x49, 0x58, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x42, 0x41, 0x4e, 0x10, 0x02,
	0x42, 0x14, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x62, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x4a, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x41, 0x4c, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x05, 0x22, 0xa8, 0x05, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x43,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x62, 0x61, 0x6e, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x49, 0x62, 0x61, 0x6e, 0x22,
	0xab, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x53, 0x54, 0x41,
	0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0b, 0x4d, 0x41, 0x53, 0x4b,
	0x45, 0x44, 0x5f, 0x49, 0x42, 0x41, 0x4e, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x01, 0x22, 0xbd, 0x02,
	0x0a, 0x17, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63,
	0x61, 0x72, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x42, 0x41, 0x4e, 0x10, 0x03, 0x42, 0x36, 0x0a,
	0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03, 0x50, 0x01, 0x5a, 0x09, 0x2e, 0x2f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_autofill_specifics_proto_rawDescOnce sync.Once
	file_autofill_specifics_proto_rawDescData = file_autofill_specifics_proto_rawDesc
)

func file_autofill_specifics_proto_rawDescGZIP() []byte {
	file_autofill_specifics_proto_rawDescOnce.Do(func() {
		file_autofill_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_autofill_specifics_proto_rawDescData)
	})
	return file_autofill_specifics_proto_rawDescData
}

var file_autofill_specifics_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_autofill_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_autofill_specifics_proto_goTypes = []interface{}{
	(AutofillProfileSpecifics_VerificationStatus)(0),       // 0: sync_pb.AutofillProfileSpecifics.VerificationStatus
	(CardBenefit_CategoryBenefitType)(0),                   // 1: sync_pb.CardBenefit.CategoryBenefitType
	(CardIssuer_Issuer)(0),                                 // 2: sync_pb.CardIssuer.Issuer
	(WalletMaskedCreditCard_WalletCardStatus)(0),           // 3: sync_pb.WalletMaskedCreditCard.WalletCardStatus
	(WalletMaskedCreditCard_WalletCardType)(0),             // 4: sync_pb.WalletMaskedCreditCard.WalletCardType
	(WalletMaskedCreditCard_VirtualCardEnrollmentState)(0), // 5: sync_pb.WalletMaskedCreditCard.VirtualCardEnrollmentState
	(WalletMaskedCreditCard_VirtualCardEnrollmentType)(0),  // 6: sync_pb.WalletMaskedCreditCard.VirtualCardEnrollmentType
	(PaymentInstrument_SupportedRail)(0),                   // 7: sync_pb.PaymentInstrument.SupportedRail
	(BankAccountDetails_AccountType)(0),                    // 8: sync_pb.BankAccountDetails.AccountType
	(AutofillWalletSpecifics_WalletInfoType)(0),            // 9: sync_pb.AutofillWalletSpecifics.WalletInfoType
	(WalletMetadataSpecifics_Type)(0),                      // 10: sync_pb.WalletMetadataSpecifics.Type
	(*AutofillProfileSpecifics)(nil),                       // 11: sync_pb.AutofillProfileSpecifics
	(*AutofillSpecifics)(nil),                              // 12: sync_pb.AutofillSpecifics
	(*CloudTokenData)(nil),                                 // 13: sync_pb.CloudTokenData
	(*CardBenefit)(nil),                                    // 14: sync_pb.CardBenefit
	(*CardIssuer)(nil),                                     // 15: sync_pb.CardIssuer
	(*WalletMaskedCreditCard)(nil),                         // 16: sync_pb.WalletMaskedCreditCard
	(*WalletPostalAddress)(nil),                            // 17: sync_pb.WalletPostalAddress
	(*PaymentsCustomerData)(nil),                           // 18: sync_pb.PaymentsCustomerData
	(*WalletCreditCardCloudTokenData)(nil),                 // 19: sync_pb.WalletCreditCardCloudTokenData
	(*PaymentInstrument)(nil),                              // 20: sync_pb.PaymentInstrument
	(*WalletMaskedIban)(nil),                               // 21: sync_pb.WalletMaskedIban
	(*BankAccountDetails)(nil),                             // 22: sync_pb.BankAccountDetails
	(*AutofillWalletSpecifics)(nil),                        // 23: sync_pb.AutofillWalletSpecifics
	(*WalletMetadataSpecifics)(nil),                        // 24: sync_pb.WalletMetadataSpecifics
	(*CardBenefit_FlatRateBenefit)(nil),                    // 25: sync_pb.CardBenefit.FlatRateBenefit
	(*CardBenefit_CategoryBenefit)(nil),                    // 26: sync_pb.CardBenefit.CategoryBenefit
	(*CardBenefit_MerchantBenefit)(nil),                    // 27: sync_pb.CardBenefit.MerchantBenefit
}
var file_autofill_specifics_proto_depIdxs = []int32{
	0,  // 0: sync_pb.AutofillProfileSpecifics.name_first_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 1: sync_pb.AutofillProfileSpecifics.name_middle_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 2: sync_pb.AutofillProfileSpecifics.name_last_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 3: sync_pb.AutofillProfileSpecifics.name_last_first_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 4: sync_pb.AutofillProfileSpecifics.name_last_conjunction_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 5: sync_pb.AutofillProfileSpecifics.name_last_second_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 6: sync_pb.AutofillProfileSpecifics.name_full_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 7: sync_pb.AutofillProfileSpecifics.address_home_city_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 8: sync_pb.AutofillProfileSpecifics.address_home_state_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 9: sync_pb.AutofillProfileSpecifics.address_home_zip_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 10: sync_pb.AutofillProfileSpecifics.address_home_country_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 11: sync_pb.AutofillProfileSpecifics.address_home_landmark_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 12: sync_pb.AutofillProfileSpecifics.address_home_between_streets_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 13: sync_pb.AutofillProfileSpecifics.address_home_between_streets_1_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 14: sync_pb.AutofillProfileSpecifics.address_home_between_streets_2_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 15: sync_pb.AutofillProfileSpecifics.address_home_admin_level_2_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 16: sync_pb.AutofillProfileSpecifics.address_home_overflow_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 17: sync_pb.AutofillProfileSpecifics.address_home_between_streets_or_landmark_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 18: sync_pb.AutofillProfileSpecifics.address_home_overflow_and_landmark_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 19: sync_pb.AutofillProfileSpecifics.address_home_street_location_and_locality_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 20: sync_pb.AutofillProfileSpecifics.address_home_street_address_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 21: sync_pb.AutofillProfileSpecifics.address_home_sorting_code_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 22: sync_pb.AutofillProfileSpecifics.address_home_dependent_locality_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 23: sync_pb.AutofillProfileSpecifics.address_home_language_code_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 24: sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_name_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 25: sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_number_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 26: sync_pb.AutofillProfileSpecifics.address_home_street_location_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 27: sync_pb.AutofillProfileSpecifics.address_home_subpremise_name_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 28: sync_pb.AutofillProfileSpecifics.address_home_apt_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 29: sync_pb.AutofillProfileSpecifics.address_home_apt_num_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 30: sync_pb.AutofillProfileSpecifics.address_home_apt_type_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	0,  // 31: sync_pb.AutofillProfileSpecifics.address_home_floor_status:type_name -> sync_pb.AutofillProfileSpecifics.VerificationStatus
	11, // 32: sync_pb.AutofillSpecifics.profile:type_name -> sync_pb.AutofillProfileSpecifics
	25, // 33: sync_pb.CardBenefit.flat_rate_benefit:type_name -> sync_pb.CardBenefit.FlatRateBenefit
	26, // 34: sync_pb.CardBenefit.category_benefit:type_name -> sync_pb.CardBenefit.CategoryBenefit
	27, // 35: sync_pb.CardBenefit.merchant_benefit:type_name -> sync_pb.CardBenefit.MerchantBenefit
	2,  // 36: sync_pb.CardIssuer.issuer:type_name -> sync_pb.CardIssuer.Issuer
	3,  // 37: sync_pb.WalletMaskedCreditCard.status:type_name -> sync_pb.WalletMaskedCreditCard.WalletCardStatus
	4,  // 38: sync_pb.WalletMaskedCreditCard.type:type_name -> sync_pb.WalletMaskedCreditCard.WalletCardType
	13, // 39: sync_pb.WalletMaskedCreditCard.cloud_token_data:type_name -> sync_pb.CloudTokenData
	15, // 40: sync_pb.WalletMaskedCreditCard.card_issuer:type_name -> sync_pb.CardIssuer
	5,  // 41: sync_pb.WalletMaskedCreditCard.virtual_card_enrollment_state:type_name -> sync_pb.WalletMaskedCreditCard.VirtualCardEnrollmentState
	6,  // 42: sync_pb.WalletMaskedCreditCard.virtual_card_enrollment_type:type_name -> sync_pb.WalletMaskedCreditCard.VirtualCardEnrollmentType
	14, // 43: sync_pb.WalletMaskedCreditCard.card_benefit:type_name -> sync_pb.CardBenefit
	7,  // 44: sync_pb.PaymentInstrument.supported_rails:type_name -> sync_pb.PaymentInstrument.SupportedRail
	22, // 45: sync_pb.PaymentInstrument.bank_account:type_name -> sync_pb.BankAccountDetails
	21, // 46: sync_pb.PaymentInstrument.iban:type_name -> sync_pb.WalletMaskedIban
	8,  // 47: sync_pb.BankAccountDetails.account_type:type_name -> sync_pb.BankAccountDetails.AccountType
	9,  // 48: sync_pb.AutofillWalletSpecifics.type:type_name -> sync_pb.AutofillWalletSpecifics.WalletInfoType
	16, // 49: sync_pb.AutofillWalletSpecifics.masked_card:type_name -> sync_pb.WalletMaskedCreditCard
	17, // 50: sync_pb.AutofillWalletSpecifics.address:type_name -> sync_pb.WalletPostalAddress
	18, // 51: sync_pb.AutofillWalletSpecifics.customer_data:type_name -> sync_pb.PaymentsCustomerData
	19, // 52: sync_pb.AutofillWalletSpecifics.cloud_token_data:type_name -> sync_pb.WalletCreditCardCloudTokenData
	20, // 53: sync_pb.AutofillWalletSpecifics.payment_instrument:type_name -> sync_pb.PaymentInstrument
	21, // 54: sync_pb.AutofillWalletSpecifics.masked_iban:type_name -> sync_pb.WalletMaskedIban
	10, // 55: sync_pb.WalletMetadataSpecifics.type:type_name -> sync_pb.WalletMetadataSpecifics.Type
	1,  // 56: sync_pb.CardBenefit.CategoryBenefit.category_benefit_type:type_name -> sync_pb.CardBenefit.CategoryBenefitType
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_autofill_specifics_proto_init() }
func file_autofill_specifics_proto_init() {
	if File_autofill_specifics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_autofill_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillProfileSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardIssuer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletMaskedCreditCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletPostalAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentsCustomerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletCreditCardCloudTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletMaskedIban); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAccountDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillWalletSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletMetadataSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBenefit_FlatRateBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBenefit_CategoryBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBenefit_MerchantBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_autofill_specifics_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CardBenefit_FlatRateBenefit_)(nil),
		(*CardBenefit_CategoryBenefit_)(nil),
		(*CardBenefit_MerchantBenefit_)(nil),
	}
	file_autofill_specifics_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PaymentInstrument_BankAccount)(nil),
		(*PaymentInstrument_Iban)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_autofill_specifics_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_autofill_specifics_proto_goTypes,
		DependencyIndexes: file_autofill_specifics_proto_depIdxs,
		EnumInfos:         file_autofill_specifics_proto_enumTypes,
		MessageInfos:      file_autofill_specifics_proto_msgTypes,
	}.Build()
	File_autofill_specifics_proto = out.File
	file_autofill_specifics_proto_rawDesc = nil
	file_autofill_specifics_proto_goTypes = nil
	file_autofill_specifics_proto_depIdxs = nil
}
