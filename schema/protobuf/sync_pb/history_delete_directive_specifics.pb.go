// Copyright 2012 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for history delete directives.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: history_delete_directive_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Properties of history delete directive sync objects.
type HistoryDeleteDirectiveSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exactly one of the fields below must be filled in.  Otherwise, this
	// delete directive must be ignored.
	GlobalIdDirective  *GlobalIdDirective  `protobuf:"bytes,1,opt,name=global_id_directive,json=globalIdDirective" json:"global_id_directive,omitempty"`
	TimeRangeDirective *TimeRangeDirective `protobuf:"bytes,2,opt,name=time_range_directive,json=timeRangeDirective" json:"time_range_directive,omitempty"`
	UrlDirective       *UrlDirective       `protobuf:"bytes,3,opt,name=url_directive,json=urlDirective" json:"url_directive,omitempty"`
}

func (x *HistoryDeleteDirectiveSpecifics) Reset() {
	*x = HistoryDeleteDirectiveSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_delete_directive_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryDeleteDirectiveSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryDeleteDirectiveSpecifics) ProtoMessage() {}

func (x *HistoryDeleteDirectiveSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_history_delete_directive_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryDeleteDirectiveSpecifics.ProtoReflect.Descriptor instead.
func (*HistoryDeleteDirectiveSpecifics) Descriptor() ([]byte, []int) {
	return file_history_delete_directive_specifics_proto_rawDescGZIP(), []int{0}
}

func (x *HistoryDeleteDirectiveSpecifics) GetGlobalIdDirective() *GlobalIdDirective {
	if x != nil {
		return x.GlobalIdDirective
	}
	return nil
}

func (x *HistoryDeleteDirectiveSpecifics) GetTimeRangeDirective() *TimeRangeDirective {
	if x != nil {
		return x.TimeRangeDirective
	}
	return nil
}

func (x *HistoryDeleteDirectiveSpecifics) GetUrlDirective() *UrlDirective {
	if x != nil {
		return x.UrlDirective
	}
	return nil
}

type GlobalIdDirective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The global IDs of the navigations to delete.
	GlobalId []int64 `protobuf:"varint,1,rep,name=global_id,json=globalId" json:"global_id,omitempty"`
	// Time range for searching for navigations to delete. Client should delete
	// all navigations to a URL between [start_time_usec, end_time_usec]
	// if one of them matches a |global_id|.
	StartTimeUsec *int64 `protobuf:"varint,2,opt,name=start_time_usec,json=startTimeUsec" json:"start_time_usec,omitempty"`
	EndTimeUsec   *int64 `protobuf:"varint,3,opt,name=end_time_usec,json=endTimeUsec" json:"end_time_usec,omitempty"`
}

func (x *GlobalIdDirective) Reset() {
	*x = GlobalIdDirective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_delete_directive_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalIdDirective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalIdDirective) ProtoMessage() {}

func (x *GlobalIdDirective) ProtoReflect() protoreflect.Message {
	mi := &file_history_delete_directive_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalIdDirective.ProtoReflect.Descriptor instead.
func (*GlobalIdDirective) Descriptor() ([]byte, []int) {
	return file_history_delete_directive_specifics_proto_rawDescGZIP(), []int{1}
}

func (x *GlobalIdDirective) GetGlobalId() []int64 {
	if x != nil {
		return x.GlobalId
	}
	return nil
}

func (x *GlobalIdDirective) GetStartTimeUsec() int64 {
	if x != nil && x.StartTimeUsec != nil {
		return *x.StartTimeUsec
	}
	return 0
}

func (x *GlobalIdDirective) GetEndTimeUsec() int64 {
	if x != nil && x.EndTimeUsec != nil {
		return *x.EndTimeUsec
	}
	return 0
}

type TimeRangeDirective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time on or after which entries must be deleted.
	StartTimeUsec *int64 `protobuf:"varint,1,opt,name=start_time_usec,json=startTimeUsec" json:"start_time_usec,omitempty"`
	// The time on or before which entries must be deleted.
	EndTimeUsec *int64 `protobuf:"varint,2,opt,name=end_time_usec,json=endTimeUsec" json:"end_time_usec,omitempty"`
	// Optional field to filter the entries with the matching app ID.
	// This field is set only by Android which has app-specific history feature
	// that allows users to generate/delete history entries from Custom Tabs on
	// app, not from BrApp.
	AppId *string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *TimeRangeDirective) Reset() {
	*x = TimeRangeDirective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_delete_directive_specifics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRangeDirective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRangeDirective) ProtoMessage() {}

func (x *TimeRangeDirective) ProtoReflect() protoreflect.Message {
	mi := &file_history_delete_directive_specifics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRangeDirective.ProtoReflect.Descriptor instead.
func (*TimeRangeDirective) Descriptor() ([]byte, []int) {
	return file_history_delete_directive_specifics_proto_rawDescGZIP(), []int{2}
}

func (x *TimeRangeDirective) GetStartTimeUsec() int64 {
	if x != nil && x.StartTimeUsec != nil {
		return *x.StartTimeUsec
	}
	return 0
}

func (x *TimeRangeDirective) GetEndTimeUsec() int64 {
	if x != nil && x.EndTimeUsec != nil {
		return *x.EndTimeUsec
	}
	return 0
}

func (x *TimeRangeDirective) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

type UrlDirective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL that should be removed from history.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// The time on or before which entries must be deleted.
	// In microseconds since the Unix epoch.
	EndTimeUsec *int64 `protobuf:"varint,2,opt,name=end_time_usec,json=endTimeUsec" json:"end_time_usec,omitempty"`
	// Optional field to filter the entries with the matching app ID.
	// This field is set only by Android which has app-specific history feature
	// that allows users to generate/delete history entries from Custom Tabs on
	// app, not from BrApp.
	AppId *string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *UrlDirective) Reset() {
	*x = UrlDirective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_delete_directive_specifics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlDirective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlDirective) ProtoMessage() {}

func (x *UrlDirective) ProtoReflect() protoreflect.Message {
	mi := &file_history_delete_directive_specifics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlDirective.ProtoReflect.Descriptor instead.
func (*UrlDirective) Descriptor() ([]byte, []int) {
	return file_history_delete_directive_specifics_proto_rawDescGZIP(), []int{3}
}

func (x *UrlDirective) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *UrlDirective) GetEndTimeUsec() int64 {
	if x != nil && x.EndTimeUsec != nil {
		return *x.EndTimeUsec
	}
	return 0
}

func (x *UrlDirective) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

var File_history_delete_directive_specifics_proto protoreflect.FileDescriptor

var file_history_delete_directive_specifics_proto_rawDesc = []byte{
	0x0a, 0x28, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x22, 0xf8, 0x01, 0x0a, 0x1f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x12,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x75, 0x72, 0x6c, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x55, 0x72, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x0c, 0x75, 0x72, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x7c,
	0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x22, 0x77, 0x0a, 0x12,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0c, 0x55, 0x72, 0x6c, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x42, 0x36, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03, 0x50, 0x01, 0x5a,
	0x09, 0x2e, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_history_delete_directive_specifics_proto_rawDescOnce sync.Once
	file_history_delete_directive_specifics_proto_rawDescData = file_history_delete_directive_specifics_proto_rawDesc
)

func file_history_delete_directive_specifics_proto_rawDescGZIP() []byte {
	file_history_delete_directive_specifics_proto_rawDescOnce.Do(func() {
		file_history_delete_directive_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_history_delete_directive_specifics_proto_rawDescData)
	})
	return file_history_delete_directive_specifics_proto_rawDescData
}

var file_history_delete_directive_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_history_delete_directive_specifics_proto_goTypes = []interface{}{
	(*HistoryDeleteDirectiveSpecifics)(nil), // 0: sync_pb.HistoryDeleteDirectiveSpecifics
	(*GlobalIdDirective)(nil),               // 1: sync_pb.GlobalIdDirective
	(*TimeRangeDirective)(nil),              // 2: sync_pb.TimeRangeDirective
	(*UrlDirective)(nil),                    // 3: sync_pb.UrlDirective
}
var file_history_delete_directive_specifics_proto_depIdxs = []int32{
	1, // 0: sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive:type_name -> sync_pb.GlobalIdDirective
	2, // 1: sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive:type_name -> sync_pb.TimeRangeDirective
	3, // 2: sync_pb.HistoryDeleteDirectiveSpecifics.url_directive:type_name -> sync_pb.UrlDirective
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_history_delete_directive_specifics_proto_init() }
func file_history_delete_directive_specifics_proto_init() {
	if File_history_delete_directive_specifics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_history_delete_directive_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryDeleteDirectiveSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_delete_directive_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalIdDirective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_delete_directive_specifics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRangeDirective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_delete_directive_specifics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlDirective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_history_delete_directive_specifics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_history_delete_directive_specifics_proto_goTypes,
		DependencyIndexes: file_history_delete_directive_specifics_proto_depIdxs,
		MessageInfos:      file_history_delete_directive_specifics_proto_msgTypes,
	}.Build()
	File_history_delete_directive_specifics_proto = out.File
	file_history_delete_directive_specifics_proto_rawDesc = nil
	file_history_delete_directive_specifics_proto_goTypes = nil
	file_history_delete_directive_specifics_proto_depIdxs = nil
}
