// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for password data.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: password_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All the strings are encoded with UTF-8. URLs are encoded in Punycode.
type PasswordSpecificsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
	// android credential or a password saved through Credential Manager API
	// (https://w3c.github.io/webappsec/specs/credentialmanagement/).
	// SCHEME_BASIC(1), basic access http authentication.
	// SCHEME_DIGEST(2), digest access authentication.
	// SCHEME_OTHER(3), another access authentication.
	Scheme *int32 `protobuf:"varint,1,opt,name=scheme" json:"scheme,omitempty"`
	// For parsed web forms and normal passwords saved through Credential Manager
	// API: url-scheme://url-host[:url-port]/
	// For Android apps (local + federated):
	//     "android://<hash of cert>@<package name>/"
	// where the hash is base64 encoded SHA512 of the app's public certificate.
	// For federated credentials:
	//     "federation://" + origin_host + "/" + federation_host
	// For proxy auth: proxy-host/auth-realm
	// For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
	SignonRealm *string `protobuf:"bytes,2,opt,name=signon_realm,json=signonRealm" json:"signon_realm,omitempty"`
	// For parsed web forms and Credential Manager API:
	//     url-scheme://url-host[:url-port]/path
	// For Android: "android://<hash of cert>@<package name>/"
	// For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
	Origin *string `protobuf:"bytes,3,opt,name=origin" json:"origin,omitempty"`
	// Only for web-parsed forms - the action target of the form:
	//     url-scheme://url-host[:url-port]/path
	Action *string `protobuf:"bytes,4,opt,name=action" json:"action,omitempty"`
	// Only for web-parsed forms - the name of the element containing username.
	UsernameElement *string `protobuf:"bytes,5,opt,name=username_element,json=usernameElement" json:"username_element,omitempty"`
	// For all: the username.
	// For blacklisted forms: <empty>.
	UsernameValue *string `protobuf:"bytes,6,opt,name=username_value,json=usernameValue" json:"username_value,omitempty"`
	// Only for web-parsed forms - the name of the element containing password.
	PasswordElement *string `protobuf:"bytes,7,opt,name=password_element,json=passwordElement" json:"password_element,omitempty"`
	// For all: the password.
	// For federated logins and blacklisted forms: <empty>
	PasswordValue *string `protobuf:"bytes,8,opt,name=password_value,json=passwordValue" json:"password_value,omitempty"`
	// Deprecated: http://crbug.com/413020
	// True if the credential was saved for a HTTPS session with a valid SSL cert.
	// Ignored for Android apps.
	//
	// Deprecated: Do not use.
	SslValid *bool `protobuf:"varint,9,opt,name=ssl_valid,json=sslValid" json:"ssl_valid,omitempty"`
	// True for the last credential used for logging in on a given site.
	// Deprecated in M81.
	//
	// Deprecated: Do not use.
	Preferred *bool `protobuf:"varint,10,opt,name=preferred" json:"preferred,omitempty"`
	// Time when the credential was created. Amount of microseconds since 1601.
	DateCreated *int64 `protobuf:"varint,11,opt,name=date_created,json=dateCreated" json:"date_created,omitempty"`
	// True, if user chose permanently not to save the credentials for the form.
	Blacklisted *bool `protobuf:"varint,12,opt,name=blacklisted" json:"blacklisted,omitempty"`
	// TYPE_MANUAL(0), user manually filled the username and the password.
	// TYPE_GENERATED(1), the credential was auto generated.
	Type *int32 `protobuf:"varint,13,opt,name=type" json:"type,omitempty"`
	// Number of times this login was used for logging in. Chrome uses this field
	// to distinguish log-in and sign-up forms.
	TimesUsed *int32 `protobuf:"varint,14,opt,name=times_used,json=timesUsed" json:"times_used,omitempty"`
	// A human readable name of the account holder. Set by CredentialManager API
	// and Android.
	DisplayName *string `protobuf:"bytes,15,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// A URL of the avatar for the credential. Set by CredentialManager API and
	// Android.
	AvatarUrl *string `protobuf:"bytes,16,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// A URL of the IdP used to verify the credential. Set by Credential Manager
	// API and Android.
	FederationUrl *string `protobuf:"bytes,17,opt,name=federation_url,json=federationUrl" json:"federation_url,omitempty"`
	// Time when the credential was last used. Amount of microseconds since 1601.
	DateLastUsed *int64 `protobuf:"varint,18,opt,name=date_last_used,json=dateLastUsed" json:"date_last_used,omitempty"`
}

func (x *PasswordSpecificsData) Reset() {
	*x = PasswordSpecificsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecificsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecificsData) ProtoMessage() {}

func (x *PasswordSpecificsData) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecificsData.ProtoReflect.Descriptor instead.
func (*PasswordSpecificsData) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{0}
}

func (x *PasswordSpecificsData) GetScheme() int32 {
	if x != nil && x.Scheme != nil {
		return *x.Scheme
	}
	return 0
}

func (x *PasswordSpecificsData) GetSignonRealm() string {
	if x != nil && x.SignonRealm != nil {
		return *x.SignonRealm
	}
	return ""
}

func (x *PasswordSpecificsData) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *PasswordSpecificsData) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *PasswordSpecificsData) GetUsernameElement() string {
	if x != nil && x.UsernameElement != nil {
		return *x.UsernameElement
	}
	return ""
}

func (x *PasswordSpecificsData) GetUsernameValue() string {
	if x != nil && x.UsernameValue != nil {
		return *x.UsernameValue
	}
	return ""
}

func (x *PasswordSpecificsData) GetPasswordElement() string {
	if x != nil && x.PasswordElement != nil {
		return *x.PasswordElement
	}
	return ""
}

func (x *PasswordSpecificsData) GetPasswordValue() string {
	if x != nil && x.PasswordValue != nil {
		return *x.PasswordValue
	}
	return ""
}

// Deprecated: Do not use.
func (x *PasswordSpecificsData) GetSslValid() bool {
	if x != nil && x.SslValid != nil {
		return *x.SslValid
	}
	return false
}

// Deprecated: Do not use.
func (x *PasswordSpecificsData) GetPreferred() bool {
	if x != nil && x.Preferred != nil {
		return *x.Preferred
	}
	return false
}

func (x *PasswordSpecificsData) GetDateCreated() int64 {
	if x != nil && x.DateCreated != nil {
		return *x.DateCreated
	}
	return 0
}

func (x *PasswordSpecificsData) GetBlacklisted() bool {
	if x != nil && x.Blacklisted != nil {
		return *x.Blacklisted
	}
	return false
}

func (x *PasswordSpecificsData) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PasswordSpecificsData) GetTimesUsed() int32 {
	if x != nil && x.TimesUsed != nil {
		return *x.TimesUsed
	}
	return 0
}

func (x *PasswordSpecificsData) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *PasswordSpecificsData) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *PasswordSpecificsData) GetFederationUrl() string {
	if x != nil && x.FederationUrl != nil {
		return *x.FederationUrl
	}
	return ""
}

func (x *PasswordSpecificsData) GetDateLastUsed() int64 {
	if x != nil && x.DateLastUsed != nil {
		return *x.DateLastUsed
	}
	return 0
}

// Contains the password specifics metadata which simplifies its lookup.
type PasswordSpecificsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// True, if user chose permanently not to save the credentials for the form.
	// Introduced in M82.
	Blacklisted *bool `protobuf:"varint,2,opt,name=blacklisted" json:"blacklisted,omitempty"`
}

func (x *PasswordSpecificsMetadata) Reset() {
	*x = PasswordSpecificsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecificsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecificsMetadata) ProtoMessage() {}

func (x *PasswordSpecificsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecificsMetadata.ProtoReflect.Descriptor instead.
func (*PasswordSpecificsMetadata) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{1}
}

func (x *PasswordSpecificsMetadata) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PasswordSpecificsMetadata) GetBlacklisted() bool {
	if x != nil && x.Blacklisted != nil {
		return *x.Blacklisted
	}
	return false
}

// Properties of password sync objects.
type PasswordSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual password data. Contains an encrypted PasswordSpecificsData
	// message.
	Encrypted *EncryptedData `protobuf:"bytes,1,opt,name=encrypted" json:"encrypted,omitempty"`
	// An unsynced field for use internally on the client. This field should
	// never be set in any network-based communications because it contains
	// unencrypted material.
	ClientOnlyEncryptedData *PasswordSpecificsData `protobuf:"bytes,2,opt,name=client_only_encrypted_data,json=clientOnlyEncryptedData" json:"client_only_encrypted_data,omitempty"`
	// Password related metadata, which is sent to the server side. The field
	// should never be set for full encryption users. If encryption is enabled,
	// this field must be cleared.
	UnencryptedMetadata *PasswordSpecificsMetadata `protobuf:"bytes,3,opt,name=unencrypted_metadata,json=unencryptedMetadata" json:"unencrypted_metadata,omitempty"`
}

func (x *PasswordSpecifics) Reset() {
	*x = PasswordSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_password_specifics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSpecifics) ProtoMessage() {}

func (x *PasswordSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_password_specifics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSpecifics.ProtoReflect.Descriptor instead.
func (*PasswordSpecifics) Descriptor() ([]byte, []int) {
	return file_password_specifics_proto_rawDescGZIP(), []int{2}
}

func (x *PasswordSpecifics) GetEncrypted() *EncryptedData {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (x *PasswordSpecifics) GetClientOnlyEncryptedData() *PasswordSpecificsData {
	if x != nil {
		return x.ClientOnlyEncryptedData
	}
	return nil
}

func (x *PasswordSpecifics) GetUnencryptedMetadata() *PasswordSpecificsMetadata {
	if x != nil {
		return x.UnencryptedMetadata
	}
	return nil
}

var File_password_specifics_proto protoreflect.FileDescriptor

var file_password_specifics_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x1a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x04, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x09, 0x73, 0x73, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73, 0x73, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x19, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x11, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12,
	0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x55, 0x0a, 0x14, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2b, 0x0a, 0x25, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x48, 0x03, 0x50, 0x01,
}

var (
	file_password_specifics_proto_rawDescOnce sync.Once
	file_password_specifics_proto_rawDescData = file_password_specifics_proto_rawDesc
)

func file_password_specifics_proto_rawDescGZIP() []byte {
	file_password_specifics_proto_rawDescOnce.Do(func() {
		file_password_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_password_specifics_proto_rawDescData)
	})
	return file_password_specifics_proto_rawDescData
}

var file_password_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_password_specifics_proto_goTypes = []interface{}{
	(*PasswordSpecificsData)(nil),     // 0: sync_pb.PasswordSpecificsData
	(*PasswordSpecificsMetadata)(nil), // 1: sync_pb.PasswordSpecificsMetadata
	(*PasswordSpecifics)(nil),         // 2: sync_pb.PasswordSpecifics
	(*EncryptedData)(nil),             // 3: sync_pb.EncryptedData
}
var file_password_specifics_proto_depIdxs = []int32{
	3, // 0: sync_pb.PasswordSpecifics.encrypted:type_name -> sync_pb.EncryptedData
	0, // 1: sync_pb.PasswordSpecifics.client_only_encrypted_data:type_name -> sync_pb.PasswordSpecificsData
	1, // 2: sync_pb.PasswordSpecifics.unencrypted_metadata:type_name -> sync_pb.PasswordSpecificsMetadata
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_password_specifics_proto_init() }
func file_password_specifics_proto_init() {
	if File_password_specifics_proto != nil {
		return
	}
	file_encryption_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_password_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecificsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_password_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecificsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_password_specifics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_password_specifics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_password_specifics_proto_goTypes,
		DependencyIndexes: file_password_specifics_proto_depIdxs,
		MessageInfos:      file_password_specifics_proto_msgTypes,
	}.Build()
	File_password_specifics_proto = out.File
	file_password_specifics_proto_rawDesc = nil
	file_password_specifics_proto_goTypes = nil
	file_password_specifics_proto_depIdxs = nil
}
