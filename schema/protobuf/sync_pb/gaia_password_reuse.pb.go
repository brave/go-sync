// Copyright 2019 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Security Events used for recording security related events.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.1
// source: gaia_password_reuse.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// If SafeBrowsing is enabled, is the user opted-in to extended
// reporting or Scout?
type GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation int32

const (
	GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_REPORTING_POPULATION_UNSPECIFIED GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation = 0
	GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_NONE                             GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation = 1
	GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_EXTENDED_REPORTING               GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation = 2
	GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_SCOUT                            GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation = 3
)

// Enum value maps for GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation.
var (
	GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_name = map[int32]string{
		0: "REPORTING_POPULATION_UNSPECIFIED",
		1: "NONE",
		2: "EXTENDED_REPORTING",
		3: "SCOUT",
	}
	GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_value = map[string]int32{
		"REPORTING_POPULATION_UNSPECIFIED": 0,
		"NONE":                             1,
		"EXTENDED_REPORTING":               2,
		"SCOUT":                            3,
	}
)

func (x GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation) Enum() *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation {
	p := new(GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation)
	*p = x
	return p
}

func (x GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation) Descriptor() protoreflect.EnumDescriptor {
	return file_gaia_password_reuse_proto_enumTypes[0].Descriptor()
}

func (GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation) Type() protoreflect.EnumType {
	return &file_gaia_password_reuse_proto_enumTypes[0]
}

func (x GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation(num)
	return nil
}

// Deprecated: Use GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation.Descriptor instead.
func (GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation) EnumDescriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type GaiaPasswordReuse_PasswordReuseLookup_LookupResult int32

const (
	GaiaPasswordReuse_PasswordReuseLookup_UNSPECIFIED GaiaPasswordReuse_PasswordReuseLookup_LookupResult = 0
	// URL did match the password reuse whitelist.
	// No further action required related to this re-use event.
	GaiaPasswordReuse_PasswordReuseLookup_WHITELIST_HIT GaiaPasswordReuse_PasswordReuseLookup_LookupResult = 1
	// The URL exists in the clientâ€™s cache.
	// No further action required related to this re-use event.
	// This event also logs the ReputationVerdict.
	GaiaPasswordReuse_PasswordReuseLookup_CACHE_HIT GaiaPasswordReuse_PasswordReuseLookup_LookupResult = 2
	// A valid response received from the SafeBrowsing service.
	// This event also logs the ReputationVerdict.
	GaiaPasswordReuse_PasswordReuseLookup_REQUEST_SUCCESS GaiaPasswordReuse_PasswordReuseLookup_LookupResult = 3
	// Unable to get a valid response from the SafeBrowsing service.
	GaiaPasswordReuse_PasswordReuseLookup_REQUEST_FAILURE GaiaPasswordReuse_PasswordReuseLookup_LookupResult = 4
	// We won't be able to compute reputation for the URL e.g. local IP
	// address, localhost, not-yet-assigned by ICANN gTLD, etc.
	GaiaPasswordReuse_PasswordReuseLookup_URL_UNSUPPORTED GaiaPasswordReuse_PasswordReuseLookup_LookupResult = 5
	// URL did match enterprise whitelist.
	// No further action required related to this re-use event.
	GaiaPasswordReuse_PasswordReuseLookup_ENTERPRISE_WHITELIST_HIT GaiaPasswordReuse_PasswordReuseLookup_LookupResult = 6
	// Password reuse lookup is turned off by enterprise policy.
	// No further action required related to this re-use event.
	GaiaPasswordReuse_PasswordReuseLookup_TURNED_OFF_BY_POLICY GaiaPasswordReuse_PasswordReuseLookup_LookupResult = 7
)

// Enum value maps for GaiaPasswordReuse_PasswordReuseLookup_LookupResult.
var (
	GaiaPasswordReuse_PasswordReuseLookup_LookupResult_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "WHITELIST_HIT",
		2: "CACHE_HIT",
		3: "REQUEST_SUCCESS",
		4: "REQUEST_FAILURE",
		5: "URL_UNSUPPORTED",
		6: "ENTERPRISE_WHITELIST_HIT",
		7: "TURNED_OFF_BY_POLICY",
	}
	GaiaPasswordReuse_PasswordReuseLookup_LookupResult_value = map[string]int32{
		"UNSPECIFIED":              0,
		"WHITELIST_HIT":            1,
		"CACHE_HIT":                2,
		"REQUEST_SUCCESS":          3,
		"REQUEST_FAILURE":          4,
		"URL_UNSUPPORTED":          5,
		"ENTERPRISE_WHITELIST_HIT": 6,
		"TURNED_OFF_BY_POLICY":     7,
	}
)

func (x GaiaPasswordReuse_PasswordReuseLookup_LookupResult) Enum() *GaiaPasswordReuse_PasswordReuseLookup_LookupResult {
	p := new(GaiaPasswordReuse_PasswordReuseLookup_LookupResult)
	*p = x
	return p
}

func (x GaiaPasswordReuse_PasswordReuseLookup_LookupResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GaiaPasswordReuse_PasswordReuseLookup_LookupResult) Descriptor() protoreflect.EnumDescriptor {
	return file_gaia_password_reuse_proto_enumTypes[1].Descriptor()
}

func (GaiaPasswordReuse_PasswordReuseLookup_LookupResult) Type() protoreflect.EnumType {
	return &file_gaia_password_reuse_proto_enumTypes[1]
}

func (x GaiaPasswordReuse_PasswordReuseLookup_LookupResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GaiaPasswordReuse_PasswordReuseLookup_LookupResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GaiaPasswordReuse_PasswordReuseLookup_LookupResult(num)
	return nil
}

// Deprecated: Use GaiaPasswordReuse_PasswordReuseLookup_LookupResult.Descriptor instead.
func (GaiaPasswordReuse_PasswordReuseLookup_LookupResult) EnumDescriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 1, 0}
}

// The following two are only present for CACHE_HIT and REQUEST_SUCCESS.
// The verdict received from the Reputation service. This is set only
// if the user has SafeBrowsing enabled and we fetch the verdict from the
// cache or by sending a verdict request.
type GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict int32

const (
	GaiaPasswordReuse_PasswordReuseLookup_VERDICT_UNSPECIFIED GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict = 0
	GaiaPasswordReuse_PasswordReuseLookup_SAFE                GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict = 1
	GaiaPasswordReuse_PasswordReuseLookup_LOW_REPUTATION      GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict = 2
	GaiaPasswordReuse_PasswordReuseLookup_PHISHING            GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict = 3
)

// Enum value maps for GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict.
var (
	GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_name = map[int32]string{
		0: "VERDICT_UNSPECIFIED",
		1: "SAFE",
		2: "LOW_REPUTATION",
		3: "PHISHING",
	}
	GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_value = map[string]int32{
		"VERDICT_UNSPECIFIED": 0,
		"SAFE":                1,
		"LOW_REPUTATION":      2,
		"PHISHING":            3,
	}
)

func (x GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict) Enum() *GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict {
	p := new(GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict)
	*p = x
	return p
}

func (x GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict) Descriptor() protoreflect.EnumDescriptor {
	return file_gaia_password_reuse_proto_enumTypes[2].Descriptor()
}

func (GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict) Type() protoreflect.EnumType {
	return &file_gaia_password_reuse_proto_enumTypes[2]
}

func (x GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict(num)
	return nil
}

// Deprecated: Use GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict.Descriptor instead.
func (GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict) EnumDescriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 1, 1}
}

type GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult int32

const (
	GaiaPasswordReuse_PasswordReuseDialogInteraction_UNSPECIFIED GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult = 0
	// The user took the action suggested by the warning prompt.
	GaiaPasswordReuse_PasswordReuseDialogInteraction_WARNING_ACTION_TAKEN GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult = 1
	// The user clicked ignore in the warning prompt.
	GaiaPasswordReuse_PasswordReuseDialogInteraction_WARNING_ACTION_IGNORED GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult = 2
	// The warning UI was ignored, i.e. not interacted with by the user.
	// This could happen if the user navigates away from the page.
	GaiaPasswordReuse_PasswordReuseDialogInteraction_WARNING_UI_IGNORED GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult = 3
	// The user clicked "Change Password" on chrome://settings page.
	GaiaPasswordReuse_PasswordReuseDialogInteraction_WARNING_ACTION_TAKEN_ON_SETTINGS GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult = 4
)

// Enum value maps for GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult.
var (
	GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "WARNING_ACTION_TAKEN",
		2: "WARNING_ACTION_IGNORED",
		3: "WARNING_UI_IGNORED",
		4: "WARNING_ACTION_TAKEN_ON_SETTINGS",
	}
	GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_value = map[string]int32{
		"UNSPECIFIED":                      0,
		"WARNING_ACTION_TAKEN":             1,
		"WARNING_ACTION_IGNORED":           2,
		"WARNING_UI_IGNORED":               3,
		"WARNING_ACTION_TAKEN_ON_SETTINGS": 4,
	}
)

func (x GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult) Enum() *GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult {
	p := new(GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult)
	*p = x
	return p
}

func (x GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_gaia_password_reuse_proto_enumTypes[3].Descriptor()
}

func (GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult) Type() protoreflect.EnumType {
	return &file_gaia_password_reuse_proto_enumTypes[3]
}

func (x GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult(num)
	return nil
}

// Deprecated: Use GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult.Descriptor instead.
func (GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult) EnumDescriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 2, 0}
}

type GaiaPasswordReuse_PasswordCaptured_EventTrigger int32

const (
	GaiaPasswordReuse_PasswordCaptured_UNSPECIFIED GaiaPasswordReuse_PasswordCaptured_EventTrigger = 0
	// Event added because user logged in.
	GaiaPasswordReuse_PasswordCaptured_USER_LOGGED_IN GaiaPasswordReuse_PasswordCaptured_EventTrigger = 1
	// Event added because 28d timer fired.
	GaiaPasswordReuse_PasswordCaptured_EXPIRED_28D_TIMER GaiaPasswordReuse_PasswordCaptured_EventTrigger = 2
)

// Enum value maps for GaiaPasswordReuse_PasswordCaptured_EventTrigger.
var (
	GaiaPasswordReuse_PasswordCaptured_EventTrigger_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "USER_LOGGED_IN",
		2: "EXPIRED_28D_TIMER",
	}
	GaiaPasswordReuse_PasswordCaptured_EventTrigger_value = map[string]int32{
		"UNSPECIFIED":       0,
		"USER_LOGGED_IN":    1,
		"EXPIRED_28D_TIMER": 2,
	}
)

func (x GaiaPasswordReuse_PasswordCaptured_EventTrigger) Enum() *GaiaPasswordReuse_PasswordCaptured_EventTrigger {
	p := new(GaiaPasswordReuse_PasswordCaptured_EventTrigger)
	*p = x
	return p
}

func (x GaiaPasswordReuse_PasswordCaptured_EventTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GaiaPasswordReuse_PasswordCaptured_EventTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_gaia_password_reuse_proto_enumTypes[4].Descriptor()
}

func (GaiaPasswordReuse_PasswordCaptured_EventTrigger) Type() protoreflect.EnumType {
	return &file_gaia_password_reuse_proto_enumTypes[4]
}

func (x GaiaPasswordReuse_PasswordCaptured_EventTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GaiaPasswordReuse_PasswordCaptured_EventTrigger) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GaiaPasswordReuse_PasswordCaptured_EventTrigger(num)
	return nil
}

// Deprecated: Use GaiaPasswordReuse_PasswordCaptured_EventTrigger.Descriptor instead.
func (GaiaPasswordReuse_PasswordCaptured_EventTrigger) EnumDescriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 3, 0}
}

// User reused their GAIA password on another website.
type GaiaPasswordReuse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReuseDetected *GaiaPasswordReuse_PasswordReuseDetected `protobuf:"bytes,1,opt,name=reuse_detected,json=reuseDetected" json:"reuse_detected,omitempty"`
	// Logged when we try to detect whether the password was reused on a
	// Phishing or a Low-reputation site.
	ReuseLookup       *GaiaPasswordReuse_PasswordReuseLookup            `protobuf:"bytes,2,opt,name=reuse_lookup,json=reuseLookup" json:"reuse_lookup,omitempty"`
	DialogInteraction *GaiaPasswordReuse_PasswordReuseDialogInteraction `protobuf:"bytes,3,opt,name=dialog_interaction,json=dialogInteraction" json:"dialog_interaction,omitempty"`
	// Deprecated: Marked as deprecated in gaia_password_reuse.proto.
	PasswordCaptured *GaiaPasswordReuse_PasswordCaptured `protobuf:"bytes,4,opt,name=password_captured,json=passwordCaptured" json:"password_captured,omitempty"`
}

func (x *GaiaPasswordReuse) Reset() {
	*x = GaiaPasswordReuse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaia_password_reuse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaiaPasswordReuse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaiaPasswordReuse) ProtoMessage() {}

func (x *GaiaPasswordReuse) ProtoReflect() protoreflect.Message {
	mi := &file_gaia_password_reuse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaiaPasswordReuse.ProtoReflect.Descriptor instead.
func (*GaiaPasswordReuse) Descriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0}
}

func (x *GaiaPasswordReuse) GetReuseDetected() *GaiaPasswordReuse_PasswordReuseDetected {
	if x != nil {
		return x.ReuseDetected
	}
	return nil
}

func (x *GaiaPasswordReuse) GetReuseLookup() *GaiaPasswordReuse_PasswordReuseLookup {
	if x != nil {
		return x.ReuseLookup
	}
	return nil
}

func (x *GaiaPasswordReuse) GetDialogInteraction() *GaiaPasswordReuse_PasswordReuseDialogInteraction {
	if x != nil {
		return x.DialogInteraction
	}
	return nil
}

// Deprecated: Marked as deprecated in gaia_password_reuse.proto.
func (x *GaiaPasswordReuse) GetPasswordCaptured() *GaiaPasswordReuse_PasswordCaptured {
	if x != nil {
		return x.PasswordCaptured
	}
	return nil
}

// Logged when we detect a password re-use event on a non-GAIA site.
// If the user hasnâ€™t enabled SafeBrowsing, this will be the last event.
type GaiaPasswordReuse_PasswordReuseDetected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (x *GaiaPasswordReuse_PasswordReuseDetected) Reset() {
	*x = GaiaPasswordReuse_PasswordReuseDetected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaia_password_reuse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaiaPasswordReuse_PasswordReuseDetected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaiaPasswordReuse_PasswordReuseDetected) ProtoMessage() {}

func (x *GaiaPasswordReuse_PasswordReuseDetected) ProtoReflect() protoreflect.Message {
	mi := &file_gaia_password_reuse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaiaPasswordReuse_PasswordReuseDetected.ProtoReflect.Descriptor instead.
func (*GaiaPasswordReuse_PasswordReuseDetected) Descriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GaiaPasswordReuse_PasswordReuseDetected) GetStatus() *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GaiaPasswordReuse_PasswordReuseLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LookupResult *GaiaPasswordReuse_PasswordReuseLookup_LookupResult      `protobuf:"varint,1,opt,name=lookup_result,json=lookupResult,enum=sync_pb.GaiaPasswordReuse_PasswordReuseLookup_LookupResult" json:"lookup_result,omitempty"`
	Verdict      *GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict `protobuf:"varint,2,opt,name=verdict,enum=sync_pb.GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict" json:"verdict,omitempty"`
	// PhishGuard token that identifies the verdict on the server.
	VerdictToken []byte `protobuf:"bytes,3,opt,name=verdict_token,json=verdictToken" json:"verdict_token,omitempty"`
}

func (x *GaiaPasswordReuse_PasswordReuseLookup) Reset() {
	*x = GaiaPasswordReuse_PasswordReuseLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaia_password_reuse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaiaPasswordReuse_PasswordReuseLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaiaPasswordReuse_PasswordReuseLookup) ProtoMessage() {}

func (x *GaiaPasswordReuse_PasswordReuseLookup) ProtoReflect() protoreflect.Message {
	mi := &file_gaia_password_reuse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaiaPasswordReuse_PasswordReuseLookup.ProtoReflect.Descriptor instead.
func (*GaiaPasswordReuse_PasswordReuseLookup) Descriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GaiaPasswordReuse_PasswordReuseLookup) GetLookupResult() GaiaPasswordReuse_PasswordReuseLookup_LookupResult {
	if x != nil && x.LookupResult != nil {
		return *x.LookupResult
	}
	return GaiaPasswordReuse_PasswordReuseLookup_UNSPECIFIED
}

func (x *GaiaPasswordReuse_PasswordReuseLookup) GetVerdict() GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict {
	if x != nil && x.Verdict != nil {
		return *x.Verdict
	}
	return GaiaPasswordReuse_PasswordReuseLookup_VERDICT_UNSPECIFIED
}

func (x *GaiaPasswordReuse_PasswordReuseLookup) GetVerdictToken() []byte {
	if x != nil {
		return x.VerdictToken
	}
	return nil
}

// Logged when the user interacts with the warning UI shown to encourage
// password change if the site is Phishing or Low-reputation.
type GaiaPasswordReuse_PasswordReuseDialogInteraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InteractionResult *GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult `protobuf:"varint,1,opt,name=interaction_result,json=interactionResult,enum=sync_pb.GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult" json:"interaction_result,omitempty"`
}

func (x *GaiaPasswordReuse_PasswordReuseDialogInteraction) Reset() {
	*x = GaiaPasswordReuse_PasswordReuseDialogInteraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaia_password_reuse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaiaPasswordReuse_PasswordReuseDialogInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaiaPasswordReuse_PasswordReuseDialogInteraction) ProtoMessage() {}

func (x *GaiaPasswordReuse_PasswordReuseDialogInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_gaia_password_reuse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaiaPasswordReuse_PasswordReuseDialogInteraction.ProtoReflect.Descriptor instead.
func (*GaiaPasswordReuse_PasswordReuseDialogInteraction) Descriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 2}
}

func (x *GaiaPasswordReuse_PasswordReuseDialogInteraction) GetInteractionResult() GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult {
	if x != nil && x.InteractionResult != nil {
		return *x.InteractionResult
	}
	return GaiaPasswordReuse_PasswordReuseDialogInteraction_UNSPECIFIED
}

// TODO(markusheintz): Remove
// DEPRECATED: DO NOT USE!
// Logged when the user logs into Google, and at least once per 28d.
type GaiaPasswordReuse_PasswordCaptured struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTrigger *GaiaPasswordReuse_PasswordCaptured_EventTrigger `protobuf:"varint,1,opt,name=event_trigger,json=eventTrigger,enum=sync_pb.GaiaPasswordReuse_PasswordCaptured_EventTrigger" json:"event_trigger,omitempty"`
}

func (x *GaiaPasswordReuse_PasswordCaptured) Reset() {
	*x = GaiaPasswordReuse_PasswordCaptured{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaia_password_reuse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaiaPasswordReuse_PasswordCaptured) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaiaPasswordReuse_PasswordCaptured) ProtoMessage() {}

func (x *GaiaPasswordReuse_PasswordCaptured) ProtoReflect() protoreflect.Message {
	mi := &file_gaia_password_reuse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaiaPasswordReuse_PasswordCaptured.ProtoReflect.Descriptor instead.
func (*GaiaPasswordReuse_PasswordCaptured) Descriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 3}
}

func (x *GaiaPasswordReuse_PasswordCaptured) GetEventTrigger() GaiaPasswordReuse_PasswordCaptured_EventTrigger {
	if x != nil && x.EventTrigger != nil {
		return *x.EventTrigger
	}
	return GaiaPasswordReuse_PasswordCaptured_UNSPECIFIED
}

type GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is SafeBrowsing enabled?
	Enabled                         *bool                                                                           `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	SafeBrowsingReportingPopulation *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation `protobuf:"varint,2,opt,name=safe_browsing_reporting_population,json=safeBrowsingReportingPopulation,enum=sync_pb.GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation" json:"safe_browsing_reporting_population,omitempty"`
}

func (x *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus) Reset() {
	*x = GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaia_password_reuse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus) ProtoMessage() {}

func (x *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gaia_password_reuse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus.ProtoReflect.Descriptor instead.
func (*GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus) Descriptor() ([]byte, []int) {
	return file_gaia_password_reuse_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus) GetSafeBrowsingReportingPopulation() GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation {
	if x != nil && x.SafeBrowsingReportingPopulation != nil {
		return *x.SafeBrowsingReportingPopulation
	}
	return GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_REPORTING_POPULATION_UNSPECIFIED
}

var File_gaia_password_reuse_proto protoreflect.FileDescriptor

var file_gaia_password_reuse_proto_rawDesc = []byte{
	0x0a, 0x19, 0x67, 0x61, 0x69, 0x61, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x72, 0x65, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x22, 0xca, 0x0e, 0x0a, 0x11, 0x47, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x72, 0x65,
	0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x69,
	0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x75, 0x73, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x75, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x75, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x75, 0x73, 0x65,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x68, 0x0a, 0x12, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x69,
	0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5c, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x1a, 0xb6,
	0x03, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x47, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x75, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xbf, 0x02, 0x0a, 0x12, 0x53, 0x61, 0x66, 0x65, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xa4, 0x01, 0x0a, 0x22, 0x73, 0x61, 0x66, 0x65, 0x5f,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x61,
	0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x73, 0x61,
	0x66, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x43, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x1a, 0x8d, 0x04, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12,
	0x60, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x47, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x5a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x69,
	0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x48, 0x49, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x52, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52,
	0x49, 0x53, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x48, 0x49,
	0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x4f, 0x46,
	0x46, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x07, 0x22, 0x58, 0x0a,
	0x11, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x41, 0x46, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x50,
	0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x49,
	0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0xb7, 0x02, 0x0a, 0x1e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x47, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x49, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41,
	0x4b, 0x45, 0x4e, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10,
	0x04, 0x1a, 0xbd, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x69, 0x61, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c,
	0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x38, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10,
	0x02, 0x42, 0x36, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03, 0x50, 0x01, 0x5a, 0x09,
	0x2e, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_gaia_password_reuse_proto_rawDescOnce sync.Once
	file_gaia_password_reuse_proto_rawDescData = file_gaia_password_reuse_proto_rawDesc
)

func file_gaia_password_reuse_proto_rawDescGZIP() []byte {
	file_gaia_password_reuse_proto_rawDescOnce.Do(func() {
		file_gaia_password_reuse_proto_rawDescData = protoimpl.X.CompressGZIP(file_gaia_password_reuse_proto_rawDescData)
	})
	return file_gaia_password_reuse_proto_rawDescData
}

var file_gaia_password_reuse_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_gaia_password_reuse_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_gaia_password_reuse_proto_goTypes = []interface{}{
	(GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation)(0), // 0: sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation
	(GaiaPasswordReuse_PasswordReuseLookup_LookupResult)(0),                             // 1: sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult
	(GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict)(0),                        // 2: sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict
	(GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult)(0),             // 3: sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult
	(GaiaPasswordReuse_PasswordCaptured_EventTrigger)(0),                                // 4: sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger
	(*GaiaPasswordReuse)(nil),                                          // 5: sync_pb.GaiaPasswordReuse
	(*GaiaPasswordReuse_PasswordReuseDetected)(nil),                    // 6: sync_pb.GaiaPasswordReuse.PasswordReuseDetected
	(*GaiaPasswordReuse_PasswordReuseLookup)(nil),                      // 7: sync_pb.GaiaPasswordReuse.PasswordReuseLookup
	(*GaiaPasswordReuse_PasswordReuseDialogInteraction)(nil),           // 8: sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction
	(*GaiaPasswordReuse_PasswordCaptured)(nil),                         // 9: sync_pb.GaiaPasswordReuse.PasswordCaptured
	(*GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus)(nil), // 10: sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus
}
var file_gaia_password_reuse_proto_depIdxs = []int32{
	6,  // 0: sync_pb.GaiaPasswordReuse.reuse_detected:type_name -> sync_pb.GaiaPasswordReuse.PasswordReuseDetected
	7,  // 1: sync_pb.GaiaPasswordReuse.reuse_lookup:type_name -> sync_pb.GaiaPasswordReuse.PasswordReuseLookup
	8,  // 2: sync_pb.GaiaPasswordReuse.dialog_interaction:type_name -> sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction
	9,  // 3: sync_pb.GaiaPasswordReuse.password_captured:type_name -> sync_pb.GaiaPasswordReuse.PasswordCaptured
	10, // 4: sync_pb.GaiaPasswordReuse.PasswordReuseDetected.status:type_name -> sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus
	1,  // 5: sync_pb.GaiaPasswordReuse.PasswordReuseLookup.lookup_result:type_name -> sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult
	2,  // 6: sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict:type_name -> sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict
	3,  // 7: sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.interaction_result:type_name -> sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult
	4,  // 8: sync_pb.GaiaPasswordReuse.PasswordCaptured.event_trigger:type_name -> sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger
	0,  // 9: sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.safe_browsing_reporting_population:type_name -> sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_gaia_password_reuse_proto_init() }
func file_gaia_password_reuse_proto_init() {
	if File_gaia_password_reuse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gaia_password_reuse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaiaPasswordReuse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaia_password_reuse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaiaPasswordReuse_PasswordReuseDetected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaia_password_reuse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaiaPasswordReuse_PasswordReuseLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaia_password_reuse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaiaPasswordReuse_PasswordReuseDialogInteraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaia_password_reuse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaiaPasswordReuse_PasswordCaptured); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaia_password_reuse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gaia_password_reuse_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gaia_password_reuse_proto_goTypes,
		DependencyIndexes: file_gaia_password_reuse_proto_depIdxs,
		EnumInfos:         file_gaia_password_reuse_proto_enumTypes,
		MessageInfos:      file_gaia_password_reuse_proto_msgTypes,
	}.Build()
	File_gaia_password_reuse_proto = out.File
	file_gaia_password_reuse_proto_rawDesc = nil
	file_gaia_password_reuse_proto_goTypes = nil
	file_gaia_password_reuse_proto_depIdxs = nil
}
