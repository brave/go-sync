// Copyright 2012 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for nigori keys.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: nigori_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of the passphrase required to decrypt |encryption_keybag|.
type NigoriSpecifics_PassphraseType int32

const (
	// Proto enums should begin with an 'unknown' value for switch statements,
	// unknown fields, etc.
	NigoriSpecifics_UNKNOWN NigoriSpecifics_PassphraseType = 0
	// Gaia-based encryption passphrase. Legacy.
	NigoriSpecifics_IMPLICIT_PASSPHRASE NigoriSpecifics_PassphraseType = 1
	// Keystore key encryption passphrase. Uses |keystore_bootstrap| to
	// decrypt |encryption_keybag|.
	NigoriSpecifics_KEYSTORE_PASSPHRASE NigoriSpecifics_PassphraseType = 2
	// Previous Gaia-based passphrase frozen and treated as a custom passphrase.
	NigoriSpecifics_FROZEN_IMPLICIT_PASSPHRASE NigoriSpecifics_PassphraseType = 3
	// User provided custom passphrase.
	NigoriSpecifics_CUSTOM_PASSPHRASE NigoriSpecifics_PassphraseType = 4
	// Encryption key provided by a trusted vault.
	NigoriSpecifics_TRUSTED_VAULT_PASSPHRASE NigoriSpecifics_PassphraseType = 5
)

// Enum value maps for NigoriSpecifics_PassphraseType.
var (
	NigoriSpecifics_PassphraseType_name = map[int32]string{
		0: "UNKNOWN",
		1: "IMPLICIT_PASSPHRASE",
		2: "KEYSTORE_PASSPHRASE",
		3: "FROZEN_IMPLICIT_PASSPHRASE",
		4: "CUSTOM_PASSPHRASE",
		5: "TRUSTED_VAULT_PASSPHRASE",
	}
	NigoriSpecifics_PassphraseType_value = map[string]int32{
		"UNKNOWN":                    0,
		"IMPLICIT_PASSPHRASE":        1,
		"KEYSTORE_PASSPHRASE":        2,
		"FROZEN_IMPLICIT_PASSPHRASE": 3,
		"CUSTOM_PASSPHRASE":          4,
		"TRUSTED_VAULT_PASSPHRASE":   5,
	}
)

func (x NigoriSpecifics_PassphraseType) Enum() *NigoriSpecifics_PassphraseType {
	p := new(NigoriSpecifics_PassphraseType)
	*p = x
	return p
}

func (x NigoriSpecifics_PassphraseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NigoriSpecifics_PassphraseType) Descriptor() protoreflect.EnumDescriptor {
	return file_nigori_specifics_proto_enumTypes[0].Descriptor()
}

func (NigoriSpecifics_PassphraseType) Type() protoreflect.EnumType {
	return &file_nigori_specifics_proto_enumTypes[0]
}

func (x NigoriSpecifics_PassphraseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NigoriSpecifics_PassphraseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NigoriSpecifics_PassphraseType(num)
	return nil
}

// Deprecated: Use NigoriSpecifics_PassphraseType.Descriptor instead.
func (NigoriSpecifics_PassphraseType) EnumDescriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{5, 0}
}

type NigoriSpecifics_KeyDerivationMethod int32

const (
	// This comes from a <= M69 client, who does not know about the field
	// (but implicitly uses PBKDF2_HMAC_SHA1_1003).
	NigoriSpecifics_UNSPECIFIED NigoriSpecifics_KeyDerivationMethod = 0
	// PBKDF2-HMAC-SHA1 with 1003 iterations and constant hardcoded salt. Was
	// implicitly used in <= M69.
	NigoriSpecifics_PBKDF2_HMAC_SHA1_1003 NigoriSpecifics_KeyDerivationMethod = 1
	// scrypt with N = 2^13, r = 8, p = 11 and random salt. Was added in M70.
	NigoriSpecifics_SCRYPT_8192_8_11 NigoriSpecifics_KeyDerivationMethod = 2
)

// Enum value maps for NigoriSpecifics_KeyDerivationMethod.
var (
	NigoriSpecifics_KeyDerivationMethod_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PBKDF2_HMAC_SHA1_1003",
		2: "SCRYPT_8192_8_11",
	}
	NigoriSpecifics_KeyDerivationMethod_value = map[string]int32{
		"UNSPECIFIED":           0,
		"PBKDF2_HMAC_SHA1_1003": 1,
		"SCRYPT_8192_8_11":      2,
	}
)

func (x NigoriSpecifics_KeyDerivationMethod) Enum() *NigoriSpecifics_KeyDerivationMethod {
	p := new(NigoriSpecifics_KeyDerivationMethod)
	*p = x
	return p
}

func (x NigoriSpecifics_KeyDerivationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NigoriSpecifics_KeyDerivationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_nigori_specifics_proto_enumTypes[1].Descriptor()
}

func (NigoriSpecifics_KeyDerivationMethod) Type() protoreflect.EnumType {
	return &file_nigori_specifics_proto_enumTypes[1]
}

func (x NigoriSpecifics_KeyDerivationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NigoriSpecifics_KeyDerivationMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NigoriSpecifics_KeyDerivationMethod(num)
	return nil
}

// Deprecated: Use NigoriSpecifics_KeyDerivationMethod.Descriptor instead.
func (NigoriSpecifics_KeyDerivationMethod) EnumDescriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{5, 1}
}

type NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState int32

const (
	NigoriSpecifics_AutoUpgradeDebugInfo_STATE_UNSPECIFIED NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState = 0
	NigoriSpecifics_AutoUpgradeDebugInfo_AUTO_UPGRADED     NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState = 1
	NigoriSpecifics_AutoUpgradeDebugInfo_CONTROL           NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState = 2
	NigoriSpecifics_AutoUpgradeDebugInfo_VALIDATION        NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState = 3
)

// Enum value maps for NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState.
var (
	NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "AUTO_UPGRADED",
		2: "CONTROL",
		3: "VALIDATION",
	}
	NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"AUTO_UPGRADED":     1,
		"CONTROL":           2,
		"VALIDATION":        3,
	}
)

func (x NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState) Enum() *NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState {
	p := new(NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState)
	*p = x
	return p
}

func (x NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState) Descriptor() protoreflect.EnumDescriptor {
	return file_nigori_specifics_proto_enumTypes[2].Descriptor()
}

func (NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState) Type() protoreflect.EnumType {
	return &file_nigori_specifics_proto_enumTypes[2]
}

func (x NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState(num)
	return nil
}

// Deprecated: Use NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState.Descriptor instead.
func (NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState) EnumDescriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{5, 0, 0}
}

// Each eligibility group can be ramped in different stages (e.g. 1%,
// 10%, 100%).
// Every ramp stage is differentiated with its own entry in the enum.
type NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup int32

const (
	NigoriSpecifics_AutoUpgradeDebugInfo_GROUP_UNSPECIFIED NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup = 0
	NigoriSpecifics_AutoUpgradeDebugInfo_TEST_GROUP_1      NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup = 1
)

// Enum value maps for NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup.
var (
	NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup_name = map[int32]string{
		0: "GROUP_UNSPECIFIED",
		1: "TEST_GROUP_1",
	}
	NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup_value = map[string]int32{
		"GROUP_UNSPECIFIED": 0,
		"TEST_GROUP_1":      1,
	}
)

func (x NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup) Enum() *NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup {
	p := new(NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup)
	*p = x
	return p
}

func (x NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_nigori_specifics_proto_enumTypes[3].Descriptor()
}

func (NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup) Type() protoreflect.EnumType {
	return &file_nigori_specifics_proto_enumTypes[3]
}

func (x NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup(num)
	return nil
}

// Deprecated: Use NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup.Descriptor instead.
func (NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup) EnumDescriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{5, 0, 1}
}

type NigoriKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note that M78 and before rely on the name being populated, at least for
	// the main encrypted keybag within NigoriSpecifics.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	DeprecatedName *string `protobuf:"bytes,1,opt,name=deprecated_name,json=deprecatedName" json:"deprecated_name,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	DeprecatedUserKey []byte `protobuf:"bytes,2,opt,name=deprecated_user_key,json=deprecatedUserKey" json:"deprecated_user_key,omitempty"`
	EncryptionKey     []byte `protobuf:"bytes,3,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	MacKey            []byte `protobuf:"bytes,4,opt,name=mac_key,json=macKey" json:"mac_key,omitempty"`
}

func (x *NigoriKey) Reset() {
	*x = NigoriKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nigori_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NigoriKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NigoriKey) ProtoMessage() {}

func (x *NigoriKey) ProtoReflect() protoreflect.Message {
	mi := &file_nigori_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NigoriKey.ProtoReflect.Descriptor instead.
func (*NigoriKey) Descriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriKey) GetDeprecatedName() string {
	if x != nil && x.DeprecatedName != nil {
		return *x.DeprecatedName
	}
	return ""
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriKey) GetDeprecatedUserKey() []byte {
	if x != nil {
		return x.DeprecatedUserKey
	}
	return nil
}

func (x *NigoriKey) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *NigoriKey) GetMacKey() []byte {
	if x != nil {
		return x.MacKey
	}
	return nil
}

type CrossUserSharingPrivateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key version, used for key rotation.
	Version *int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Private key on Curve25519 (32 bytes).
	X25519PrivateKey []byte `protobuf:"bytes,2,opt,name=x25519_private_key,json=x25519PrivateKey" json:"x25519_private_key,omitempty"`
}

func (x *CrossUserSharingPrivateKey) Reset() {
	*x = CrossUserSharingPrivateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nigori_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossUserSharingPrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossUserSharingPrivateKey) ProtoMessage() {}

func (x *CrossUserSharingPrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_nigori_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossUserSharingPrivateKey.ProtoReflect.Descriptor instead.
func (*CrossUserSharingPrivateKey) Descriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{1}
}

func (x *CrossUserSharingPrivateKey) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CrossUserSharingPrivateKey) GetX25519PrivateKey() []byte {
	if x != nil {
		return x.X25519PrivateKey
	}
	return nil
}

type CrossUserSharingPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key version, used for key rotation and consensus.
	Version *int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Public key on Curve25519 (32 bytes).
	X25519PublicKey []byte `protobuf:"bytes,2,opt,name=x25519_public_key,json=x25519PublicKey" json:"x25519_public_key,omitempty"`
}

func (x *CrossUserSharingPublicKey) Reset() {
	*x = CrossUserSharingPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nigori_specifics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossUserSharingPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossUserSharingPublicKey) ProtoMessage() {}

func (x *CrossUserSharingPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_nigori_specifics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossUserSharingPublicKey.ProtoReflect.Descriptor instead.
func (*CrossUserSharingPublicKey) Descriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{2}
}

func (x *CrossUserSharingPublicKey) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CrossUserSharingPublicKey) GetX25519PublicKey() []byte {
	if x != nil {
		return x.X25519PublicKey
	}
	return nil
}

type EncryptionKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used for encrypting data in the user's account.
	Key []*NigoriKey `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
	// Used for encrypting/authenticating using Public-private cryptography
	// primarily across user accounts, e.g. sharing invitations.
	CrossUserSharingPrivateKey []*CrossUserSharingPrivateKey `protobuf:"bytes,3,rep,name=cross_user_sharing_private_key,json=crossUserSharingPrivateKey" json:"cross_user_sharing_private_key,omitempty"`
}

func (x *EncryptionKeys) Reset() {
	*x = EncryptionKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nigori_specifics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionKeys) ProtoMessage() {}

func (x *EncryptionKeys) ProtoReflect() protoreflect.Message {
	mi := &file_nigori_specifics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionKeys.ProtoReflect.Descriptor instead.
func (*EncryptionKeys) Descriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{3}
}

func (x *EncryptionKeys) GetKey() []*NigoriKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EncryptionKeys) GetCrossUserSharingPrivateKey() []*CrossUserSharingPrivateKey {
	if x != nil {
		return x.CrossUserSharingPrivateKey
	}
	return nil
}

// Deprecated: use EncryptionKeys instead.
//
// Deprecated: Marked as deprecated in nigori_specifics.proto.
type NigoriKeyBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used for encrypting data in the user's account.
	Key []*NigoriKey `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
}

func (x *NigoriKeyBag) Reset() {
	*x = NigoriKeyBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nigori_specifics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NigoriKeyBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NigoriKeyBag) ProtoMessage() {}

func (x *NigoriKeyBag) ProtoReflect() protoreflect.Message {
	mi := &file_nigori_specifics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NigoriKeyBag.ProtoReflect.Descriptor instead.
func (*NigoriKeyBag) Descriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{4}
}

func (x *NigoriKeyBag) GetKey() []*NigoriKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// Properties of nigori sync object.
type NigoriSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encrypted proto of type EncryptionKeys.
	EncryptionKeybag *EncryptedData `protobuf:"bytes,1,opt,name=encryption_keybag,json=encryptionKeybag" json:"encryption_keybag,omitempty"`
	// Once keystore migration is performed, we have to freeze the keybag so that
	// older clients (that don't support keystore encryption) do not attempt to
	// update the keybag.
	// Previously |using_explicit_passphrase|.
	KeybagIsFrozen *bool `protobuf:"varint,2,opt,name=keybag_is_frozen,json=keybagIsFrozen" json:"keybag_is_frozen,omitempty"`
	// Booleans corresponding to whether a datatype should be encrypted.
	// Passwords and Wi-Fi configurations are always encrypted, so we don't need
	// a field here.  History delete directives need to be consumable by the
	// server, and thus can't be encrypted.
	// USS clients don't read these values, datatypes are either always encrypted,
	// never encrypted or encrypted when |encrypt_everything| set to true.
	// TODO(crbug.com/1360022): complete deprecation of encrypt_* fields (replace
	// fields with reserved) once <M82 clients aren't supported.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptBookmarks *bool `protobuf:"varint,13,opt,name=encrypt_bookmarks,json=encryptBookmarks" json:"encrypt_bookmarks,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptPreferences *bool `protobuf:"varint,14,opt,name=encrypt_preferences,json=encryptPreferences" json:"encrypt_preferences,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptAutofillProfile *bool `protobuf:"varint,15,opt,name=encrypt_autofill_profile,json=encryptAutofillProfile" json:"encrypt_autofill_profile,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptAutofill *bool `protobuf:"varint,16,opt,name=encrypt_autofill,json=encryptAutofill" json:"encrypt_autofill,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptThemes *bool `protobuf:"varint,17,opt,name=encrypt_themes,json=encryptThemes" json:"encrypt_themes,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptTypedUrls *bool `protobuf:"varint,18,opt,name=encrypt_typed_urls,json=encryptTypedUrls" json:"encrypt_typed_urls,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptExtensions *bool `protobuf:"varint,19,opt,name=encrypt_extensions,json=encryptExtensions" json:"encrypt_extensions,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptSessions *bool `protobuf:"varint,20,opt,name=encrypt_sessions,json=encryptSessions" json:"encrypt_sessions,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptApps *bool `protobuf:"varint,21,opt,name=encrypt_apps,json=encryptApps" json:"encrypt_apps,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptSearchEngines *bool `protobuf:"varint,22,opt,name=encrypt_search_engines,json=encryptSearchEngines" json:"encrypt_search_engines,omitempty"`
	// If true, all current and future datatypes will be encrypted.
	EncryptEverything *bool `protobuf:"varint,24,opt,name=encrypt_everything,json=encryptEverything" json:"encrypt_everything,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptExtensionSettings *bool `protobuf:"varint,25,opt,name=encrypt_extension_settings,json=encryptExtensionSettings" json:"encrypt_extension_settings,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptAppNotifications *bool `protobuf:"varint,26,opt,name=encrypt_app_notifications,json=encryptAppNotifications" json:"encrypt_app_notifications,omitempty"`
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptAppSettings *bool `protobuf:"varint,27,opt,name=encrypt_app_settings,json=encryptAppSettings" json:"encrypt_app_settings,omitempty"`
	// Enable syncing favicons as part of tab sync.
	SyncTabFavicons *bool `protobuf:"varint,29,opt,name=sync_tab_favicons,json=syncTabFavicons" json:"sync_tab_favicons,omitempty"`
	// An |int| field is used instead of enum PassphraseType so we can better
	// handle unknown values coming from later versions. Prior to M77, this was an
	// enum so old clients will assume IMPLICIT_PASSPHRASE for values greater than
	// 4.
	PassphraseType *int32 `protobuf:"varint,30,opt,name=passphrase_type,json=passphraseType,def=1" json:"passphrase_type,omitempty"`
	// The keystore decryptor token blob. Encrypted with the keystore key, and
	// contains the encryption key used to decrypt |encryption_keybag|.
	// Only set if passphrase_state == KEYSTORE_PASSPHRASE.
	KeystoreDecryptorToken *EncryptedData `protobuf:"bytes,31,opt,name=keystore_decryptor_token,json=keystoreDecryptorToken" json:"keystore_decryptor_token,omitempty"`
	// The time (in milliseconds since Unix epoch) at which the keystore migration
	// was performed.
	KeystoreMigrationTime *int64 `protobuf:"varint,32,opt,name=keystore_migration_time,json=keystoreMigrationTime" json:"keystore_migration_time,omitempty"`
	// The time (in milliseconds since Unix epoch) at which a custom passphrase
	// was set. Note: this field may not be set if the custom passphrase was
	// applied before this field was introduced.
	CustomPassphraseTime *int64 `protobuf:"varint,33,opt,name=custom_passphrase_time,json=customPassphraseTime" json:"custom_passphrase_time,omitempty"`
	// Boolean corresponding to whether custom spelling dictionary should be
	// encrypted.
	EncryptDictionary *bool `protobuf:"varint,34,opt,name=encrypt_dictionary,json=encryptDictionary" json:"encrypt_dictionary,omitempty"`
	// Boolean corresponding to whether app list items should be encrypted.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptAppList *bool `protobuf:"varint,38,opt,name=encrypt_app_list,json=encryptAppList" json:"encrypt_app_list,omitempty"`
	// Boolean corresponding to whether usage count and last use date of Wallet
	// data should be encrypted.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptAutofillWalletMetadata *bool `protobuf:"varint,39,opt,name=encrypt_autofill_wallet_metadata,json=encryptAutofillWalletMetadata" json:"encrypt_autofill_wallet_metadata,omitempty"`
	// Boolean indicating whether this node was originally missing a
	// |keystore_migration_time| field value, and was fixed on the server by
	// giving the field a value.
	// THIS FIELD SHOULD ONLY BE SET BY THE SERVER.
	ServerOnlyWasMissingKeystoreMigrationTime *bool `protobuf:"varint,40,opt,name=server_only_was_missing_keystore_migration_time,json=serverOnlyWasMissingKeystoreMigrationTime" json:"server_only_was_missing_keystore_migration_time,omitempty"`
	// Boolean corresponding to whether arc pakcage items should be encrypted.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptArcPackage *bool `protobuf:"varint,41,opt,name=encrypt_arc_package,json=encryptArcPackage" json:"encrypt_arc_package,omitempty"`
	// Boolean corresponding to whether printer items should be encrypted.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptPrinters *bool `protobuf:"varint,42,opt,name=encrypt_printers,json=encryptPrinters" json:"encrypt_printers,omitempty"`
	// Boolean corresponding to whether reading list items should be encrypted.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptReadingList *bool `protobuf:"varint,43,opt,name=encrypt_reading_list,json=encryptReadingList" json:"encrypt_reading_list,omitempty"`
	// ID of the method used to derive the encryption key from a custom
	// passphrase. Should be set only when |passphrase_type| is CUSTOM_PASSPHRASE
	// and only based on CustomPassphraseKeyDerivationMethod. This field has been
	// added in M70. All previous versions just ignore it, attempt to use
	// PBKDF2_HMAC_SHA1_1003 and, thus, reject any passphrase if a different
	// method has been used. The default corresponds to UNSPECIFIED. An |int|
	// field is used so we can detect unknown values coming from later versions.
	CustomPassphraseKeyDerivationMethod *int32 `protobuf:"varint,45,opt,name=custom_passphrase_key_derivation_method,json=customPassphraseKeyDerivationMethod,def=0" json:"custom_passphrase_key_derivation_method,omitempty"`
	// Base64-encoded salt used for the derivation of the key from the custom
	// passphrase. Valid only if custom_passphrase_key_derivation_method ==
	// SCRYPT_8192_8_11, ignored in other cases.
	CustomPassphraseKeyDerivationSalt *string `protobuf:"bytes,46,opt,name=custom_passphrase_key_derivation_salt,json=customPassphraseKeyDerivationSalt" json:"custom_passphrase_key_derivation_salt,omitempty"`
	// Boolean corresponding to whether send tab should be encrypted.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptSendTabToSelf *bool `protobuf:"varint,47,opt,name=encrypt_send_tab_to_self,json=encryptSendTabToSelf" json:"encrypt_send_tab_to_self,omitempty"`
	// Boolean corresponding to whether Web Apps data should be encrypted.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptWebApps *bool `protobuf:"varint,48,opt,name=encrypt_web_apps,json=encryptWebApps" json:"encrypt_web_apps,omitempty"`
	// Boolean corresponding to whether OS preferences should be encrypted.
	//
	// Deprecated: Marked as deprecated in nigori_specifics.proto.
	EncryptOsPreferences  *bool                                  `protobuf:"varint,49,opt,name=encrypt_os_preferences,json=encryptOsPreferences" json:"encrypt_os_preferences,omitempty"`
	TrustedVaultDebugInfo *NigoriSpecifics_TrustedVaultDebugInfo `protobuf:"bytes,50,opt,name=trusted_vault_debug_info,json=trustedVaultDebugInfo" json:"trusted_vault_debug_info,omitempty"`
	// Current cross user sharing Public-key to expose in server registry
	// for sharing offers outside account boundary.
	CrossUserSharingPublicKey *CrossUserSharingPublicKey `protobuf:"bytes,53,opt,name=cross_user_sharing_public_key,json=crossUserSharingPublicKey" json:"cross_user_sharing_public_key,omitempty"`
}

// Default values for NigoriSpecifics fields.
const (
	Default_NigoriSpecifics_PassphraseType                      = int32(1)
	Default_NigoriSpecifics_CustomPassphraseKeyDerivationMethod = int32(0)
)

func (x *NigoriSpecifics) Reset() {
	*x = NigoriSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nigori_specifics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NigoriSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NigoriSpecifics) ProtoMessage() {}

func (x *NigoriSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_nigori_specifics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NigoriSpecifics.ProtoReflect.Descriptor instead.
func (*NigoriSpecifics) Descriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{5}
}

func (x *NigoriSpecifics) GetEncryptionKeybag() *EncryptedData {
	if x != nil {
		return x.EncryptionKeybag
	}
	return nil
}

func (x *NigoriSpecifics) GetKeybagIsFrozen() bool {
	if x != nil && x.KeybagIsFrozen != nil {
		return *x.KeybagIsFrozen
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptBookmarks() bool {
	if x != nil && x.EncryptBookmarks != nil {
		return *x.EncryptBookmarks
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptPreferences() bool {
	if x != nil && x.EncryptPreferences != nil {
		return *x.EncryptPreferences
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptAutofillProfile() bool {
	if x != nil && x.EncryptAutofillProfile != nil {
		return *x.EncryptAutofillProfile
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptAutofill() bool {
	if x != nil && x.EncryptAutofill != nil {
		return *x.EncryptAutofill
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptThemes() bool {
	if x != nil && x.EncryptThemes != nil {
		return *x.EncryptThemes
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptTypedUrls() bool {
	if x != nil && x.EncryptTypedUrls != nil {
		return *x.EncryptTypedUrls
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptExtensions() bool {
	if x != nil && x.EncryptExtensions != nil {
		return *x.EncryptExtensions
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptSessions() bool {
	if x != nil && x.EncryptSessions != nil {
		return *x.EncryptSessions
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptApps() bool {
	if x != nil && x.EncryptApps != nil {
		return *x.EncryptApps
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptSearchEngines() bool {
	if x != nil && x.EncryptSearchEngines != nil {
		return *x.EncryptSearchEngines
	}
	return false
}

func (x *NigoriSpecifics) GetEncryptEverything() bool {
	if x != nil && x.EncryptEverything != nil {
		return *x.EncryptEverything
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptExtensionSettings() bool {
	if x != nil && x.EncryptExtensionSettings != nil {
		return *x.EncryptExtensionSettings
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptAppNotifications() bool {
	if x != nil && x.EncryptAppNotifications != nil {
		return *x.EncryptAppNotifications
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptAppSettings() bool {
	if x != nil && x.EncryptAppSettings != nil {
		return *x.EncryptAppSettings
	}
	return false
}

func (x *NigoriSpecifics) GetSyncTabFavicons() bool {
	if x != nil && x.SyncTabFavicons != nil {
		return *x.SyncTabFavicons
	}
	return false
}

func (x *NigoriSpecifics) GetPassphraseType() int32 {
	if x != nil && x.PassphraseType != nil {
		return *x.PassphraseType
	}
	return Default_NigoriSpecifics_PassphraseType
}

func (x *NigoriSpecifics) GetKeystoreDecryptorToken() *EncryptedData {
	if x != nil {
		return x.KeystoreDecryptorToken
	}
	return nil
}

func (x *NigoriSpecifics) GetKeystoreMigrationTime() int64 {
	if x != nil && x.KeystoreMigrationTime != nil {
		return *x.KeystoreMigrationTime
	}
	return 0
}

func (x *NigoriSpecifics) GetCustomPassphraseTime() int64 {
	if x != nil && x.CustomPassphraseTime != nil {
		return *x.CustomPassphraseTime
	}
	return 0
}

func (x *NigoriSpecifics) GetEncryptDictionary() bool {
	if x != nil && x.EncryptDictionary != nil {
		return *x.EncryptDictionary
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptAppList() bool {
	if x != nil && x.EncryptAppList != nil {
		return *x.EncryptAppList
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptAutofillWalletMetadata() bool {
	if x != nil && x.EncryptAutofillWalletMetadata != nil {
		return *x.EncryptAutofillWalletMetadata
	}
	return false
}

func (x *NigoriSpecifics) GetServerOnlyWasMissingKeystoreMigrationTime() bool {
	if x != nil && x.ServerOnlyWasMissingKeystoreMigrationTime != nil {
		return *x.ServerOnlyWasMissingKeystoreMigrationTime
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptArcPackage() bool {
	if x != nil && x.EncryptArcPackage != nil {
		return *x.EncryptArcPackage
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptPrinters() bool {
	if x != nil && x.EncryptPrinters != nil {
		return *x.EncryptPrinters
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptReadingList() bool {
	if x != nil && x.EncryptReadingList != nil {
		return *x.EncryptReadingList
	}
	return false
}

func (x *NigoriSpecifics) GetCustomPassphraseKeyDerivationMethod() int32 {
	if x != nil && x.CustomPassphraseKeyDerivationMethod != nil {
		return *x.CustomPassphraseKeyDerivationMethod
	}
	return Default_NigoriSpecifics_CustomPassphraseKeyDerivationMethod
}

func (x *NigoriSpecifics) GetCustomPassphraseKeyDerivationSalt() string {
	if x != nil && x.CustomPassphraseKeyDerivationSalt != nil {
		return *x.CustomPassphraseKeyDerivationSalt
	}
	return ""
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptSendTabToSelf() bool {
	if x != nil && x.EncryptSendTabToSelf != nil {
		return *x.EncryptSendTabToSelf
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptWebApps() bool {
	if x != nil && x.EncryptWebApps != nil {
		return *x.EncryptWebApps
	}
	return false
}

// Deprecated: Marked as deprecated in nigori_specifics.proto.
func (x *NigoriSpecifics) GetEncryptOsPreferences() bool {
	if x != nil && x.EncryptOsPreferences != nil {
		return *x.EncryptOsPreferences
	}
	return false
}

func (x *NigoriSpecifics) GetTrustedVaultDebugInfo() *NigoriSpecifics_TrustedVaultDebugInfo {
	if x != nil {
		return x.TrustedVaultDebugInfo
	}
	return nil
}

func (x *NigoriSpecifics) GetCrossUserSharingPublicKey() *CrossUserSharingPublicKey {
	if x != nil {
		return x.CrossUserSharingPublicKey
	}
	return nil
}

// Information useful for auto-upgrade to trusted vault.
type NigoriSpecifics_AutoUpgradeDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current state of an account after it was processed by auto-upgrade.
	AutoUpgradeState *NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState `protobuf:"varint,1,opt,name=auto_upgrade_state,json=autoUpgradeState,enum=sync_pb.NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState" json:"auto_upgrade_state,omitempty"`
	// ID of eligibility group account belongs to. Only use IDs defined
	// within EligibilityGroup enum.
	EligibilityGroupId *int32 `protobuf:"varint,2,opt,name=eligibility_group_id,json=eligibilityGroupId" json:"eligibility_group_id,omitempty"`
}

func (x *NigoriSpecifics_AutoUpgradeDebugInfo) Reset() {
	*x = NigoriSpecifics_AutoUpgradeDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nigori_specifics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NigoriSpecifics_AutoUpgradeDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NigoriSpecifics_AutoUpgradeDebugInfo) ProtoMessage() {}

func (x *NigoriSpecifics_AutoUpgradeDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nigori_specifics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NigoriSpecifics_AutoUpgradeDebugInfo.ProtoReflect.Descriptor instead.
func (*NigoriSpecifics_AutoUpgradeDebugInfo) Descriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{5, 0}
}

func (x *NigoriSpecifics_AutoUpgradeDebugInfo) GetAutoUpgradeState() NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState {
	if x != nil && x.AutoUpgradeState != nil {
		return *x.AutoUpgradeState
	}
	return NigoriSpecifics_AutoUpgradeDebugInfo_STATE_UNSPECIFIED
}

func (x *NigoriSpecifics_AutoUpgradeDebugInfo) GetEligibilityGroupId() int32 {
	if x != nil && x.EligibilityGroupId != nil {
		return *x.EligibilityGroupId
	}
	return 0
}

// Some debug-only fields for passphrase type TRUSTED_VAULT_PASSPHRASE.
type NigoriSpecifics_TrustedVaultDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time (in milliseconds since Unix epoch) at which the trusted vault
	// migration was performed.
	MigrationTime *int64 `protobuf:"varint,1,opt,name=migration_time,json=migrationTime" json:"migration_time,omitempty"`
	// The version (aka key epoch) corresponding to the Nigori keybag.
	KeyVersion *int32 `protobuf:"varint,2,opt,name=key_version,json=keyVersion" json:"key_version,omitempty"`
	// DebugInfo written by a process that auto-upgrades to trusted vault.
	AutoUpgradeDebugInfo *NigoriSpecifics_AutoUpgradeDebugInfo `protobuf:"bytes,3,opt,name=auto_upgrade_debug_info,json=autoUpgradeDebugInfo" json:"auto_upgrade_debug_info,omitempty"`
	// The time (in milliseconds since Unix epoch) last update of the auto
	// upgrade debug info was made.
	AutoUpgradeDebugInfoModificationTimeUnixEpochMillis *int64 `protobuf:"varint,4,opt,name=auto_upgrade_debug_info_modification_time_unix_epoch_millis,json=autoUpgradeDebugInfoModificationTimeUnixEpochMillis" json:"auto_upgrade_debug_info_modification_time_unix_epoch_millis,omitempty"`
}

func (x *NigoriSpecifics_TrustedVaultDebugInfo) Reset() {
	*x = NigoriSpecifics_TrustedVaultDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nigori_specifics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NigoriSpecifics_TrustedVaultDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NigoriSpecifics_TrustedVaultDebugInfo) ProtoMessage() {}

func (x *NigoriSpecifics_TrustedVaultDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nigori_specifics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NigoriSpecifics_TrustedVaultDebugInfo.ProtoReflect.Descriptor instead.
func (*NigoriSpecifics_TrustedVaultDebugInfo) Descriptor() ([]byte, []int) {
	return file_nigori_specifics_proto_rawDescGZIP(), []int{5, 1}
}

func (x *NigoriSpecifics_TrustedVaultDebugInfo) GetMigrationTime() int64 {
	if x != nil && x.MigrationTime != nil {
		return *x.MigrationTime
	}
	return 0
}

func (x *NigoriSpecifics_TrustedVaultDebugInfo) GetKeyVersion() int32 {
	if x != nil && x.KeyVersion != nil {
		return *x.KeyVersion
	}
	return 0
}

func (x *NigoriSpecifics_TrustedVaultDebugInfo) GetAutoUpgradeDebugInfo() *NigoriSpecifics_AutoUpgradeDebugInfo {
	if x != nil {
		return x.AutoUpgradeDebugInfo
	}
	return nil
}

func (x *NigoriSpecifics_TrustedVaultDebugInfo) GetAutoUpgradeDebugInfoModificationTimeUnixEpochMillis() int64 {
	if x != nil && x.AutoUpgradeDebugInfoModificationTimeUnixEpochMillis != nil {
		return *x.AutoUpgradeDebugInfoModificationTimeUnixEpochMillis
	}
	return 0
}

var File_nigori_specifics_proto protoreflect.FileDescriptor

var file_nigori_specifics_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x1a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x4e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x13, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x11, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x4b,
	0x65, 0x79, 0x22, 0x64, 0x0a, 0x1a, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x78, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x78, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x61, 0x0a, 0x19, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x78, 0x32, 0x35, 0x35, 0x31, 0x39, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x78, 0x32, 0x35, 0x35,
	0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x0e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x67, 0x0a, 0x1e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x1a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x38, 0x0a,
	0x0c, 0x4e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x67, 0x12, 0x24, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xfd, 0x1b, 0x0a, 0x0f, 0x4e, 0x69, 0x67, 0x6f,
	0x72, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x62, 0x61, 0x67,
	0x12, 0x28, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x62, 0x61, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x62,
	0x61, 0x67, 0x49, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x11, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2d,
	0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x29, 0x0a,
	0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a,
	0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0c,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41,
	0x70, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x1a,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e,
	0x0a, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x70,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x62, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x0e, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x18,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36,
	0x0a, 0x17, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x10, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x20, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x29, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x61, 0x73, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x41, 0x72, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2d,
	0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x27, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x23, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x50, 0x0a, 0x25,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x61, 0x62, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x61, 0x62, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x2c, 0x0a, 0x10, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4f, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x67, 0x0a, 0x18, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4e,
	0x69, 0x67, 0x6f, 0x72, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x1d, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x19, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x1a, 0xce, 0x02, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c, 0x0a, 0x12, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x4e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x10, 0x41, 0x75,
	0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x55, 0x50,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x3b, 0x0a, 0x10, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x31,
	0x10, 0x01, 0x1a, 0xbf, 0x02, 0x0a, 0x15, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x4e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x78, 0x0a, 0x3b, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x33, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x4b, 0x45, 0x59, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x48,
	0x52, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e,
	0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x48,
	0x52, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x10, 0x05, 0x22, 0x57, 0x0a, 0x13, 0x4b,
	0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x42, 0x4b, 0x44, 0x46, 0x32, 0x5f, 0x48, 0x4d,
	0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x31, 0x30, 0x30, 0x33, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x38, 0x31, 0x39, 0x32, 0x5f, 0x38, 0x5f,
	0x31, 0x31, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04,
	0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d,
	0x4a, 0x04, 0x08, 0x17, 0x10, 0x18, 0x4a, 0x04, 0x08, 0x1c, 0x10, 0x1d, 0x4a, 0x04, 0x08, 0x23,
	0x10, 0x24, 0x4a, 0x04, 0x08, 0x24, 0x10, 0x25, 0x4a, 0x04, 0x08, 0x25, 0x10, 0x26, 0x4a, 0x04,
	0x08, 0x2c, 0x10, 0x2d, 0x4a, 0x04, 0x08, 0x33, 0x10, 0x34, 0x4a, 0x04, 0x08, 0x34, 0x10, 0x35,
	0x52, 0x1c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x1e,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x23,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x1b, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x52, 0x19, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x1d, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x52, 0x1d, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1b, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x52,
	0x21, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x73, 0x52, 0x1d, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x17,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x52,
	0x26, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x42, 0x36, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x48, 0x03, 0x50, 0x01, 0x5a, 0x09, 0x2e, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_nigori_specifics_proto_rawDescOnce sync.Once
	file_nigori_specifics_proto_rawDescData = file_nigori_specifics_proto_rawDesc
)

func file_nigori_specifics_proto_rawDescGZIP() []byte {
	file_nigori_specifics_proto_rawDescOnce.Do(func() {
		file_nigori_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_nigori_specifics_proto_rawDescData)
	})
	return file_nigori_specifics_proto_rawDescData
}

var file_nigori_specifics_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_nigori_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_nigori_specifics_proto_goTypes = []interface{}{
	(NigoriSpecifics_PassphraseType)(0),                        // 0: sync_pb.NigoriSpecifics.PassphraseType
	(NigoriSpecifics_KeyDerivationMethod)(0),                   // 1: sync_pb.NigoriSpecifics.KeyDerivationMethod
	(NigoriSpecifics_AutoUpgradeDebugInfo_AutoUpgradeState)(0), // 2: sync_pb.NigoriSpecifics.AutoUpgradeDebugInfo.AutoUpgradeState
	(NigoriSpecifics_AutoUpgradeDebugInfo_EligibilityGroup)(0), // 3: sync_pb.NigoriSpecifics.AutoUpgradeDebugInfo.EligibilityGroup
	(*NigoriKey)(nil),                             // 4: sync_pb.NigoriKey
	(*CrossUserSharingPrivateKey)(nil),            // 5: sync_pb.CrossUserSharingPrivateKey
	(*CrossUserSharingPublicKey)(nil),             // 6: sync_pb.CrossUserSharingPublicKey
	(*EncryptionKeys)(nil),                        // 7: sync_pb.EncryptionKeys
	(*NigoriKeyBag)(nil),                          // 8: sync_pb.NigoriKeyBag
	(*NigoriSpecifics)(nil),                       // 9: sync_pb.NigoriSpecifics
	(*NigoriSpecifics_AutoUpgradeDebugInfo)(nil),  // 10: sync_pb.NigoriSpecifics.AutoUpgradeDebugInfo
	(*NigoriSpecifics_TrustedVaultDebugInfo)(nil), // 11: sync_pb.NigoriSpecifics.TrustedVaultDebugInfo
	(*EncryptedData)(nil),                         // 12: sync_pb.EncryptedData
}
var file_nigori_specifics_proto_depIdxs = []int32{
	4,  // 0: sync_pb.EncryptionKeys.key:type_name -> sync_pb.NigoriKey
	5,  // 1: sync_pb.EncryptionKeys.cross_user_sharing_private_key:type_name -> sync_pb.CrossUserSharingPrivateKey
	4,  // 2: sync_pb.NigoriKeyBag.key:type_name -> sync_pb.NigoriKey
	12, // 3: sync_pb.NigoriSpecifics.encryption_keybag:type_name -> sync_pb.EncryptedData
	12, // 4: sync_pb.NigoriSpecifics.keystore_decryptor_token:type_name -> sync_pb.EncryptedData
	11, // 5: sync_pb.NigoriSpecifics.trusted_vault_debug_info:type_name -> sync_pb.NigoriSpecifics.TrustedVaultDebugInfo
	6,  // 6: sync_pb.NigoriSpecifics.cross_user_sharing_public_key:type_name -> sync_pb.CrossUserSharingPublicKey
	2,  // 7: sync_pb.NigoriSpecifics.AutoUpgradeDebugInfo.auto_upgrade_state:type_name -> sync_pb.NigoriSpecifics.AutoUpgradeDebugInfo.AutoUpgradeState
	10, // 8: sync_pb.NigoriSpecifics.TrustedVaultDebugInfo.auto_upgrade_debug_info:type_name -> sync_pb.NigoriSpecifics.AutoUpgradeDebugInfo
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_nigori_specifics_proto_init() }
func file_nigori_specifics_proto_init() {
	if File_nigori_specifics_proto != nil {
		return
	}
	file_encryption_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nigori_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NigoriKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nigori_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossUserSharingPrivateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nigori_specifics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossUserSharingPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nigori_specifics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nigori_specifics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NigoriKeyBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nigori_specifics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NigoriSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nigori_specifics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NigoriSpecifics_AutoUpgradeDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nigori_specifics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NigoriSpecifics_TrustedVaultDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nigori_specifics_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nigori_specifics_proto_goTypes,
		DependencyIndexes: file_nigori_specifics_proto_depIdxs,
		EnumInfos:         file_nigori_specifics_proto_enumTypes,
		MessageInfos:      file_nigori_specifics_proto_msgTypes,
	}.Build()
	File_nigori_specifics_proto = out.File
	file_nigori_specifics_proto_rawDesc = nil
	file_nigori_specifics_proto_goTypes = nil
	file_nigori_specifics_proto_depIdxs = nil
}
