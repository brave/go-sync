// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol for communication between sync client and server.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}. If you add new Specifics proto,
// also update proto_value_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: sync.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GarbageCollectionDirective_Type int32

const (
	GarbageCollectionDirective_UNKNOWN           GarbageCollectionDirective_Type = 0
	GarbageCollectionDirective_VERSION_WATERMARK GarbageCollectionDirective_Type = 1
	GarbageCollectionDirective_AGE_WATERMARK     GarbageCollectionDirective_Type = 2
	// Deprecated: Do not use.
	GarbageCollectionDirective_DEPRECATED_MAX_ITEM_COUNT GarbageCollectionDirective_Type = 3
)

// Enum value maps for GarbageCollectionDirective_Type.
var (
	GarbageCollectionDirective_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "VERSION_WATERMARK",
		2: "AGE_WATERMARK",
		3: "DEPRECATED_MAX_ITEM_COUNT",
	}
	GarbageCollectionDirective_Type_value = map[string]int32{
		"UNKNOWN":                   0,
		"VERSION_WATERMARK":         1,
		"AGE_WATERMARK":             2,
		"DEPRECATED_MAX_ITEM_COUNT": 3,
	}
)

func (x GarbageCollectionDirective_Type) Enum() *GarbageCollectionDirective_Type {
	p := new(GarbageCollectionDirective_Type)
	*p = x
	return p
}

func (x GarbageCollectionDirective_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GarbageCollectionDirective_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_proto_enumTypes[0].Descriptor()
}

func (GarbageCollectionDirective_Type) Type() protoreflect.EnumType {
	return &file_sync_proto_enumTypes[0]
}

func (x GarbageCollectionDirective_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GarbageCollectionDirective_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GarbageCollectionDirective_Type(num)
	return nil
}

// Deprecated: Use GarbageCollectionDirective_Type.Descriptor instead.
func (GarbageCollectionDirective_Type) EnumDescriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{7, 0}
}

type ClientToServerMessage_Contents int32

const (
	ClientToServerMessage_COMMIT            ClientToServerMessage_Contents = 1
	ClientToServerMessage_GET_UPDATES       ClientToServerMessage_Contents = 2
	ClientToServerMessage_DEPRECATED_3      ClientToServerMessage_Contents = 3
	ClientToServerMessage_DEPRECATED_4      ClientToServerMessage_Contents = 4
	ClientToServerMessage_CLEAR_SERVER_DATA ClientToServerMessage_Contents = 5
)

// Enum value maps for ClientToServerMessage_Contents.
var (
	ClientToServerMessage_Contents_name = map[int32]string{
		1: "COMMIT",
		2: "GET_UPDATES",
		3: "DEPRECATED_3",
		4: "DEPRECATED_4",
		5: "CLEAR_SERVER_DATA",
	}
	ClientToServerMessage_Contents_value = map[string]int32{
		"COMMIT":            1,
		"GET_UPDATES":       2,
		"DEPRECATED_3":      3,
		"DEPRECATED_4":      4,
		"CLEAR_SERVER_DATA": 5,
	}
)

func (x ClientToServerMessage_Contents) Enum() *ClientToServerMessage_Contents {
	p := new(ClientToServerMessage_Contents)
	*p = x
	return p
}

func (x ClientToServerMessage_Contents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientToServerMessage_Contents) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_proto_enumTypes[1].Descriptor()
}

func (ClientToServerMessage_Contents) Type() protoreflect.EnumType {
	return &file_sync_proto_enumTypes[1]
}

func (x ClientToServerMessage_Contents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientToServerMessage_Contents) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientToServerMessage_Contents(num)
	return nil
}

// Deprecated: Use ClientToServerMessage_Contents.Descriptor instead.
func (ClientToServerMessage_Contents) EnumDescriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{15, 0}
}

type CommitResponse_ResponseType int32

const (
	CommitResponse_SUCCESS  CommitResponse_ResponseType = 1
	CommitResponse_CONFLICT CommitResponse_ResponseType = 2 // You're out of date; update and check your data
	// TODO(ncarter): What's the difference between RETRY and TRANSIENT_ERROR?
	CommitResponse_RETRY           CommitResponse_ResponseType = 3 // Someone has a conflicting, non-expired session open
	CommitResponse_INVALID_MESSAGE CommitResponse_ResponseType = 4 // What the client sent was invalid, and trying again
	// won't help.
	CommitResponse_OVER_QUOTA      CommitResponse_ResponseType = 5 // This operation would put you, or you are, over quota
	CommitResponse_TRANSIENT_ERROR CommitResponse_ResponseType = 6 // Something went wrong; try again in a bit
)

// Enum value maps for CommitResponse_ResponseType.
var (
	CommitResponse_ResponseType_name = map[int32]string{
		1: "SUCCESS",
		2: "CONFLICT",
		3: "RETRY",
		4: "INVALID_MESSAGE",
		5: "OVER_QUOTA",
		6: "TRANSIENT_ERROR",
	}
	CommitResponse_ResponseType_value = map[string]int32{
		"SUCCESS":         1,
		"CONFLICT":        2,
		"RETRY":           3,
		"INVALID_MESSAGE": 4,
		"OVER_QUOTA":      5,
		"TRANSIENT_ERROR": 6,
	}
)

func (x CommitResponse_ResponseType) Enum() *CommitResponse_ResponseType {
	p := new(CommitResponse_ResponseType)
	*p = x
	return p
}

func (x CommitResponse_ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitResponse_ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_proto_enumTypes[2].Descriptor()
}

func (CommitResponse_ResponseType) Type() protoreflect.EnumType {
	return &file_sync_proto_enumTypes[2]
}

func (x CommitResponse_ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CommitResponse_ResponseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CommitResponse_ResponseType(num)
	return nil
}

// Deprecated: Use CommitResponse_ResponseType.Descriptor instead.
func (CommitResponse_ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{18, 0}
}

// Used for inspecting how long we spent performing operations in different
// backends. All times must be in millis.
type ProfilingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaDataWriteTime *int64 `protobuf:"varint,1,opt,name=meta_data_write_time,json=metaDataWriteTime" json:"meta_data_write_time,omitempty"`
	FileDataWriteTime *int64 `protobuf:"varint,2,opt,name=file_data_write_time,json=fileDataWriteTime" json:"file_data_write_time,omitempty"`
	UserLookupTime    *int64 `protobuf:"varint,3,opt,name=user_lookup_time,json=userLookupTime" json:"user_lookup_time,omitempty"`
	MetaDataReadTime  *int64 `protobuf:"varint,4,opt,name=meta_data_read_time,json=metaDataReadTime" json:"meta_data_read_time,omitempty"`
	FileDataReadTime  *int64 `protobuf:"varint,5,opt,name=file_data_read_time,json=fileDataReadTime" json:"file_data_read_time,omitempty"`
	TotalRequestTime  *int64 `protobuf:"varint,6,opt,name=total_request_time,json=totalRequestTime" json:"total_request_time,omitempty"`
}

func (x *ProfilingData) Reset() {
	*x = ProfilingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilingData) ProtoMessage() {}

func (x *ProfilingData) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilingData.ProtoReflect.Descriptor instead.
func (*ProfilingData) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{0}
}

func (x *ProfilingData) GetMetaDataWriteTime() int64 {
	if x != nil && x.MetaDataWriteTime != nil {
		return *x.MetaDataWriteTime
	}
	return 0
}

func (x *ProfilingData) GetFileDataWriteTime() int64 {
	if x != nil && x.FileDataWriteTime != nil {
		return *x.FileDataWriteTime
	}
	return 0
}

func (x *ProfilingData) GetUserLookupTime() int64 {
	if x != nil && x.UserLookupTime != nil {
		return *x.UserLookupTime
	}
	return 0
}

func (x *ProfilingData) GetMetaDataReadTime() int64 {
	if x != nil && x.MetaDataReadTime != nil {
		return *x.MetaDataReadTime
	}
	return 0
}

func (x *ProfilingData) GetFileDataReadTime() int64 {
	if x != nil && x.FileDataReadTime != nil {
		return *x.FileDataReadTime
	}
	return 0
}

func (x *ProfilingData) GetTotalRequestTime() int64 {
	if x != nil && x.TotalRequestTime != nil {
		return *x.TotalRequestTime
	}
	return 0
}

type EntitySpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If a datatype is encrypted, this field will contain the encrypted
	// original EntitySpecifics. The extension for the datatype will continue
	// to exist, but contain only the default values.
	// Note that currently passwords employ their own legacy encryption scheme and
	// do not use this field.
	Encrypted *EncryptedData `protobuf:"bytes,1,opt,name=encrypted" json:"encrypted,omitempty"`
	// Types that are assignable to SpecificsVariant:
	//	*EntitySpecifics_Autofill
	//	*EntitySpecifics_Bookmark
	//	*EntitySpecifics_Preference
	//	*EntitySpecifics_TypedUrl
	//	*EntitySpecifics_Theme
	//	*EntitySpecifics_AppNotification
	//	*EntitySpecifics_Password
	//	*EntitySpecifics_Nigori
	//	*EntitySpecifics_Extension
	//	*EntitySpecifics_App
	//	*EntitySpecifics_Session
	//	*EntitySpecifics_AutofillProfile
	//	*EntitySpecifics_SearchEngine
	//	*EntitySpecifics_ExtensionSetting
	//	*EntitySpecifics_AppSetting
	//	*EntitySpecifics_HistoryDeleteDirective
	//	*EntitySpecifics_SyncedNotification
	//	*EntitySpecifics_SyncedNotificationAppInfo
	//	*EntitySpecifics_DeviceInfo
	//	*EntitySpecifics_Experiments
	//	*EntitySpecifics_PriorityPreference
	//	*EntitySpecifics_Dictionary
	//	*EntitySpecifics_FaviconTracking
	//	*EntitySpecifics_FaviconImage
	//	*EntitySpecifics_ManagedUserSetting
	//	*EntitySpecifics_ManagedUser
	//	*EntitySpecifics_ManagedUserSharedSetting
	//	*EntitySpecifics_ManagedUserWhitelist
	//	*EntitySpecifics_AppList
	//	*EntitySpecifics_AutofillWallet
	//	*EntitySpecifics_WalletMetadata
	//	*EntitySpecifics_ArcPackage
	//	*EntitySpecifics_Printer
	//	*EntitySpecifics_ReadingList
	//	*EntitySpecifics_UserEvent
	//	*EntitySpecifics_UserConsent
	//	*EntitySpecifics_SendTabToSelf
	//	*EntitySpecifics_SecurityEvent
	//	*EntitySpecifics_WebApp
	//	*EntitySpecifics_WifiConfiguration
	//	*EntitySpecifics_OsPreference
	//	*EntitySpecifics_OsPriorityPreference
	//	*EntitySpecifics_SharingMessage
	//	*EntitySpecifics_AutofillOffer
	SpecificsVariant isEntitySpecifics_SpecificsVariant `protobuf_oneof:"specifics_variant"`
}

func (x *EntitySpecifics) Reset() {
	*x = EntitySpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitySpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySpecifics) ProtoMessage() {}

func (x *EntitySpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySpecifics.ProtoReflect.Descriptor instead.
func (*EntitySpecifics) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{1}
}

func (x *EntitySpecifics) GetEncrypted() *EncryptedData {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (m *EntitySpecifics) GetSpecificsVariant() isEntitySpecifics_SpecificsVariant {
	if m != nil {
		return m.SpecificsVariant
	}
	return nil
}

func (x *EntitySpecifics) GetAutofill() *AutofillSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Autofill); ok {
		return x.Autofill
	}
	return nil
}

func (x *EntitySpecifics) GetBookmark() *BookmarkSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Bookmark); ok {
		return x.Bookmark
	}
	return nil
}

func (x *EntitySpecifics) GetPreference() *PreferenceSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Preference); ok {
		return x.Preference
	}
	return nil
}

func (x *EntitySpecifics) GetTypedUrl() *TypedUrlSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_TypedUrl); ok {
		return x.TypedUrl
	}
	return nil
}

func (x *EntitySpecifics) GetTheme() *ThemeSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Theme); ok {
		return x.Theme
	}
	return nil
}

// Deprecated: Do not use.
func (x *EntitySpecifics) GetAppNotification() *AppNotification {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AppNotification); ok {
		return x.AppNotification
	}
	return nil
}

func (x *EntitySpecifics) GetPassword() *PasswordSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Password); ok {
		return x.Password
	}
	return nil
}

func (x *EntitySpecifics) GetNigori() *NigoriSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Nigori); ok {
		return x.Nigori
	}
	return nil
}

func (x *EntitySpecifics) GetExtension() *ExtensionSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Extension); ok {
		return x.Extension
	}
	return nil
}

func (x *EntitySpecifics) GetApp() *AppSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_App); ok {
		return x.App
	}
	return nil
}

func (x *EntitySpecifics) GetSession() *SessionSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Session); ok {
		return x.Session
	}
	return nil
}

func (x *EntitySpecifics) GetAutofillProfile() *AutofillProfileSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AutofillProfile); ok {
		return x.AutofillProfile
	}
	return nil
}

func (x *EntitySpecifics) GetSearchEngine() *SearchEngineSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SearchEngine); ok {
		return x.SearchEngine
	}
	return nil
}

func (x *EntitySpecifics) GetExtensionSetting() *ExtensionSettingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ExtensionSetting); ok {
		return x.ExtensionSetting
	}
	return nil
}

func (x *EntitySpecifics) GetAppSetting() *AppSettingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AppSetting); ok {
		return x.AppSetting
	}
	return nil
}

func (x *EntitySpecifics) GetHistoryDeleteDirective() *HistoryDeleteDirectiveSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_HistoryDeleteDirective); ok {
		return x.HistoryDeleteDirective
	}
	return nil
}

// Deprecated: Do not use.
func (x *EntitySpecifics) GetSyncedNotification() *SyncedNotificationSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SyncedNotification); ok {
		return x.SyncedNotification
	}
	return nil
}

// Deprecated: Do not use.
func (x *EntitySpecifics) GetSyncedNotificationAppInfo() *SyncedNotificationAppInfoSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SyncedNotificationAppInfo); ok {
		return x.SyncedNotificationAppInfo
	}
	return nil
}

func (x *EntitySpecifics) GetDeviceInfo() *DeviceInfoSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_DeviceInfo); ok {
		return x.DeviceInfo
	}
	return nil
}

// Deprecated: Do not use.
func (x *EntitySpecifics) GetExperiments() *ExperimentsSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Experiments); ok {
		return x.Experiments
	}
	return nil
}

func (x *EntitySpecifics) GetPriorityPreference() *PriorityPreferenceSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_PriorityPreference); ok {
		return x.PriorityPreference
	}
	return nil
}

func (x *EntitySpecifics) GetDictionary() *DictionarySpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Dictionary); ok {
		return x.Dictionary
	}
	return nil
}

func (x *EntitySpecifics) GetFaviconTracking() *FaviconTrackingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_FaviconTracking); ok {
		return x.FaviconTracking
	}
	return nil
}

func (x *EntitySpecifics) GetFaviconImage() *FaviconImageSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_FaviconImage); ok {
		return x.FaviconImage
	}
	return nil
}

func (x *EntitySpecifics) GetManagedUserSetting() *ManagedUserSettingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ManagedUserSetting); ok {
		return x.ManagedUserSetting
	}
	return nil
}

// Deprecated: Do not use.
func (x *EntitySpecifics) GetManagedUser() *ManagedUserSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ManagedUser); ok {
		return x.ManagedUser
	}
	return nil
}

// Deprecated: Do not use.
func (x *EntitySpecifics) GetManagedUserSharedSetting() *ManagedUserSharedSettingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ManagedUserSharedSetting); ok {
		return x.ManagedUserSharedSetting
	}
	return nil
}

func (x *EntitySpecifics) GetManagedUserWhitelist() *ManagedUserWhitelistSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ManagedUserWhitelist); ok {
		return x.ManagedUserWhitelist
	}
	return nil
}

func (x *EntitySpecifics) GetAppList() *AppListSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AppList); ok {
		return x.AppList
	}
	return nil
}

func (x *EntitySpecifics) GetAutofillWallet() *AutofillWalletSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AutofillWallet); ok {
		return x.AutofillWallet
	}
	return nil
}

func (x *EntitySpecifics) GetWalletMetadata() *WalletMetadataSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_WalletMetadata); ok {
		return x.WalletMetadata
	}
	return nil
}

func (x *EntitySpecifics) GetArcPackage() *ArcPackageSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ArcPackage); ok {
		return x.ArcPackage
	}
	return nil
}

func (x *EntitySpecifics) GetPrinter() *PrinterSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Printer); ok {
		return x.Printer
	}
	return nil
}

func (x *EntitySpecifics) GetReadingList() *ReadingListSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ReadingList); ok {
		return x.ReadingList
	}
	return nil
}

func (x *EntitySpecifics) GetUserEvent() *UserEventSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_UserEvent); ok {
		return x.UserEvent
	}
	return nil
}

func (x *EntitySpecifics) GetUserConsent() *UserConsentSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_UserConsent); ok {
		return x.UserConsent
	}
	return nil
}

func (x *EntitySpecifics) GetSendTabToSelf() *SendTabToSelfSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SendTabToSelf); ok {
		return x.SendTabToSelf
	}
	return nil
}

func (x *EntitySpecifics) GetSecurityEvent() *SecurityEventSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SecurityEvent); ok {
		return x.SecurityEvent
	}
	return nil
}

func (x *EntitySpecifics) GetWebApp() *WebAppSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_WebApp); ok {
		return x.WebApp
	}
	return nil
}

func (x *EntitySpecifics) GetWifiConfiguration() *WifiConfigurationSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_WifiConfiguration); ok {
		return x.WifiConfiguration
	}
	return nil
}

func (x *EntitySpecifics) GetOsPreference() *OsPreferenceSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_OsPreference); ok {
		return x.OsPreference
	}
	return nil
}

func (x *EntitySpecifics) GetOsPriorityPreference() *OsPriorityPreferenceSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_OsPriorityPreference); ok {
		return x.OsPriorityPreference
	}
	return nil
}

func (x *EntitySpecifics) GetSharingMessage() *SharingMessageSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SharingMessage); ok {
		return x.SharingMessage
	}
	return nil
}

func (x *EntitySpecifics) GetAutofillOffer() *AutofillOfferSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AutofillOffer); ok {
		return x.AutofillOffer
	}
	return nil
}

type isEntitySpecifics_SpecificsVariant interface {
	isEntitySpecifics_SpecificsVariant()
}

type EntitySpecifics_Autofill struct {
	Autofill *AutofillSpecifics `protobuf:"bytes,31729,opt,name=autofill,oneof"`
}

type EntitySpecifics_Bookmark struct {
	Bookmark *BookmarkSpecifics `protobuf:"bytes,32904,opt,name=bookmark,oneof"`
}

type EntitySpecifics_Preference struct {
	Preference *PreferenceSpecifics `protobuf:"bytes,37702,opt,name=preference,oneof"`
}

type EntitySpecifics_TypedUrl struct {
	TypedUrl *TypedUrlSpecifics `protobuf:"bytes,40781,opt,name=typed_url,json=typedUrl,oneof"`
}

type EntitySpecifics_Theme struct {
	Theme *ThemeSpecifics `protobuf:"bytes,41210,opt,name=theme,oneof"`
}

type EntitySpecifics_AppNotification struct {
	// TODO(crbug.com/1012648): |app_notification| isn't used by the client
	// anymore, but the server still needs it for now.
	//
	// Deprecated: Do not use.
	AppNotification *AppNotification `protobuf:"bytes,45184,opt,name=app_notification,json=appNotification,oneof"`
}

type EntitySpecifics_Password struct {
	Password *PasswordSpecifics `protobuf:"bytes,45873,opt,name=password,oneof"`
}

type EntitySpecifics_Nigori struct {
	Nigori *NigoriSpecifics `protobuf:"bytes,47745,opt,name=nigori,oneof"`
}

type EntitySpecifics_Extension struct {
	Extension *ExtensionSpecifics `protobuf:"bytes,48119,opt,name=extension,oneof"`
}

type EntitySpecifics_App struct {
	App *AppSpecifics `protobuf:"bytes,48364,opt,name=app,oneof"`
}

type EntitySpecifics_Session struct {
	Session *SessionSpecifics `protobuf:"bytes,50119,opt,name=session,oneof"`
}

type EntitySpecifics_AutofillProfile struct {
	AutofillProfile *AutofillProfileSpecifics `protobuf:"bytes,63951,opt,name=autofill_profile,json=autofillProfile,oneof"`
}

type EntitySpecifics_SearchEngine struct {
	SearchEngine *SearchEngineSpecifics `protobuf:"bytes,88610,opt,name=search_engine,json=searchEngine,oneof"`
}

type EntitySpecifics_ExtensionSetting struct {
	ExtensionSetting *ExtensionSettingSpecifics `protobuf:"bytes,96159,opt,name=extension_setting,json=extensionSetting,oneof"`
}

type EntitySpecifics_AppSetting struct {
	AppSetting *AppSettingSpecifics `protobuf:"bytes,103656,opt,name=app_setting,json=appSetting,oneof"`
}

type EntitySpecifics_HistoryDeleteDirective struct {
	HistoryDeleteDirective *HistoryDeleteDirectiveSpecifics `protobuf:"bytes,150251,opt,name=history_delete_directive,json=historyDeleteDirective,oneof"`
}

type EntitySpecifics_SyncedNotification struct {
	// TODO(crbug.com/1012648): |synced_notification| and
	// |synced_notification_app_info| aren't used by the client anymore, but the
	// server still needs them for now.
	//
	// Deprecated: Do not use.
	SyncedNotification *SyncedNotificationSpecifics `protobuf:"bytes,153108,opt,name=synced_notification,json=syncedNotification,oneof"`
}

type EntitySpecifics_SyncedNotificationAppInfo struct {
	// Deprecated: Do not use.
	SyncedNotificationAppInfo *SyncedNotificationAppInfoSpecifics `protobuf:"bytes,235816,opt,name=synced_notification_app_info,json=syncedNotificationAppInfo,oneof"`
}

type EntitySpecifics_DeviceInfo struct {
	DeviceInfo *DeviceInfoSpecifics `protobuf:"bytes,154522,opt,name=device_info,json=deviceInfo,oneof"`
}

type EntitySpecifics_Experiments struct {
	// TODO(crbug.com/1009361): |experiments| isn't used by the client anymore,
	// but the server still needs it for now.
	//
	// Deprecated: Do not use.
	Experiments *ExperimentsSpecifics `protobuf:"bytes,161496,opt,name=experiments,oneof"`
}

type EntitySpecifics_PriorityPreference struct {
	PriorityPreference *PriorityPreferenceSpecifics `protobuf:"bytes,163425,opt,name=priority_preference,json=priorityPreference,oneof"`
}

type EntitySpecifics_Dictionary struct {
	Dictionary *DictionarySpecifics `protobuf:"bytes,170540,opt,name=dictionary,oneof"`
}

type EntitySpecifics_FaviconTracking struct {
	FaviconTracking *FaviconTrackingSpecifics `protobuf:"bytes,181534,opt,name=favicon_tracking,json=faviconTracking,oneof"`
}

type EntitySpecifics_FaviconImage struct {
	FaviconImage *FaviconImageSpecifics `protobuf:"bytes,182019,opt,name=favicon_image,json=faviconImage,oneof"`
}

type EntitySpecifics_ManagedUserSetting struct {
	ManagedUserSetting *ManagedUserSettingSpecifics `protobuf:"bytes,186662,opt,name=managed_user_setting,json=managedUserSetting,oneof"`
}

type EntitySpecifics_ManagedUser struct {
	// TODO(tschumann): Remove once server-side dependencies are resolved.
	//
	// Deprecated: Do not use.
	ManagedUser *ManagedUserSpecifics `protobuf:"bytes,194582,opt,name=managed_user,json=managedUser,oneof"`
}

type EntitySpecifics_ManagedUserSharedSetting struct {
	// TODO(tschumann): Remove once server-side dependencies are resolved.
	//
	// Deprecated: Do not use.
	ManagedUserSharedSetting *ManagedUserSharedSettingSpecifics `protobuf:"bytes,202026,opt,name=managed_user_shared_setting,json=managedUserSharedSetting,oneof"`
}

type EntitySpecifics_ManagedUserWhitelist struct {
	ManagedUserWhitelist *ManagedUserWhitelistSpecifics `protobuf:"bytes,306060,opt,name=managed_user_whitelist,json=managedUserWhitelist,oneof"`
}

type EntitySpecifics_AppList struct {
	AppList *AppListSpecifics `protobuf:"bytes,229170,opt,name=app_list,json=appList,oneof"`
}

type EntitySpecifics_AutofillWallet struct {
	AutofillWallet *AutofillWalletSpecifics `protobuf:"bytes,306270,opt,name=autofill_wallet,json=autofillWallet,oneof"`
}

type EntitySpecifics_WalletMetadata struct {
	WalletMetadata *WalletMetadataSpecifics `protobuf:"bytes,330441,opt,name=wallet_metadata,json=walletMetadata,oneof"`
}

type EntitySpecifics_ArcPackage struct {
	ArcPackage *ArcPackageSpecifics `protobuf:"bytes,340906,opt,name=arc_package,json=arcPackage,oneof"`
}

type EntitySpecifics_Printer struct {
	Printer *PrinterSpecifics `protobuf:"bytes,410745,opt,name=printer,oneof"`
}

type EntitySpecifics_ReadingList struct {
	ReadingList *ReadingListSpecifics `protobuf:"bytes,411028,opt,name=reading_list,json=readingList,oneof"`
}

type EntitySpecifics_UserEvent struct {
	UserEvent *UserEventSpecifics `protobuf:"bytes,455206,opt,name=user_event,json=userEvent,oneof"`
}

type EntitySpecifics_UserConsent struct {
	UserConsent *UserConsentSpecifics `protobuf:"bytes,556014,opt,name=user_consent,json=userConsent,oneof"`
}

type EntitySpecifics_SendTabToSelf struct {
	SendTabToSelf *SendTabToSelfSpecifics `protobuf:"bytes,601980,opt,name=send_tab_to_self,json=sendTabToSelf,oneof"`
}

type EntitySpecifics_SecurityEvent struct {
	SecurityEvent *SecurityEventSpecifics `protobuf:"bytes,600372,opt,name=security_event,json=securityEvent,oneof"`
}

type EntitySpecifics_WebApp struct {
	WebApp *WebAppSpecifics `protobuf:"bytes,673225,opt,name=web_app,json=webApp,oneof"`
}

type EntitySpecifics_WifiConfiguration struct {
	WifiConfiguration *WifiConfigurationSpecifics `protobuf:"bytes,662827,opt,name=wifi_configuration,json=wifiConfiguration,oneof"`
}

type EntitySpecifics_OsPreference struct {
	OsPreference *OsPreferenceSpecifics `protobuf:"bytes,702141,opt,name=os_preference,json=osPreference,oneof"`
}

type EntitySpecifics_OsPriorityPreference struct {
	OsPriorityPreference *OsPriorityPreferenceSpecifics `protobuf:"bytes,703915,opt,name=os_priority_preference,json=osPriorityPreference,oneof"`
}

type EntitySpecifics_SharingMessage struct {
	SharingMessage *SharingMessageSpecifics `protobuf:"bytes,728866,opt,name=sharing_message,json=sharingMessage,oneof"`
}

type EntitySpecifics_AutofillOffer struct {
	AutofillOffer *AutofillOfferSpecifics `protobuf:"bytes,774329,opt,name=autofill_offer,json=autofillOffer,oneof"`
}

func (*EntitySpecifics_Autofill) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Bookmark) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Preference) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_TypedUrl) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Theme) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AppNotification) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Password) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Nigori) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Extension) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_App) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Session) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AutofillProfile) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SearchEngine) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ExtensionSetting) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AppSetting) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_HistoryDeleteDirective) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SyncedNotification) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SyncedNotificationAppInfo) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_DeviceInfo) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Experiments) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_PriorityPreference) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Dictionary) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_FaviconTracking) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_FaviconImage) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ManagedUserSetting) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ManagedUser) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ManagedUserSharedSetting) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ManagedUserWhitelist) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AppList) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AutofillWallet) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_WalletMetadata) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ArcPackage) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Printer) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ReadingList) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_UserEvent) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_UserConsent) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SendTabToSelf) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SecurityEvent) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_WebApp) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_WifiConfiguration) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_OsPreference) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_OsPriorityPreference) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SharingMessage) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AutofillOffer) isEntitySpecifics_SpecificsVariant() {}

type SyncEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This item's identifier.  In a commit of a new item, this will be a
	// client-generated ID.  If the commit succeeds, the server will generate
	// a globally unique ID and return it to the committing client in the
	// CommitResponse.EntryResponse.  In the context of a GetUpdatesResponse,
	// |id_string| is always the server generated ID.  The original
	// client-generated ID is preserved in the |originator_client_id| field.
	// Present in both GetUpdatesResponse and CommitMessage.
	IdString *string `protobuf:"bytes,1,opt,name=id_string,json=idString" json:"id_string,omitempty"`
	// An id referencing this item's parent in the hierarchy.  In a
	// CommitMessage, it is accepted for this to be a client-generated temporary
	// ID if there was a new created item with that ID appearing earlier
	// in the message.  In all other situations, it is a server ID.
	// Present in both GetUpdatesResponse and CommitMessage.
	ParentIdString *string `protobuf:"bytes,2,opt,name=parent_id_string,json=parentIdString" json:"parent_id_string,omitempty"`
	// The version of this item -- a monotonically increasing value that is
	// maintained by for each item.  If zero in a CommitMessage, the server
	// will interpret this entity as a newly-created item and generate a
	// new server ID and an initial version number.  If nonzero in a
	// CommitMessage, this item is treated as an update to an existing item, and
	// the server will use |id_string| to locate the item.  Then, if the item's
	// current version on the server does not match |version|, the commit will
	// fail for that item.  The server will not update it, and will return
	// a result code of CONFLICT.  In a GetUpdatesResponse, |version| is
	// always positive and indentifies the revision of the item data being sent
	// to the client.
	// Present in both GetUpdatesResponse and CommitMessage.
	// WARNING: This field used to be required before M60. Any client before this
	// will fail to deserialize if this field is missing.
	Version *int64 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	// Last modification time (in java time milliseconds)
	// Present in both GetUpdatesResponse and CommitMessage.
	Mtime *int64 `protobuf:"varint,5,opt,name=mtime" json:"mtime,omitempty"`
	// Creation time.
	// Present in both GetUpdatesResponse and CommitMessage.
	Ctime *int64 `protobuf:"varint,6,opt,name=ctime" json:"ctime,omitempty"`
	// The name of this item.
	// Historical note:
	//   Since November 2010, this value is no different from non_unique_name.
	//   Before then, server implementations would maintain a unique-within-parent
	//   value separate from its base, "non-unique" value.  Clients had not
	//   depended on the uniqueness of the property since November 2009; it was
	//   removed from Chromium by http://codereview.chromium.org/371029 .
	// Present in both GetUpdatesResponse and CommitMessage.
	// WARNING: This field used to be required before M60. Any client before this
	// will fail to deserialize if this field is missing.
	Name *string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	// The name of this item.  Same as |name|.
	// |non_unique_name| should take precedence over the |name| value if both
	// are supplied.  For efficiency, clients and servers should avoid setting
	// this redundant value.
	// Present in both GetUpdatesResponse and CommitMessage.
	NonUniqueName *string `protobuf:"bytes,8,opt,name=non_unique_name,json=nonUniqueName" json:"non_unique_name,omitempty"`
	// If present, this tag identifies this item as being a uniquely
	// instanced item.  The server ensures that there is never more
	// than one entity in a user's store with the same tag value.
	// This value is used to identify and find e.g. the "Google Chrome" settings
	// folder without relying on it existing at a particular path, or having
	// a particular name, in the data store.
	//
	// This variant of the tag is created by the server, so clients can't create
	// an item with a tag using this field.
	//
	// Use client_defined_unique_tag if you want to create one from the client.
	//
	// An item can't have both a client_defined_unique_tag and
	// a server_defined_unique_tag.
	//
	// Present only in GetUpdatesResponse.
	ServerDefinedUniqueTag *string `protobuf:"bytes,10,opt,name=server_defined_unique_tag,json=serverDefinedUniqueTag" json:"server_defined_unique_tag,omitempty"`
	// Supplies a numeric position for this item, relative to other items with the
	// same parent.  Deprecated in M26, though clients are still required to set
	// it.
	//
	// Present in both GetUpdatesResponse and CommitMessage.
	//
	// At one point this was used as an alternative / supplement to
	// the deprecated |insert_after_item_id|, but now it, too, has been
	// deprecated.
	//
	// In order to maintain compatibility with older clients, newer clients should
	// still set this field.  Its value should be based on the first 8 bytes of
	// this item's |unique_position|.
	//
	// Nerwer clients must also support the receipt of items that contain
	// |position_in_parent| but no |unique_position|.  They should locally convert
	// the given int64 position to a UniquePosition.
	//
	// The conversion from int64 to UniquePosition is as follows:
	// The int64 value will have its sign bit flipped then placed in big endian
	// order as the first 8 bytes of the UniquePosition.  The subsequent bytes of
	// the UniquePosition will consist of the item's unique suffix.
	//
	// Conversion from UniquePosition to int64 reverses this process: the first 8
	// bytes of the position are to be interpreted as a big endian int64 value
	// with its sign bit flipped.
	//
	// Deprecated: Do not use.
	PositionInParent *int64 `protobuf:"varint,15,opt,name=position_in_parent,json=positionInParent" json:"position_in_parent,omitempty"`
	// Contains the ID of the element (under the same parent) after which this
	// element resides. An empty string indicates that the element is the first
	// element in the parent.  This value is used during commits to specify
	// a relative position for a position change.  In the context of
	// a GetUpdatesMessage, |position_in_parent| is used instead to
	// communicate position.
	//
	// Present only in CommitMessage.
	//
	// This is deprecated.  Clients are allowed to omit this as long as they
	// include |position_in_parent| instead.
	//
	// Deprecated: Do not use.
	InsertAfterItemId *string `protobuf:"bytes,16,opt,name=insert_after_item_id,json=insertAfterItemId" json:"insert_after_item_id,omitempty"`
	// If true, indicates that this item has been (or should be) deleted.
	// Present in both GetUpdatesResponse and CommitMessage.
	Deleted *bool `protobuf:"varint,18,opt,name=deleted,def=0" json:"deleted,omitempty"`
	// A GUID that identifies the the sync client who initially committed
	// this entity.  This value corresponds to |cache_guid| in CommitMessage.
	// This field, along with |originator_client_item_id|, can be used to
	// reunite the original with its official committed version in the case
	// where a client does not receive or process the commit response for
	// some reason.
	//
	// Present only in GetUpdatesResponse.
	//
	// This field is also used in determining the unique identifier used in
	// bookmarks' unique_position field.
	OriginatorCacheGuid *string `protobuf:"bytes,19,opt,name=originator_cache_guid,json=originatorCacheGuid" json:"originator_cache_guid,omitempty"`
	// Item ID as generated by the client that initially created this entity. Used
	// exclusively for bookmarks (other datatypes use client_defined_unique_tag).
	// There are three generation of bookmarks that have populated this field
	// differently, depending on which version of the browser created the
	// bookmark:
	// 1. For bookmarks created before M44 (2015), the field got populated with an
	//    ID that is locally unique, but not globally unique (usually a negative
	//    number).
	// 2. For bookmarks created between M45 and M51, both inclusive, the field got
	//    populated with a globally unique GUID in uppercase form.
	// 3. For bookmarks created with M52 or above, the field gets populated with
	//    a globally unique GUID in lowercase form.
	//
	// Present only in GetUpdatesResponse.
	OriginatorClientItemId *string `protobuf:"bytes,20,opt,name=originator_client_item_id,json=originatorClientItemId" json:"originator_client_item_id,omitempty"`
	// Extensible container for datatype-specific data.
	// This became available in version 23 of the protocol.
	Specifics *EntitySpecifics `protobuf:"bytes,21,opt,name=specifics" json:"specifics,omitempty"`
	// Indicate whether this is a folder or not. Available in version 23+.
	Folder *bool `protobuf:"varint,22,opt,name=folder,def=0" json:"folder,omitempty"`
	// A client defined unique hash for this entity.
	// Similar to server_defined_unique_tag.
	//
	// When initially committing an entity, a client can request that the entity
	// is unique per that account. To do so, the client should specify a
	// client_defined_unique_tag. At most one entity per tag value may exist.
	// per account. The server will enforce uniqueness on this tag
	// and fail attempts to create duplicates of this tag.
	// Will be returned in any updates for this entity.
	//
	// The difference between server_defined_unique_tag and
	// client_defined_unique_tag is the creator of the entity. Server defined
	// tags are entities created by the server at account creation,
	// while client defined tags are entities created by the client at any time.
	//
	// During GetUpdates, a sync entity update will come back with ONE of:
	// a) Originator and cache id - If client committed the item as non "unique"
	// b) Server tag - If server committed the item as unique
	// c) Client tag - If client committed the item as unique
	//
	// May be present in CommitMessages for the initial creation of an entity.
	// If present in Commit updates for the entity, it will be ignored.
	//
	// Available in version 24+.
	//
	// May be returned in GetUpdatesMessage and sent up in CommitMessage.
	//
	ClientDefinedUniqueTag *string `protobuf:"bytes,23,opt,name=client_defined_unique_tag,json=clientDefinedUniqueTag" json:"client_defined_unique_tag,omitempty"`
	// This positioning system had a relatively short life.  It was made obsolete
	// by |unique_position| before either the client or server made much of an
	// attempt to support it.  In fact, no client ever read or set this field.
	//
	// Deprecated in M26.
	//
	// Deprecated: Do not use.
	OrdinalInParent []byte `protobuf:"bytes,24,opt,name=ordinal_in_parent,json=ordinalInParent" json:"ordinal_in_parent,omitempty"`
	// This is the fourth attempt at positioning.
	//
	// This field is present in both GetUpdatesResponse and CommitMessage, if the
	// item's type requires it and the client that wrote the item supports it (M26
	// or higher).  Clients must also be prepared to handle updates from clients
	// that do not set this field.
	//
	// This field will not be set for items whose type ignores positioning.
	// Clients should not attempt to read this field on the receipt of an item of
	// a type that ignores positioning.
	//
	// Refer to its definition in unique_position.proto for more information about
	// its internal representation.
	UniquePosition *UniquePosition `protobuf:"bytes,25,opt,name=unique_position,json=uniquePosition" json:"unique_position,omitempty"`
}

// Default values for SyncEntity fields.
const (
	Default_SyncEntity_Deleted = bool(false)
	Default_SyncEntity_Folder  = bool(false)
)

func (x *SyncEntity) Reset() {
	*x = SyncEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncEntity) ProtoMessage() {}

func (x *SyncEntity) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncEntity.ProtoReflect.Descriptor instead.
func (*SyncEntity) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{2}
}

func (x *SyncEntity) GetIdString() string {
	if x != nil && x.IdString != nil {
		return *x.IdString
	}
	return ""
}

func (x *SyncEntity) GetParentIdString() string {
	if x != nil && x.ParentIdString != nil {
		return *x.ParentIdString
	}
	return ""
}

func (x *SyncEntity) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SyncEntity) GetMtime() int64 {
	if x != nil && x.Mtime != nil {
		return *x.Mtime
	}
	return 0
}

func (x *SyncEntity) GetCtime() int64 {
	if x != nil && x.Ctime != nil {
		return *x.Ctime
	}
	return 0
}

func (x *SyncEntity) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SyncEntity) GetNonUniqueName() string {
	if x != nil && x.NonUniqueName != nil {
		return *x.NonUniqueName
	}
	return ""
}

func (x *SyncEntity) GetServerDefinedUniqueTag() string {
	if x != nil && x.ServerDefinedUniqueTag != nil {
		return *x.ServerDefinedUniqueTag
	}
	return ""
}

// Deprecated: Do not use.
func (x *SyncEntity) GetPositionInParent() int64 {
	if x != nil && x.PositionInParent != nil {
		return *x.PositionInParent
	}
	return 0
}

// Deprecated: Do not use.
func (x *SyncEntity) GetInsertAfterItemId() string {
	if x != nil && x.InsertAfterItemId != nil {
		return *x.InsertAfterItemId
	}
	return ""
}

func (x *SyncEntity) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return Default_SyncEntity_Deleted
}

func (x *SyncEntity) GetOriginatorCacheGuid() string {
	if x != nil && x.OriginatorCacheGuid != nil {
		return *x.OriginatorCacheGuid
	}
	return ""
}

func (x *SyncEntity) GetOriginatorClientItemId() string {
	if x != nil && x.OriginatorClientItemId != nil {
		return *x.OriginatorClientItemId
	}
	return ""
}

func (x *SyncEntity) GetSpecifics() *EntitySpecifics {
	if x != nil {
		return x.Specifics
	}
	return nil
}

func (x *SyncEntity) GetFolder() bool {
	if x != nil && x.Folder != nil {
		return *x.Folder
	}
	return Default_SyncEntity_Folder
}

func (x *SyncEntity) GetClientDefinedUniqueTag() string {
	if x != nil && x.ClientDefinedUniqueTag != nil {
		return *x.ClientDefinedUniqueTag
	}
	return ""
}

// Deprecated: Do not use.
func (x *SyncEntity) GetOrdinalInParent() []byte {
	if x != nil {
		return x.OrdinalInParent
	}
	return nil
}

func (x *SyncEntity) GetUniquePosition() *UniquePosition {
	if x != nil {
		return x.UniquePosition
	}
	return nil
}

// This message contains diagnostic information used to correlate
// commit-related traffic with extensions-related mutations to the
// data models in chromium.  It plays no functional role in
// processing this CommitMessage.
type ChromiumExtensionsActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human-readable ID identifying the extension responsible
	// for the traffic reported in this ChromiumExtensionsActivity.
	ExtensionId *string `protobuf:"bytes,1,opt,name=extension_id,json=extensionId" json:"extension_id,omitempty"`
	// How many times the extension successfully invoked a write
	// operation through the bookmarks API since the last CommitMessage.
	BookmarkWritesSinceLastCommit *uint32 `protobuf:"varint,2,opt,name=bookmark_writes_since_last_commit,json=bookmarkWritesSinceLastCommit" json:"bookmark_writes_since_last_commit,omitempty"`
}

func (x *ChromiumExtensionsActivity) Reset() {
	*x = ChromiumExtensionsActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromiumExtensionsActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromiumExtensionsActivity) ProtoMessage() {}

func (x *ChromiumExtensionsActivity) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromiumExtensionsActivity.ProtoReflect.Descriptor instead.
func (*ChromiumExtensionsActivity) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{3}
}

func (x *ChromiumExtensionsActivity) GetExtensionId() string {
	if x != nil && x.ExtensionId != nil {
		return *x.ExtensionId
	}
	return ""
}

func (x *ChromiumExtensionsActivity) GetBookmarkWritesSinceLastCommit() uint32 {
	if x != nil && x.BookmarkWritesSinceLastCommit != nil {
		return *x.BookmarkWritesSinceLastCommit
	}
	return 0
}

// Client specific configuration information.
type ClientConfigParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of data types this client has enabled. Note that this does not
	// include proxy types, as they do not have protocol field numbers and are
	// placeholder types that implicitly enable protocol types.
	EnabledTypeIds []int32 `protobuf:"varint,1,rep,name=enabled_type_ids,json=enabledTypeIds" json:"enabled_type_ids,omitempty"`
	// Whether the PROXY_TABS proxy datatype is enabled on this client.
	TabsDatatypeEnabled *bool `protobuf:"varint,2,opt,name=tabs_datatype_enabled,json=tabsDatatypeEnabled" json:"tabs_datatype_enabled,omitempty"`
	// Whether the account(s) present in the content area's cookie jar match the
	// chrome account. If multiple accounts are present in the cookie jar, a
	// mismatch implies all of them are different from the chrome account.
	CookieJarMismatch *bool `protobuf:"varint,3,opt,name=cookie_jar_mismatch,json=cookieJarMismatch" json:"cookie_jar_mismatch,omitempty"`
	// Indicates that the client is not aware of any other active clients for the
	// user. This flag shows that it is not necessary to send invalidations for
	// the committed data. The client is considered active if it's DeviceInfo has
	// updated recent enough.
	SingleClient *bool `protobuf:"varint,4,opt,name=single_client,json=singleClient" json:"single_client,omitempty"`
}

func (x *ClientConfigParams) Reset() {
	*x = ClientConfigParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientConfigParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConfigParams) ProtoMessage() {}

func (x *ClientConfigParams) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConfigParams.ProtoReflect.Descriptor instead.
func (*ClientConfigParams) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{4}
}

func (x *ClientConfigParams) GetEnabledTypeIds() []int32 {
	if x != nil {
		return x.EnabledTypeIds
	}
	return nil
}

func (x *ClientConfigParams) GetTabsDatatypeEnabled() bool {
	if x != nil && x.TabsDatatypeEnabled != nil {
		return *x.TabsDatatypeEnabled
	}
	return false
}

func (x *ClientConfigParams) GetCookieJarMismatch() bool {
	if x != nil && x.CookieJarMismatch != nil {
		return *x.CookieJarMismatch
	}
	return false
}

func (x *ClientConfigParams) GetSingleClient() bool {
	if x != nil && x.SingleClient != nil {
		return *x.SingleClient
	}
	return false
}

type CommitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*SyncEntity `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	// A GUID that identifies the committing sync client.  This value will be
	// returned as originator_cache_guid for any new items.
	CacheGuid          *string                       `protobuf:"bytes,2,opt,name=cache_guid,json=cacheGuid" json:"cache_guid,omitempty"`
	ExtensionsActivity []*ChromiumExtensionsActivity `protobuf:"bytes,3,rep,name=extensions_activity,json=extensionsActivity" json:"extensions_activity,omitempty"`
	// The configuration of this client at commit time. Used by the server to
	// make commit-time decisions about how to process datatypes that might
	// involve server-side interaction, and e.g require explicit user intent for
	// syncing a particular data type regardless of whether a commit for that
	// datatype is currently being sent up.
	ConfigParams *ClientConfigParams `protobuf:"bytes,4,opt,name=config_params,json=configParams" json:"config_params,omitempty"`
	// Set of optional per-client datatype contexts.
	ClientContexts []*DataTypeContext `protobuf:"bytes,5,rep,name=client_contexts,json=clientContexts" json:"client_contexts,omitempty"`
	// This field need to be 256 bytes if set. This attempts to mitigate CRIME
	// attacks when sync communicate from client to server with compression. So if
	// compression is used, this need to set a 256 random ASCII bytes. If no
	// compression, this field should not be set. The server can ignore the
	// padding.
	Padding *string `protobuf:"bytes,6,opt,name=padding" json:"padding,omitempty"`
}

func (x *CommitMessage) Reset() {
	*x = CommitMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMessage) ProtoMessage() {}

func (x *CommitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMessage.ProtoReflect.Descriptor instead.
func (*CommitMessage) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{5}
}

func (x *CommitMessage) GetEntries() []*SyncEntity {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CommitMessage) GetCacheGuid() string {
	if x != nil && x.CacheGuid != nil {
		return *x.CacheGuid
	}
	return ""
}

func (x *CommitMessage) GetExtensionsActivity() []*ChromiumExtensionsActivity {
	if x != nil {
		return x.ExtensionsActivity
	}
	return nil
}

func (x *CommitMessage) GetConfigParams() *ClientConfigParams {
	if x != nil {
		return x.ConfigParams
	}
	return nil
}

func (x *CommitMessage) GetClientContexts() []*DataTypeContext {
	if x != nil {
		return x.ClientContexts
	}
	return nil
}

func (x *CommitMessage) GetPadding() string {
	if x != nil && x.Padding != nil {
		return *x.Padding
	}
	return ""
}

// This message communicates additional per-type information related to
// requests with origin GU_TRIGGER.  This message is not relevant when any
// other origin value is used.
// Introduced in M29.
type GetUpdateTriggers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An opaque-to-the-client string of bytes, received through a notification,
	// that the server may interpret as a hint about the location of the latest
	// version of the data for this type.
	//
	// Note that this will eventually replace the 'optional' field of the same
	// name defined in the progress marker, but the client and server should
	// support both until it's safe to deprecate the old one.
	//
	// This field was introduced in M29.
	NotificationHint []string `protobuf:"bytes,1,rep,name=notification_hint,json=notificationHint" json:"notification_hint,omitempty"`
	// This flag is set if the client was forced to drop hints because the number
	// of queued hints exceeded its limit.  The oldest hints will be discarded
	// first.  Introduced in M29.
	ClientDroppedHints *bool `protobuf:"varint,2,opt,name=client_dropped_hints,json=clientDroppedHints" json:"client_dropped_hints,omitempty"`
	// This flag is set when the client suspects that its list of invalidation
	// hints may be incomplete.  This may be the case if:
	// - The client is syncing for the first time.
	// - The client has just restarted and it was unable to keep track of
	//   invalidations that were received prior to the restart.
	// - The client's connection to the invalidation server is currently or
	//   was recently broken.
	//
	// It's difficult to provide more details here.  This is implemented by
	// setting the flag to false whenever anything that might adversely affect
	// notifications happens (eg. a crash, restart on a platform that doesn't
	// support invalidation ack-tracking, transient invalidation error) and is
	// unset only after we've experienced one successful sync cycle while
	// notifications were enabled.
	//
	// This flag was introduced in M29.
	InvalidationsOutOfSync *bool `protobuf:"varint,3,opt,name=invalidations_out_of_sync,json=invalidationsOutOfSync" json:"invalidations_out_of_sync,omitempty"`
	// This counts the number of times the syncer has been asked to commit
	// changes for this type since the last successful sync cycle.  The number of
	// nudges may not be related to the actual number of items modified.  It
	// often correlates with the number of user actions, but that's not always
	// the case.
	// Introduced in M29.
	LocalModificationNudges *int64 `protobuf:"varint,4,opt,name=local_modification_nudges,json=localModificationNudges" json:"local_modification_nudges,omitempty"`
	// This counts the number of times the syncer has been explicitly asked to
	// fetch updates for this type since the last successful sync cycle.  These
	// explicit refresh requests should be relatively rare on most platforms, and
	// associated with user actions.  For example, at the time of this writing
	// the most common (only?) source of refresh requests is when a user opens
	// the new tab page on a platform that does not support sessions
	// invalidations.
	// Introduced in M29.
	DatatypeRefreshNudges *int64 `protobuf:"varint,5,opt,name=datatype_refresh_nudges,json=datatypeRefreshNudges" json:"datatype_refresh_nudges,omitempty"`
	// This flag is set if the invalidation server reports that it may have
	// dropped some invalidations at some point.  Introduced in M33.
	ServerDroppedHints *bool `protobuf:"varint,6,opt,name=server_dropped_hints,json=serverDroppedHints" json:"server_dropped_hints,omitempty"`
	// This flag is set if this GetUpdate request is due at least in part due
	// to the fact that this type has not finished initial sync yet, and the
	// client would like to initialize itself with the server data.
	//
	// Only some types support performing an initial sync as part of a normal
	// GetUpdate request.  Many types must be in configure mode when fetching
	// initial sync data.
	//
	// Introduced in M38.
	InitialSyncInProgress *bool `protobuf:"varint,7,opt,name=initial_sync_in_progress,json=initialSyncInProgress" json:"initial_sync_in_progress,omitempty"`
	// This flag is set if this GetUpdate request is due to client receiving
	// conflict response from server, so client needs to sync and then resolve
	// conflict locally, and then commit again.
	//
	// Introduced in M42.
	SyncForResolveConflictInProgress *bool `protobuf:"varint,8,opt,name=sync_for_resolve_conflict_in_progress,json=syncForResolveConflictInProgress" json:"sync_for_resolve_conflict_in_progress,omitempty"`
}

func (x *GetUpdateTriggers) Reset() {
	*x = GetUpdateTriggers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateTriggers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateTriggers) ProtoMessage() {}

func (x *GetUpdateTriggers) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateTriggers.ProtoReflect.Descriptor instead.
func (*GetUpdateTriggers) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{6}
}

func (x *GetUpdateTriggers) GetNotificationHint() []string {
	if x != nil {
		return x.NotificationHint
	}
	return nil
}

func (x *GetUpdateTriggers) GetClientDroppedHints() bool {
	if x != nil && x.ClientDroppedHints != nil {
		return *x.ClientDroppedHints
	}
	return false
}

func (x *GetUpdateTriggers) GetInvalidationsOutOfSync() bool {
	if x != nil && x.InvalidationsOutOfSync != nil {
		return *x.InvalidationsOutOfSync
	}
	return false
}

func (x *GetUpdateTriggers) GetLocalModificationNudges() int64 {
	if x != nil && x.LocalModificationNudges != nil {
		return *x.LocalModificationNudges
	}
	return 0
}

func (x *GetUpdateTriggers) GetDatatypeRefreshNudges() int64 {
	if x != nil && x.DatatypeRefreshNudges != nil {
		return *x.DatatypeRefreshNudges
	}
	return 0
}

func (x *GetUpdateTriggers) GetServerDroppedHints() bool {
	if x != nil && x.ServerDroppedHints != nil {
		return *x.ServerDroppedHints
	}
	return false
}

func (x *GetUpdateTriggers) GetInitialSyncInProgress() bool {
	if x != nil && x.InitialSyncInProgress != nil {
		return *x.InitialSyncInProgress
	}
	return false
}

func (x *GetUpdateTriggers) GetSyncForResolveConflictInProgress() bool {
	if x != nil && x.SyncForResolveConflictInProgress != nil {
		return *x.SyncForResolveConflictInProgress
	}
	return false
}

type GarbageCollectionDirective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *GarbageCollectionDirective_Type `protobuf:"varint,1,opt,name=type,enum=sync_pb.GarbageCollectionDirective_Type,def=0" json:"type,omitempty"`
	// This field specifies the watermark for the versions which should get
	// garbage collected.  The client should purge all sync entities when
	// receiving any value of this.  This is a change from previous behavior,
	// where the client would only be required to purge items older than the
	// specified watermark.
	// TODO(crbug.com/877951): Rename this to make clear that whenever it's set,
	// the client will delete ALL data, regardless of its value.
	VersionWatermark *int64 `protobuf:"varint,2,opt,name=version_watermark,json=versionWatermark" json:"version_watermark,omitempty"`
	// This field specifies the watermark in terms of age in days.  The client
	// should purge all sync entities which are older than this specific value
	// based on last modified time.
	AgeWatermarkInDays *int32 `protobuf:"varint,3,opt,name=age_watermark_in_days,json=ageWatermarkInDays" json:"age_watermark_in_days,omitempty"`
}

// Default values for GarbageCollectionDirective fields.
const (
	Default_GarbageCollectionDirective_Type = GarbageCollectionDirective_UNKNOWN
)

func (x *GarbageCollectionDirective) Reset() {
	*x = GarbageCollectionDirective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GarbageCollectionDirective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GarbageCollectionDirective) ProtoMessage() {}

func (x *GarbageCollectionDirective) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GarbageCollectionDirective.ProtoReflect.Descriptor instead.
func (*GarbageCollectionDirective) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{7}
}

func (x *GarbageCollectionDirective) GetType() GarbageCollectionDirective_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GarbageCollectionDirective_Type
}

func (x *GarbageCollectionDirective) GetVersionWatermark() int64 {
	if x != nil && x.VersionWatermark != nil {
		return *x.VersionWatermark
	}
	return 0
}

func (x *GarbageCollectionDirective) GetAgeWatermarkInDays() int32 {
	if x != nil && x.AgeWatermarkInDays != nil {
		return *x.AgeWatermarkInDays
	}
	return 0
}

type DataTypeProgressMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An integer identifying the data type whose progress is tracked by this
	// marker.  The legitimate values of this field correspond to the protobuf
	// field numbers of all EntitySpecifics fields supported by the server.
	// These values are externally declared in per-datatype .proto files.
	DataTypeId *int32 `protobuf:"varint,1,opt,name=data_type_id,json=dataTypeId" json:"data_type_id,omitempty"`
	// An opaque-to-the-client sequence of bytes that the server may interpret
	// as an indicator of the client's knowledge state.  If this is empty or
	// omitted by the client, it indicates that the client is initiating a
	// a first-time sync of this datatype.  Otherwise, clients must supply a
	// value previously returned by the server in an earlier GetUpdatesResponse.
	// These values are not comparable or generable on the client.
	//
	// The opaque semantics of this field are to afford server implementations
	// some flexibility in implementing progress tracking.  For instance,
	// a server implementation built on top of a distributed storage service --
	// or multiple heterogenous such services -- might need to supply a vector
	// of totally ordered monotonic update timestamps, rather than a single
	// monotonically increasing value.  Other optimizations may also be
	// possible if the server is allowed to embed arbitrary information in
	// the progress token.
	//
	// Server implementations should keep the size of these tokens relatively
	// small, on the order of tens of bytes, and they should remain small
	// regardless of the number of items synchronized.  (A possible bad server
	// implementation would be for progress_token to contain a list of all the
	// items ever sent to the client.  Servers shouldn't do this.)
	Token []byte `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	// Clients that previously downloaded updates synced using the timestamp based
	// progress tracking mechanism, but which wish to switch over to the opaque
	// token mechanism can set this field in a GetUpdatesMessage.  The server
	// will perform a get updates operation as normal from the indicated
	// timestamp, and return only an opaque progress token.
	//
	// Deprecated: Do not use.
	TimestampTokenForMigration *int64 `protobuf:"varint,3,opt,name=timestamp_token_for_migration,json=timestampTokenForMigration" json:"timestamp_token_for_migration,omitempty"`
	// An opaque-to-the-client string of bytes, received through a notification,
	// that the server may interpret as a hint about the location of the latest
	// version of the data for this type.
	//
	// Deprecated in M29.  We should use the repeated field version in the
	// PerClientTypeState instead.
	//
	// Deprecated: Do not use.
	NotificationHint *string `protobuf:"bytes,4,opt,name=notification_hint,json=notificationHint" json:"notification_hint,omitempty"`
	// This field will be included only in GetUpdates with origin GU_TRIGGER.
	GetUpdateTriggers *GetUpdateTriggers `protobuf:"bytes,5,opt,name=get_update_triggers,json=getUpdateTriggers" json:"get_update_triggers,omitempty"`
	// The garbage collection directive for this data type.  The client should
	// purge items locally based on this directive.  Since this directive is
	// designed to be sent from server only, the client should persist it locally
	// as needed and avoid sending it to the server.
	GcDirective *GarbageCollectionDirective `protobuf:"bytes,6,opt,name=gc_directive,json=gcDirective" json:"gc_directive,omitempty"`
}

func (x *DataTypeProgressMarker) Reset() {
	*x = DataTypeProgressMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTypeProgressMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTypeProgressMarker) ProtoMessage() {}

func (x *DataTypeProgressMarker) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTypeProgressMarker.ProtoReflect.Descriptor instead.
func (*DataTypeProgressMarker) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{8}
}

func (x *DataTypeProgressMarker) GetDataTypeId() int32 {
	if x != nil && x.DataTypeId != nil {
		return *x.DataTypeId
	}
	return 0
}

func (x *DataTypeProgressMarker) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

// Deprecated: Do not use.
func (x *DataTypeProgressMarker) GetTimestampTokenForMigration() int64 {
	if x != nil && x.TimestampTokenForMigration != nil {
		return *x.TimestampTokenForMigration
	}
	return 0
}

// Deprecated: Do not use.
func (x *DataTypeProgressMarker) GetNotificationHint() string {
	if x != nil && x.NotificationHint != nil {
		return *x.NotificationHint
	}
	return ""
}

func (x *DataTypeProgressMarker) GetGetUpdateTriggers() *GetUpdateTriggers {
	if x != nil {
		return x.GetUpdateTriggers
	}
	return nil
}

func (x *DataTypeProgressMarker) GetGcDirective() *GarbageCollectionDirective {
	if x != nil {
		return x.GcDirective
	}
	return nil
}

type GetUpdatesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the reason for the GetUpdatesMessage.
	// This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
	// encode the reason for the GetUpdates request, but some parts of the server
	// still rely on this field.  It also still contains the
	// "notifications_enabled" flag which needs to be moved elsewhere before this
	// can be fully removed. See https://crbug.com/510165.
	CallerInfo *GetUpdatesCallerInfo `protobuf:"bytes,2,opt,name=caller_info,json=callerInfo" json:"caller_info,omitempty"`
	// Indicates whether related folders should be fetched.
	FetchFolders *bool `protobuf:"varint,3,opt,name=fetch_folders,json=fetchFolders,def=1" json:"fetch_folders,omitempty"`
	// Client-requested limit on the maximum number of updates to return at once.
	// The server may opt to return fewer updates than this amount, but it should
	// not return more.
	BatchSize *int32 `protobuf:"varint,5,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	// Per-datatype progress marker.  If present, the server will ignore
	// the values of requested_types and from_timestamp, using this instead.
	//
	// With the exception of certain configuration or initial sync requests, the
	// client should include one instance of this field for each enabled data
	// type.
	FromProgressMarker []*DataTypeProgressMarker `protobuf:"bytes,6,rep,name=from_progress_marker,json=fromProgressMarker" json:"from_progress_marker,omitempty"`
	// Indicates whether the response should be sent in chunks.  This may be
	// needed for devices with limited memory resources.  If true, the response
	// will include one or more ClientToServerResponses, with the frist one
	// containing GetUpdatesMetadataResponse, and the remaining ones, if any,
	// containing GetUpdatesStreamingResponse.  These ClientToServerResponses are
	// delimited by a length prefix, which is encoded as a varint.
	Streaming *bool `protobuf:"varint,7,opt,name=streaming,def=0" json:"streaming,omitempty"`
	// Whether the client needs the server to provide an encryption key for this
	// account.
	// Note: this should typically only be set on the first GetUpdates a client
	// requests. Clients are expected to persist the encryption key from then on.
	// The allowed frequency for requesting encryption keys is much lower than
	// other datatypes, so repeated usage will likely result in throttling.
	NeedEncryptionKey *bool `protobuf:"varint,8,opt,name=need_encryption_key,json=needEncryptionKey,def=0" json:"need_encryption_key,omitempty"`
	// Whether to create the mobile bookmarks folder if it's not
	// already created.  Set to true by all modern clients.
	//
	// Deprecated: Do not use.
	CreateMobileBookmarksFolder *bool `protobuf:"varint,1000,opt,name=create_mobile_bookmarks_folder,json=createMobileBookmarksFolder,def=0" json:"create_mobile_bookmarks_folder,omitempty"`
	// This value is an updated version of the GetUpdatesCallerInfo's
	// GetUpdatesSource.  It describes the reason for the GetUpdate request.
	// Introduced in M29.
	GetUpdatesOrigin *SyncEnums_GetUpdatesOrigin `protobuf:"varint,9,opt,name=get_updates_origin,json=getUpdatesOrigin,enum=sync_pb.SyncEnums_GetUpdatesOrigin" json:"get_updates_origin,omitempty"`
	// Whether this GU also serves as a retry GU. Any GU that happens after
	// retry timer timeout is a retry GU effectively.
	IsRetry *bool `protobuf:"varint,10,opt,name=is_retry,json=isRetry,def=0" json:"is_retry,omitempty"`
	// Set of optional per-client datatype contexts.
	ClientContexts []*DataTypeContext `protobuf:"bytes,11,rep,name=client_contexts,json=clientContexts" json:"client_contexts,omitempty"`
}

// Default values for GetUpdatesMessage fields.
const (
	Default_GetUpdatesMessage_FetchFolders                = bool(true)
	Default_GetUpdatesMessage_Streaming                   = bool(false)
	Default_GetUpdatesMessage_NeedEncryptionKey           = bool(false)
	Default_GetUpdatesMessage_CreateMobileBookmarksFolder = bool(false)
	Default_GetUpdatesMessage_IsRetry                     = bool(false)
)

func (x *GetUpdatesMessage) Reset() {
	*x = GetUpdatesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdatesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdatesMessage) ProtoMessage() {}

func (x *GetUpdatesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdatesMessage.ProtoReflect.Descriptor instead.
func (*GetUpdatesMessage) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{9}
}

func (x *GetUpdatesMessage) GetCallerInfo() *GetUpdatesCallerInfo {
	if x != nil {
		return x.CallerInfo
	}
	return nil
}

func (x *GetUpdatesMessage) GetFetchFolders() bool {
	if x != nil && x.FetchFolders != nil {
		return *x.FetchFolders
	}
	return Default_GetUpdatesMessage_FetchFolders
}

func (x *GetUpdatesMessage) GetBatchSize() int32 {
	if x != nil && x.BatchSize != nil {
		return *x.BatchSize
	}
	return 0
}

func (x *GetUpdatesMessage) GetFromProgressMarker() []*DataTypeProgressMarker {
	if x != nil {
		return x.FromProgressMarker
	}
	return nil
}

func (x *GetUpdatesMessage) GetStreaming() bool {
	if x != nil && x.Streaming != nil {
		return *x.Streaming
	}
	return Default_GetUpdatesMessage_Streaming
}

func (x *GetUpdatesMessage) GetNeedEncryptionKey() bool {
	if x != nil && x.NeedEncryptionKey != nil {
		return *x.NeedEncryptionKey
	}
	return Default_GetUpdatesMessage_NeedEncryptionKey
}

// Deprecated: Do not use.
func (x *GetUpdatesMessage) GetCreateMobileBookmarksFolder() bool {
	if x != nil && x.CreateMobileBookmarksFolder != nil {
		return *x.CreateMobileBookmarksFolder
	}
	return Default_GetUpdatesMessage_CreateMobileBookmarksFolder
}

func (x *GetUpdatesMessage) GetGetUpdatesOrigin() SyncEnums_GetUpdatesOrigin {
	if x != nil && x.GetUpdatesOrigin != nil {
		return *x.GetUpdatesOrigin
	}
	return SyncEnums_UNKNOWN_ORIGIN
}

func (x *GetUpdatesMessage) GetIsRetry() bool {
	if x != nil && x.IsRetry != nil {
		return *x.IsRetry
	}
	return Default_GetUpdatesMessage_IsRetry
}

func (x *GetUpdatesMessage) GetClientContexts() []*DataTypeContext {
	if x != nil {
		return x.ClientContexts
	}
	return nil
}

// Message from a client asking the server to clear its data.
type ClearServerDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearServerDataMessage) Reset() {
	*x = ClearServerDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearServerDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearServerDataMessage) ProtoMessage() {}

func (x *ClearServerDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearServerDataMessage.ProtoReflect.Descriptor instead.
func (*ClearServerDataMessage) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{10}
}

// Response to a ClearServerData request.
type ClearServerDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearServerDataResponse) Reset() {
	*x = ClearServerDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearServerDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearServerDataResponse) ProtoMessage() {}

func (x *ClearServerDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearServerDataResponse.ProtoReflect.Descriptor instead.
func (*ClearServerDataResponse) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{11}
}

// The client must preserve, store, and resend the chip bag with
// every request.  The server depends on the chip bag in order
// to precisely choreograph a client-server state machines.
//
// Because the client stores and sends this data on every request,
// the contents of the chip bag should be kept relatively small.
//
// If the server does not return a chip bag, the client must assume
// that there has been no change to the chip bag.  The client must
// resend the bag of chips it had prior on the next request.
//
// The client must make the chip bag durable if and only if it
// processes the response from the server.
type ChipBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server chips are deliberately oqaque, allowing the server
	// to encapsulate its state machine logic.
	ServerChips []byte `protobuf:"bytes,1,opt,name=server_chips,json=serverChips" json:"server_chips,omitempty"`
}

func (x *ChipBag) Reset() {
	*x = ChipBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChipBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChipBag) ProtoMessage() {}

func (x *ChipBag) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChipBag.ProtoReflect.Descriptor instead.
func (*ChipBag) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{12}
}

func (x *ChipBag) GetServerChips() []byte {
	if x != nil {
		return x.ServerChips
	}
	return nil
}

// Information about the syncer's state.
type ClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag to indicate if the client has detected hierarchy conflcits.  The flag
	// is left unset if update application has not been attempted yet.
	//
	// The server should attempt to resolve any hierarchy conflicts when this flag
	// is set.  The client may not assume that any particular action will be
	// taken.  There is no guarantee the problem will be addressed in a reasonable
	// amount of time.
	HierarchyConflictDetected *bool `protobuf:"varint,1,opt,name=hierarchy_conflict_detected,json=hierarchyConflictDetected" json:"hierarchy_conflict_detected,omitempty"`
	// Whether the client has full sync (or, sync the feature) enabled or not.
	IsSyncFeatureEnabled *bool `protobuf:"varint,2,opt,name=is_sync_feature_enabled,json=isSyncFeatureEnabled" json:"is_sync_feature_enabled,omitempty"`
}

func (x *ClientStatus) Reset() {
	*x = ClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStatus) ProtoMessage() {}

func (x *ClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStatus.ProtoReflect.Descriptor instead.
func (*ClientStatus) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{13}
}

func (x *ClientStatus) GetHierarchyConflictDetected() bool {
	if x != nil && x.HierarchyConflictDetected != nil {
		return *x.HierarchyConflictDetected
	}
	return false
}

func (x *ClientStatus) GetIsSyncFeatureEnabled() bool {
	if x != nil && x.IsSyncFeatureEnabled != nil {
		return *x.IsSyncFeatureEnabled
	}
	return false
}

// A single datatype's sync context. Allows the datatype to pass along
// datatype specific information with its own server backend.
type DataTypeContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type this context is associated with.
	DataTypeId *int32 `protobuf:"varint,1,opt,name=data_type_id,json=dataTypeId" json:"data_type_id,omitempty"`
	// The context for the datatype.
	Context []byte `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	// The version of the context.
	Version *int64 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (x *DataTypeContext) Reset() {
	*x = DataTypeContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTypeContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTypeContext) ProtoMessage() {}

func (x *DataTypeContext) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTypeContext.ProtoReflect.Descriptor instead.
func (*DataTypeContext) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{14}
}

func (x *DataTypeContext) GetDataTypeId() int32 {
	if x != nil && x.DataTypeId != nil {
		return *x.DataTypeId
	}
	return 0
}

func (x *DataTypeContext) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DataTypeContext) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type ClientToServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// |share| field is only used on the server for logging and can sometimes
	// contain empty string. It is still useful for logging username when it can't
	// be derived from access token in case of auth error.
	Share           *string `protobuf:"bytes,1,req,name=share" json:"share,omitempty"`
	ProtocolVersion *int32  `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,def=52" json:"protocol_version,omitempty"`
	// Each ClientToServerMessage contains one request defined by the
	// message_contents. Each type has a corresponding message field that will be
	// present iff the message is of that type. E.g. a commit message will have a
	// message_contents of COMMIT and its commit field will be present.
	MessageContents *ClientToServerMessage_Contents `protobuf:"varint,3,req,name=message_contents,json=messageContents,enum=sync_pb.ClientToServerMessage_Contents" json:"message_contents,omitempty"`
	Commit          *CommitMessage                  `protobuf:"bytes,4,opt,name=commit" json:"commit,omitempty"`
	GetUpdates      *GetUpdatesMessage              `protobuf:"bytes,5,opt,name=get_updates,json=getUpdates" json:"get_updates,omitempty"`
	StoreBirthday   *string                         `protobuf:"bytes,7,opt,name=store_birthday,json=storeBirthday" json:"store_birthday,omitempty"` // Opaque store ID; if it changes, duck!
	// The client sets this if it detects a sync issue. The server will tell it
	// if it should perform a refresh.
	SyncProblemDetected *bool `protobuf:"varint,8,opt,name=sync_problem_detected,json=syncProblemDetected,def=0" json:"sync_problem_detected,omitempty"`
	// Client side state information for debugging purpose.
	// This is only sent on the first getupdates of every sync cycle,
	// as an optimization to save bandwidth.
	DebugInfo *DebugInfo `protobuf:"bytes,10,opt,name=debug_info,json=debugInfo" json:"debug_info,omitempty"`
	// Per-client state for use by the server. Sent with every message sent to the
	// server.
	BagOfChips *ChipBag `protobuf:"bytes,11,opt,name=bag_of_chips,json=bagOfChips" json:"bag_of_chips,omitempty"`
	// Google API key.
	ApiKey *string `protobuf:"bytes,12,opt,name=api_key,json=apiKey" json:"api_key,omitempty"`
	// Client's self-reported state.
	// The client should set this on every message sent to the server, though its
	// member fields may often be unset.
	ClientStatus *ClientStatus `protobuf:"bytes,13,opt,name=client_status,json=clientStatus" json:"client_status,omitempty"`
	// The ID that our invalidation client used to identify itself to the server.
	// Sending the ID here allows the server to not send notifications of our own
	// changes to our invalidator.
	InvalidatorClientId *string `protobuf:"bytes,14,opt,name=invalidator_client_id,json=invalidatorClientId" json:"invalidator_client_id,omitempty"`
	// Identifies this ClientToServerMessage as a clear server data request. This
	// field is present when message_contents is CLEAR_SERVER_DATA.
	ClearServerData *ClearServerDataMessage `protobuf:"bytes,15,opt,name=clear_server_data,json=clearServerData" json:"clear_server_data,omitempty"`
}

// Default values for ClientToServerMessage fields.
const (
	Default_ClientToServerMessage_ProtocolVersion     = int32(52)
	Default_ClientToServerMessage_SyncProblemDetected = bool(false)
)

func (x *ClientToServerMessage) Reset() {
	*x = ClientToServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientToServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServerMessage) ProtoMessage() {}

func (x *ClientToServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServerMessage.ProtoReflect.Descriptor instead.
func (*ClientToServerMessage) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{15}
}

func (x *ClientToServerMessage) GetShare() string {
	if x != nil && x.Share != nil {
		return *x.Share
	}
	return ""
}

func (x *ClientToServerMessage) GetProtocolVersion() int32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return Default_ClientToServerMessage_ProtocolVersion
}

func (x *ClientToServerMessage) GetMessageContents() ClientToServerMessage_Contents {
	if x != nil && x.MessageContents != nil {
		return *x.MessageContents
	}
	return ClientToServerMessage_COMMIT
}

func (x *ClientToServerMessage) GetCommit() *CommitMessage {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *ClientToServerMessage) GetGetUpdates() *GetUpdatesMessage {
	if x != nil {
		return x.GetUpdates
	}
	return nil
}

func (x *ClientToServerMessage) GetStoreBirthday() string {
	if x != nil && x.StoreBirthday != nil {
		return *x.StoreBirthday
	}
	return ""
}

func (x *ClientToServerMessage) GetSyncProblemDetected() bool {
	if x != nil && x.SyncProblemDetected != nil {
		return *x.SyncProblemDetected
	}
	return Default_ClientToServerMessage_SyncProblemDetected
}

func (x *ClientToServerMessage) GetDebugInfo() *DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *ClientToServerMessage) GetBagOfChips() *ChipBag {
	if x != nil {
		return x.BagOfChips
	}
	return nil
}

func (x *ClientToServerMessage) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *ClientToServerMessage) GetClientStatus() *ClientStatus {
	if x != nil {
		return x.ClientStatus
	}
	return nil
}

func (x *ClientToServerMessage) GetInvalidatorClientId() string {
	if x != nil && x.InvalidatorClientId != nil {
		return *x.InvalidatorClientId
	}
	return ""
}

func (x *ClientToServerMessage) GetClearServerData() *ClearServerDataMessage {
	if x != nil {
		return x.ClearServerData
	}
	return nil
}

// This request allows the client to convert a specific crash identifier
// into more general information (e.g. hash of the crashing call stack)
// suitable for upload in an (authenticated) DebugInfo event.
type GetCrashInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the uploaded crash.
	CrashId *string `protobuf:"bytes,1,opt,name=crash_id,json=crashId" json:"crash_id,omitempty"`
	// Time that the crash occurred.
	CrashTimeMillis *int64 `protobuf:"varint,2,opt,name=crash_time_millis,json=crashTimeMillis" json:"crash_time_millis,omitempty"`
}

func (x *GetCrashInfoRequest) Reset() {
	*x = GetCrashInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrashInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrashInfoRequest) ProtoMessage() {}

func (x *GetCrashInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrashInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCrashInfoRequest) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{16}
}

func (x *GetCrashInfoRequest) GetCrashId() string {
	if x != nil && x.CrashId != nil {
		return *x.CrashId
	}
	return ""
}

func (x *GetCrashInfoRequest) GetCrashTimeMillis() int64 {
	if x != nil && x.CrashTimeMillis != nil {
		return *x.CrashTimeMillis
	}
	return 0
}

// Proto to be written in its entirety to the debug info log.
type GetCrashInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the crashing call stack.
	StackId *string `protobuf:"bytes,1,opt,name=stack_id,json=stackId" json:"stack_id,omitempty"`
	// Time of the crash, potentially rounded to remove
	// significant bits.
	CrashTimeMillis *int64 `protobuf:"varint,2,opt,name=crash_time_millis,json=crashTimeMillis" json:"crash_time_millis,omitempty"`
}

func (x *GetCrashInfoResponse) Reset() {
	*x = GetCrashInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrashInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrashInfoResponse) ProtoMessage() {}

func (x *GetCrashInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrashInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCrashInfoResponse) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{17}
}

func (x *GetCrashInfoResponse) GetStackId() string {
	if x != nil && x.StackId != nil {
		return *x.StackId
	}
	return ""
}

func (x *GetCrashInfoResponse) GetCrashTimeMillis() int64 {
	if x != nil && x.CrashTimeMillis != nil {
		return *x.CrashTimeMillis
	}
	return 0
}

type CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entryresponse []*CommitResponse_EntryResponse `protobuf:"group,1,rep,name=EntryResponse,json=entryresponse" json:"entryresponse,omitempty"`
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{18}
}

func (x *CommitResponse) GetEntryresponse() []*CommitResponse_EntryResponse {
	if x != nil {
		return x.Entryresponse
	}
	return nil
}

type GetUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New sync entries that the client should apply.
	Entries []*SyncEntity `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	// Approximate count of changes remaining - use this for UI feedback.
	// If present and zero, this estimate is firm: the server has no changes
	// after the current batch.
	ChangesRemaining *int64 `protobuf:"varint,4,opt,name=changes_remaining,json=changesRemaining" json:"changes_remaining,omitempty"`
	// Opaque, per-datatype timestamp-like tokens.  Clients should retain and
	// persist the values returned in this field, and present them back to the
	// server to indicate the starting point for future update requests.
	//
	// This will be sent only if the client provided |from_progress_marker|
	// in the update request.
	//
	// The server may provide a new progress marker even if this is the end of
	// the batch, or if there were no new updates on the server; and the client
	// must save these.  If the server does not provide a |new_progress_marker|
	// value for a particular datatype, when the request provided a
	// |from_progress_marker| value for that datatype, the client should
	// interpret this to mean "no change from the previous state" and retain its
	// previous progress-marker value for that datatype.
	//
	// Progress markers in the context of a response will never have the
	// |timestamp_token_for_migration| field set.
	NewProgressMarker []*DataTypeProgressMarker `protobuf:"bytes,5,rep,name=new_progress_marker,json=newProgressMarker" json:"new_progress_marker,omitempty"`
	// The current encryption keys associated with this account. Will be set if
	// the GetUpdatesMessage in the request had need_encryption_key == true or
	// the server has updated the set of encryption keys (e.g. due to a key
	// rotation).
	EncryptionKeys [][]byte `protobuf:"bytes,6,rep,name=encryption_keys,json=encryptionKeys" json:"encryption_keys,omitempty"`
	// Set of optional datatype contexts server mutations.
	ContextMutations []*DataTypeContext `protobuf:"bytes,7,rep,name=context_mutations,json=contextMutations" json:"context_mutations,omitempty"`
}

func (x *GetUpdatesResponse) Reset() {
	*x = GetUpdatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdatesResponse) ProtoMessage() {}

func (x *GetUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdatesResponse.ProtoReflect.Descriptor instead.
func (*GetUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{19}
}

func (x *GetUpdatesResponse) GetEntries() []*SyncEntity {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *GetUpdatesResponse) GetChangesRemaining() int64 {
	if x != nil && x.ChangesRemaining != nil {
		return *x.ChangesRemaining
	}
	return 0
}

func (x *GetUpdatesResponse) GetNewProgressMarker() []*DataTypeProgressMarker {
	if x != nil {
		return x.NewProgressMarker
	}
	return nil
}

func (x *GetUpdatesResponse) GetEncryptionKeys() [][]byte {
	if x != nil {
		return x.EncryptionKeys
	}
	return nil
}

func (x *GetUpdatesResponse) GetContextMutations() []*DataTypeContext {
	if x != nil {
		return x.ContextMutations
	}
	return nil
}

type ClientToServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit     *CommitResponse     `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	GetUpdates *GetUpdatesResponse `protobuf:"bytes,2,opt,name=get_updates,json=getUpdates" json:"get_updates,omitempty"`
	// Up until protocol_version 24, the default was SUCCESS which made it
	// impossible to add new enum values since older clients would parse any
	// out-of-range value as SUCCESS. Starting with 25, unless explicitly set,
	// the error_code will be UNKNOWN so that clients know when they're
	// out-of-date. Note also that when using protocol_version < 25,
	// TRANSIENT_ERROR is not supported. Instead, the server sends back a HTTP
	// 400 error code. This is deprecated now.
	ErrorCode    *SyncEnums_ErrorType `protobuf:"varint,4,opt,name=error_code,json=errorCode,enum=sync_pb.SyncEnums_ErrorType,def=100" json:"error_code,omitempty"`
	ErrorMessage *string              `protobuf:"bytes,5,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Opaque store ID; if it changes, the contents of the client's cache
	// is meaningless to this server.  This happens most typically when
	// you switch from one storage backend instance (say, a test instance)
	// to another (say, the official instance).
	StoreBirthday *string        `protobuf:"bytes,6,opt,name=store_birthday,json=storeBirthday" json:"store_birthday,omitempty"`
	ClientCommand *ClientCommand `protobuf:"bytes,7,opt,name=client_command,json=clientCommand" json:"client_command,omitempty"`
	ProfilingData *ProfilingData `protobuf:"bytes,8,opt,name=profiling_data,json=profilingData" json:"profiling_data,omitempty"`
	// The data types whose storage has been migrated.  Present when the value of
	// error_code is MIGRATION_DONE.
	MigratedDataTypeId []int32                       `protobuf:"varint,12,rep,name=migrated_data_type_id,json=migratedDataTypeId" json:"migrated_data_type_id,omitempty"`
	Error              *ClientToServerResponse_Error `protobuf:"bytes,13,opt,name=error" json:"error,omitempty"`
	// The new per-client state for this client. If set, should be persisted and
	// sent with any subsequent ClientToServerMessages.
	NewBagOfChips *ChipBag `protobuf:"bytes,14,opt,name=new_bag_of_chips,json=newBagOfChips" json:"new_bag_of_chips,omitempty"`
	// Present if this ClientToServerResponse is in response to a ClearServerData
	// request.
	ClearServerData *ClearServerDataResponse `protobuf:"bytes,15,opt,name=clear_server_data,json=clearServerData" json:"clear_server_data,omitempty"`
}

// Default values for ClientToServerResponse fields.
const (
	Default_ClientToServerResponse_ErrorCode = SyncEnums_UNKNOWN
)

func (x *ClientToServerResponse) Reset() {
	*x = ClientToServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientToServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServerResponse) ProtoMessage() {}

func (x *ClientToServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServerResponse.ProtoReflect.Descriptor instead.
func (*ClientToServerResponse) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{20}
}

func (x *ClientToServerResponse) GetCommit() *CommitResponse {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *ClientToServerResponse) GetGetUpdates() *GetUpdatesResponse {
	if x != nil {
		return x.GetUpdates
	}
	return nil
}

func (x *ClientToServerResponse) GetErrorCode() SyncEnums_ErrorType {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return Default_ClientToServerResponse_ErrorCode
}

func (x *ClientToServerResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ClientToServerResponse) GetStoreBirthday() string {
	if x != nil && x.StoreBirthday != nil {
		return *x.StoreBirthday
	}
	return ""
}

func (x *ClientToServerResponse) GetClientCommand() *ClientCommand {
	if x != nil {
		return x.ClientCommand
	}
	return nil
}

func (x *ClientToServerResponse) GetProfilingData() *ProfilingData {
	if x != nil {
		return x.ProfilingData
	}
	return nil
}

func (x *ClientToServerResponse) GetMigratedDataTypeId() []int32 {
	if x != nil {
		return x.MigratedDataTypeId
	}
	return nil
}

func (x *ClientToServerResponse) GetError() *ClientToServerResponse_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ClientToServerResponse) GetNewBagOfChips() *ChipBag {
	if x != nil {
		return x.NewBagOfChips
	}
	return nil
}

func (x *ClientToServerResponse) GetClearServerData() *ClearServerDataResponse {
	if x != nil {
		return x.ClearServerData
	}
	return nil
}

// A message to notify the server of certain sync events. Idempotent. Send these
// to the /event endpoint.
type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncDisabled *SyncDisabledEvent `protobuf:"bytes,1,opt,name=sync_disabled,json=syncDisabled" json:"sync_disabled,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{21}
}

func (x *EventRequest) GetSyncDisabled() *SyncDisabledEvent {
	if x != nil {
		return x.SyncDisabled
	}
	return nil
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{22}
}

// A message indicating that the sync engine has been disabled on a client.
type SyncDisabledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The GUID that identifies the sync client.
	CacheGuid *string `protobuf:"bytes,1,opt,name=cache_guid,json=cacheGuid" json:"cache_guid,omitempty"`
	// The store birthday that the client was using before disabling sync.
	StoreBirthday *string `protobuf:"bytes,2,opt,name=store_birthday,json=storeBirthday" json:"store_birthday,omitempty"`
}

func (x *SyncDisabledEvent) Reset() {
	*x = SyncDisabledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDisabledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDisabledEvent) ProtoMessage() {}

func (x *SyncDisabledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDisabledEvent.ProtoReflect.Descriptor instead.
func (*SyncDisabledEvent) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{23}
}

func (x *SyncDisabledEvent) GetCacheGuid() string {
	if x != nil && x.CacheGuid != nil {
		return *x.CacheGuid
	}
	return ""
}

func (x *SyncDisabledEvent) GetStoreBirthday() string {
	if x != nil && x.StoreBirthday != nil {
		return *x.StoreBirthday
	}
	return ""
}

type CommitResponse_EntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseType *CommitResponse_ResponseType `protobuf:"varint,2,req,name=response_type,json=responseType,enum=sync_pb.CommitResponse_ResponseType" json:"response_type,omitempty"`
	// Sync servers may also return a new ID for an existing item, indicating
	// a new entry's been created to hold the data the client's sending up.
	IdString *string `protobuf:"bytes,3,opt,name=id_string,json=idString" json:"id_string,omitempty"`
	// should be filled if our parent was assigned a new ID.
	ParentIdString *string `protobuf:"bytes,4,opt,name=parent_id_string,json=parentIdString" json:"parent_id_string,omitempty"`
	// The item's current version.
	Version *int64 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// Allows the server to move-aside an entry as it's being committed.
	// This name is the same as the name field returned within the SyncEntity
	// message in GetUpdatesResponse.
	Name *string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	// This name is the same as the non_unique_name field returned within the
	// SyncEntity message in GetUpdatesResponse.
	NonUniqueName *string `protobuf:"bytes,8,opt,name=non_unique_name,json=nonUniqueName" json:"non_unique_name,omitempty"`
	ErrorMessage  *string `protobuf:"bytes,9,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Last modification time (in java time milliseconds).  Allows the server
	// to override the client-supplied mtime during a commit operation.
	Mtime *int64 `protobuf:"varint,10,opt,name=mtime" json:"mtime,omitempty"`
	// Datatype specific error (if any).
	DatatypeSpecificError *CommitResponse_EntryResponse_DatatypeSpecificError `protobuf:"bytes,11,opt,name=datatype_specific_error,json=datatypeSpecificError" json:"datatype_specific_error,omitempty"`
}

func (x *CommitResponse_EntryResponse) Reset() {
	*x = CommitResponse_EntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse_EntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse_EntryResponse) ProtoMessage() {}

func (x *CommitResponse_EntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse_EntryResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse_EntryResponse) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CommitResponse_EntryResponse) GetResponseType() CommitResponse_ResponseType {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return CommitResponse_SUCCESS
}

func (x *CommitResponse_EntryResponse) GetIdString() string {
	if x != nil && x.IdString != nil {
		return *x.IdString
	}
	return ""
}

func (x *CommitResponse_EntryResponse) GetParentIdString() string {
	if x != nil && x.ParentIdString != nil {
		return *x.ParentIdString
	}
	return ""
}

func (x *CommitResponse_EntryResponse) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CommitResponse_EntryResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommitResponse_EntryResponse) GetNonUniqueName() string {
	if x != nil && x.NonUniqueName != nil {
		return *x.NonUniqueName
	}
	return ""
}

func (x *CommitResponse_EntryResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *CommitResponse_EntryResponse) GetMtime() int64 {
	if x != nil && x.Mtime != nil {
		return *x.Mtime
	}
	return 0
}

func (x *CommitResponse_EntryResponse) GetDatatypeSpecificError() *CommitResponse_EntryResponse_DatatypeSpecificError {
	if x != nil {
		return x.DatatypeSpecificError
	}
	return nil
}

type CommitResponse_EntryResponse_DatatypeSpecificError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DatatypeError:
	//	*CommitResponse_EntryResponse_DatatypeSpecificError_SharingMessageError
	DatatypeError isCommitResponse_EntryResponse_DatatypeSpecificError_DatatypeError `protobuf_oneof:"datatype_error"`
}

func (x *CommitResponse_EntryResponse_DatatypeSpecificError) Reset() {
	*x = CommitResponse_EntryResponse_DatatypeSpecificError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse_EntryResponse_DatatypeSpecificError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse_EntryResponse_DatatypeSpecificError) ProtoMessage() {}

func (x *CommitResponse_EntryResponse_DatatypeSpecificError) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse_EntryResponse_DatatypeSpecificError.ProtoReflect.Descriptor instead.
func (*CommitResponse_EntryResponse_DatatypeSpecificError) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{18, 0, 0}
}

func (m *CommitResponse_EntryResponse_DatatypeSpecificError) GetDatatypeError() isCommitResponse_EntryResponse_DatatypeSpecificError_DatatypeError {
	if m != nil {
		return m.DatatypeError
	}
	return nil
}

func (x *CommitResponse_EntryResponse_DatatypeSpecificError) GetSharingMessageError() *SharingMessageCommitError {
	if x, ok := x.GetDatatypeError().(*CommitResponse_EntryResponse_DatatypeSpecificError_SharingMessageError); ok {
		return x.SharingMessageError
	}
	return nil
}

type isCommitResponse_EntryResponse_DatatypeSpecificError_DatatypeError interface {
	isCommitResponse_EntryResponse_DatatypeSpecificError_DatatypeError()
}

type CommitResponse_EntryResponse_DatatypeSpecificError_SharingMessageError struct {
	SharingMessageError *SharingMessageCommitError `protobuf:"bytes,1,opt,name=sharing_message_error,json=sharingMessageError,oneof"`
}

func (*CommitResponse_EntryResponse_DatatypeSpecificError_SharingMessageError) isCommitResponse_EntryResponse_DatatypeSpecificError_DatatypeError() {
}

type ClientToServerResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorType        *SyncEnums_ErrorType `protobuf:"varint,1,opt,name=error_type,json=errorType,enum=sync_pb.SyncEnums_ErrorType,def=100" json:"error_type,omitempty"`
	ErrorDescription *string              `protobuf:"bytes,2,opt,name=error_description,json=errorDescription" json:"error_description,omitempty"`
	Action           *SyncEnums_Action    `protobuf:"varint,4,opt,name=action,enum=sync_pb.SyncEnums_Action,def=5" json:"action,omitempty"`
	// Currently meaningful if |error_type| is throttled or partial_failure.
	// In the throttled case, if this field is absent then the whole client
	// (all datatypes) is throttled.
	// In the partial_failure case, this field denotes partial failures. The
	// client should retry those datatypes with exponential backoff.
	ErrorDataTypeIds []int32 `protobuf:"varint,5,rep,name=error_data_type_ids,json=errorDataTypeIds" json:"error_data_type_ids,omitempty"`
}

// Default values for ClientToServerResponse_Error fields.
const (
	Default_ClientToServerResponse_Error_ErrorType = SyncEnums_UNKNOWN
	Default_ClientToServerResponse_Error_Action    = SyncEnums_UNKNOWN_ACTION
)

func (x *ClientToServerResponse_Error) Reset() {
	*x = ClientToServerResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientToServerResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServerResponse_Error) ProtoMessage() {}

func (x *ClientToServerResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_sync_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServerResponse_Error.ProtoReflect.Descriptor instead.
func (*ClientToServerResponse_Error) Descriptor() ([]byte, []int) {
	return file_sync_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ClientToServerResponse_Error) GetErrorType() SyncEnums_ErrorType {
	if x != nil && x.ErrorType != nil {
		return *x.ErrorType
	}
	return Default_ClientToServerResponse_Error_ErrorType
}

func (x *ClientToServerResponse_Error) GetErrorDescription() string {
	if x != nil && x.ErrorDescription != nil {
		return *x.ErrorDescription
	}
	return ""
}

func (x *ClientToServerResponse_Error) GetAction() SyncEnums_Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_ClientToServerResponse_Error_Action
}

func (x *ClientToServerResponse_Error) GetErrorDataTypeIds() []int32 {
	if x != nil {
		return x.ErrorDataTypeIds
	}
	return nil
}

var File_sync_proto protoreflect.FileDescriptor

var file_sync_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x1a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x72, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x66, 0x61, 0x76, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x66, 0x61, 0x76, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x65, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6e,
	0x69, 0x67, 0x6f, 0x72, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x77, 0x69, 0x66, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7,
	0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf0, 0x1a, 0x0a, 0x0f, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x09,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0xf1,
	0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x3a,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x88, 0x81, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xc6, 0xa6, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xcd, 0xbe, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x55, 0x72, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0xfa, 0xc1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x80, 0xe1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xb1, 0xe6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x6e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x18,
	0x81, 0xf5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x4e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x12, 0x3d, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xf7, 0xf7, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0xec, 0xf9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xc7, 0x87, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0xcf, 0xf3, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x18, 0xa2, 0xb4, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x9f, 0xef, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x41, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0xe8, 0xa9, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x66, 0x0a, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0xeb, 0x95, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x16, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5d, 0x0a, 0x13, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x94, 0xac, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1c, 0x73, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa8, 0xb2, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x19, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x9a, 0xb7, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0xd8, 0xed, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x13,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0xe1, 0xfc, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0xac, 0xb4, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x66, 0x61, 0x76,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x9e, 0x8a,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x61, 0x76, 0x69,
	0x63, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x0d, 0x66,
	0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x83, 0x8e, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x46,
	0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xa6, 0xb2, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x96, 0xf0, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x1b, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xaa, 0xaa, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a,
	0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x8c, 0xd7, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb2, 0xfe, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0xde, 0xd8, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xc9, 0x95, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x72, 0x63, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xaa, 0xe7, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x63, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x72, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xf9, 0x88, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x94, 0x8b, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xa6, 0xe4, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xee, 0xf7, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0xfc, 0xde, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x54, 0x6f, 0x53,
	0x65, 0x6c, 0x66, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x4a, 0x0a,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0xb4, 0xd2, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x70, 0x70, 0x18, 0xc9, 0x8b, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x62, 0x41, 0x70, 0x70,
	0x12, 0x56, 0x0a, 0x12, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xab, 0xba, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x11, 0x77, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xbd, 0xed, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4f, 0x73, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x60, 0x0a, 0x16, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xab, 0xfb, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4f, 0x73,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x14, 0x6f,
	0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xa2, 0xbe, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x18, 0xb9, 0xa1, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x13,
	0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x4a, 0x08, 0x08, 0xbf, 0xa8, 0x0d, 0x10, 0xc0, 0xa8, 0x0d, 0x4a, 0x08, 0x08,
	0x8f, 0xd4, 0x0d, 0x10, 0x90, 0xd4, 0x0d, 0x4a, 0x08, 0x08, 0xed, 0xa1, 0x21, 0x10, 0xee, 0xa1,
	0x21, 0x52, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0xbd, 0x07, 0x0a, 0x0a,
	0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x61, 0x67, 0x12, 0x30,
	0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a,
	0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a,
	0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10,
	0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08,
	0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x1a, 0x10, 0x1b, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1a,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x21, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x61, 0x62, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x6a, 0x61, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x4a, 0x61, 0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x22, 0xd2, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x47, 0x75, 0x69,
	0x64, 0x12, 0x54, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xdd, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74,
	0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x64, 0x67,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6e, 0x75, 0x64, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x4e, 0x75, 0x64, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x25, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x1a, 0x47, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x67, 0x65,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x67, 0x65, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22, 0x60, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x54,
	0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x47, 0x45, 0x5f,
	0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x19, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x16, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x1d,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x11, 0x67,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x12, 0x46, 0x0a, 0x0c, 0x67, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x67, 0x63, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x82, 0x05, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29,
	0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x35, 0x0a, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x10, 0x67, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x52, 0x0e, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2c, 0x0a, 0x07, 0x43, 0x68, 0x69, 0x70, 0x42, 0x61, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x22, 0x85, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xba, 0x06, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x35, 0x32, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x15, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13,
	0x73, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0c, 0x62, 0x61, 0x67, 0x5f, 0x6f, 0x66,
	0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x42, 0x61, 0x67, 0x52, 0x0a,
	0x62, 0x61, 0x67, 0x4f, 0x66, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x62, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x5c,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x61, 0x73, 0x68, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x61,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0x5d, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x61, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0x97, 0x06, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0a, 0x32, 0x25, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xc7, 0x04, 0x0a, 0x0d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x73, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x15,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x83, 0x01, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x58, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x06, 0x22, 0xde, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xce, 0x07, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x39, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x42, 0x61, 0x67, 0x52, 0x0d, 0x6e, 0x65,
	0x77, 0x42, 0x61, 0x67, 0x4f, 0x66, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xf7, 0x01, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a,
	0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x79, 0x6e,
	0x63, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x42, 0x2b, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03, 0x50,
	0x01,
}

var (
	file_sync_proto_rawDescOnce sync.Once
	file_sync_proto_rawDescData = file_sync_proto_rawDesc
)

func file_sync_proto_rawDescGZIP() []byte {
	file_sync_proto_rawDescOnce.Do(func() {
		file_sync_proto_rawDescData = protoimpl.X.CompressGZIP(file_sync_proto_rawDescData)
	})
	return file_sync_proto_rawDescData
}

var file_sync_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sync_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_sync_proto_goTypes = []interface{}{
	(GarbageCollectionDirective_Type)(0),                       // 0: sync_pb.GarbageCollectionDirective.Type
	(ClientToServerMessage_Contents)(0),                        // 1: sync_pb.ClientToServerMessage.Contents
	(CommitResponse_ResponseType)(0),                           // 2: sync_pb.CommitResponse.ResponseType
	(*ProfilingData)(nil),                                      // 3: sync_pb.ProfilingData
	(*EntitySpecifics)(nil),                                    // 4: sync_pb.EntitySpecifics
	(*SyncEntity)(nil),                                         // 5: sync_pb.SyncEntity
	(*ChromiumExtensionsActivity)(nil),                         // 6: sync_pb.ChromiumExtensionsActivity
	(*ClientConfigParams)(nil),                                 // 7: sync_pb.ClientConfigParams
	(*CommitMessage)(nil),                                      // 8: sync_pb.CommitMessage
	(*GetUpdateTriggers)(nil),                                  // 9: sync_pb.GetUpdateTriggers
	(*GarbageCollectionDirective)(nil),                         // 10: sync_pb.GarbageCollectionDirective
	(*DataTypeProgressMarker)(nil),                             // 11: sync_pb.DataTypeProgressMarker
	(*GetUpdatesMessage)(nil),                                  // 12: sync_pb.GetUpdatesMessage
	(*ClearServerDataMessage)(nil),                             // 13: sync_pb.ClearServerDataMessage
	(*ClearServerDataResponse)(nil),                            // 14: sync_pb.ClearServerDataResponse
	(*ChipBag)(nil),                                            // 15: sync_pb.ChipBag
	(*ClientStatus)(nil),                                       // 16: sync_pb.ClientStatus
	(*DataTypeContext)(nil),                                    // 17: sync_pb.DataTypeContext
	(*ClientToServerMessage)(nil),                              // 18: sync_pb.ClientToServerMessage
	(*GetCrashInfoRequest)(nil),                                // 19: sync_pb.GetCrashInfoRequest
	(*GetCrashInfoResponse)(nil),                               // 20: sync_pb.GetCrashInfoResponse
	(*CommitResponse)(nil),                                     // 21: sync_pb.CommitResponse
	(*GetUpdatesResponse)(nil),                                 // 22: sync_pb.GetUpdatesResponse
	(*ClientToServerResponse)(nil),                             // 23: sync_pb.ClientToServerResponse
	(*EventRequest)(nil),                                       // 24: sync_pb.EventRequest
	(*EventResponse)(nil),                                      // 25: sync_pb.EventResponse
	(*SyncDisabledEvent)(nil),                                  // 26: sync_pb.SyncDisabledEvent
	(*CommitResponse_EntryResponse)(nil),                       // 27: sync_pb.CommitResponse.EntryResponse
	(*CommitResponse_EntryResponse_DatatypeSpecificError)(nil), // 28: sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError
	(*ClientToServerResponse_Error)(nil),                       // 29: sync_pb.ClientToServerResponse.Error
	(*EncryptedData)(nil),                                      // 30: sync_pb.EncryptedData
	(*AutofillSpecifics)(nil),                                  // 31: sync_pb.AutofillSpecifics
	(*BookmarkSpecifics)(nil),                                  // 32: sync_pb.BookmarkSpecifics
	(*PreferenceSpecifics)(nil),                                // 33: sync_pb.PreferenceSpecifics
	(*TypedUrlSpecifics)(nil),                                  // 34: sync_pb.TypedUrlSpecifics
	(*ThemeSpecifics)(nil),                                     // 35: sync_pb.ThemeSpecifics
	(*AppNotification)(nil),                                    // 36: sync_pb.AppNotification
	(*PasswordSpecifics)(nil),                                  // 37: sync_pb.PasswordSpecifics
	(*NigoriSpecifics)(nil),                                    // 38: sync_pb.NigoriSpecifics
	(*ExtensionSpecifics)(nil),                                 // 39: sync_pb.ExtensionSpecifics
	(*AppSpecifics)(nil),                                       // 40: sync_pb.AppSpecifics
	(*SessionSpecifics)(nil),                                   // 41: sync_pb.SessionSpecifics
	(*AutofillProfileSpecifics)(nil),                           // 42: sync_pb.AutofillProfileSpecifics
	(*SearchEngineSpecifics)(nil),                              // 43: sync_pb.SearchEngineSpecifics
	(*ExtensionSettingSpecifics)(nil),                          // 44: sync_pb.ExtensionSettingSpecifics
	(*AppSettingSpecifics)(nil),                                // 45: sync_pb.AppSettingSpecifics
	(*HistoryDeleteDirectiveSpecifics)(nil),                    // 46: sync_pb.HistoryDeleteDirectiveSpecifics
	(*SyncedNotificationSpecifics)(nil),                        // 47: sync_pb.SyncedNotificationSpecifics
	(*SyncedNotificationAppInfoSpecifics)(nil),                 // 48: sync_pb.SyncedNotificationAppInfoSpecifics
	(*DeviceInfoSpecifics)(nil),                                // 49: sync_pb.DeviceInfoSpecifics
	(*ExperimentsSpecifics)(nil),                               // 50: sync_pb.ExperimentsSpecifics
	(*PriorityPreferenceSpecifics)(nil),                        // 51: sync_pb.PriorityPreferenceSpecifics
	(*DictionarySpecifics)(nil),                                // 52: sync_pb.DictionarySpecifics
	(*FaviconTrackingSpecifics)(nil),                           // 53: sync_pb.FaviconTrackingSpecifics
	(*FaviconImageSpecifics)(nil),                              // 54: sync_pb.FaviconImageSpecifics
	(*ManagedUserSettingSpecifics)(nil),                        // 55: sync_pb.ManagedUserSettingSpecifics
	(*ManagedUserSpecifics)(nil),                               // 56: sync_pb.ManagedUserSpecifics
	(*ManagedUserSharedSettingSpecifics)(nil),                  // 57: sync_pb.ManagedUserSharedSettingSpecifics
	(*ManagedUserWhitelistSpecifics)(nil),                      // 58: sync_pb.ManagedUserWhitelistSpecifics
	(*AppListSpecifics)(nil),                                   // 59: sync_pb.AppListSpecifics
	(*AutofillWalletSpecifics)(nil),                            // 60: sync_pb.AutofillWalletSpecifics
	(*WalletMetadataSpecifics)(nil),                            // 61: sync_pb.WalletMetadataSpecifics
	(*ArcPackageSpecifics)(nil),                                // 62: sync_pb.ArcPackageSpecifics
	(*PrinterSpecifics)(nil),                                   // 63: sync_pb.PrinterSpecifics
	(*ReadingListSpecifics)(nil),                               // 64: sync_pb.ReadingListSpecifics
	(*UserEventSpecifics)(nil),                                 // 65: sync_pb.UserEventSpecifics
	(*UserConsentSpecifics)(nil),                               // 66: sync_pb.UserConsentSpecifics
	(*SendTabToSelfSpecifics)(nil),                             // 67: sync_pb.SendTabToSelfSpecifics
	(*SecurityEventSpecifics)(nil),                             // 68: sync_pb.SecurityEventSpecifics
	(*WebAppSpecifics)(nil),                                    // 69: sync_pb.WebAppSpecifics
	(*WifiConfigurationSpecifics)(nil),                         // 70: sync_pb.WifiConfigurationSpecifics
	(*OsPreferenceSpecifics)(nil),                              // 71: sync_pb.OsPreferenceSpecifics
	(*OsPriorityPreferenceSpecifics)(nil),                      // 72: sync_pb.OsPriorityPreferenceSpecifics
	(*SharingMessageSpecifics)(nil),                            // 73: sync_pb.SharingMessageSpecifics
	(*AutofillOfferSpecifics)(nil),                             // 74: sync_pb.AutofillOfferSpecifics
	(*UniquePosition)(nil),                                     // 75: sync_pb.UniquePosition
	(*GetUpdatesCallerInfo)(nil),                               // 76: sync_pb.GetUpdatesCallerInfo
	(SyncEnums_GetUpdatesOrigin)(0),                            // 77: sync_pb.SyncEnums.GetUpdatesOrigin
	(*DebugInfo)(nil),                                          // 78: sync_pb.DebugInfo
	(SyncEnums_ErrorType)(0),                                   // 79: sync_pb.SyncEnums.ErrorType
	(*ClientCommand)(nil),                                      // 80: sync_pb.ClientCommand
	(*SharingMessageCommitError)(nil),                          // 81: sync_pb.SharingMessageCommitError
	(SyncEnums_Action)(0),                                      // 82: sync_pb.SyncEnums.Action
}
var file_sync_proto_depIdxs = []int32{
	30, // 0: sync_pb.EntitySpecifics.encrypted:type_name -> sync_pb.EncryptedData
	31, // 1: sync_pb.EntitySpecifics.autofill:type_name -> sync_pb.AutofillSpecifics
	32, // 2: sync_pb.EntitySpecifics.bookmark:type_name -> sync_pb.BookmarkSpecifics
	33, // 3: sync_pb.EntitySpecifics.preference:type_name -> sync_pb.PreferenceSpecifics
	34, // 4: sync_pb.EntitySpecifics.typed_url:type_name -> sync_pb.TypedUrlSpecifics
	35, // 5: sync_pb.EntitySpecifics.theme:type_name -> sync_pb.ThemeSpecifics
	36, // 6: sync_pb.EntitySpecifics.app_notification:type_name -> sync_pb.AppNotification
	37, // 7: sync_pb.EntitySpecifics.password:type_name -> sync_pb.PasswordSpecifics
	38, // 8: sync_pb.EntitySpecifics.nigori:type_name -> sync_pb.NigoriSpecifics
	39, // 9: sync_pb.EntitySpecifics.extension:type_name -> sync_pb.ExtensionSpecifics
	40, // 10: sync_pb.EntitySpecifics.app:type_name -> sync_pb.AppSpecifics
	41, // 11: sync_pb.EntitySpecifics.session:type_name -> sync_pb.SessionSpecifics
	42, // 12: sync_pb.EntitySpecifics.autofill_profile:type_name -> sync_pb.AutofillProfileSpecifics
	43, // 13: sync_pb.EntitySpecifics.search_engine:type_name -> sync_pb.SearchEngineSpecifics
	44, // 14: sync_pb.EntitySpecifics.extension_setting:type_name -> sync_pb.ExtensionSettingSpecifics
	45, // 15: sync_pb.EntitySpecifics.app_setting:type_name -> sync_pb.AppSettingSpecifics
	46, // 16: sync_pb.EntitySpecifics.history_delete_directive:type_name -> sync_pb.HistoryDeleteDirectiveSpecifics
	47, // 17: sync_pb.EntitySpecifics.synced_notification:type_name -> sync_pb.SyncedNotificationSpecifics
	48, // 18: sync_pb.EntitySpecifics.synced_notification_app_info:type_name -> sync_pb.SyncedNotificationAppInfoSpecifics
	49, // 19: sync_pb.EntitySpecifics.device_info:type_name -> sync_pb.DeviceInfoSpecifics
	50, // 20: sync_pb.EntitySpecifics.experiments:type_name -> sync_pb.ExperimentsSpecifics
	51, // 21: sync_pb.EntitySpecifics.priority_preference:type_name -> sync_pb.PriorityPreferenceSpecifics
	52, // 22: sync_pb.EntitySpecifics.dictionary:type_name -> sync_pb.DictionarySpecifics
	53, // 23: sync_pb.EntitySpecifics.favicon_tracking:type_name -> sync_pb.FaviconTrackingSpecifics
	54, // 24: sync_pb.EntitySpecifics.favicon_image:type_name -> sync_pb.FaviconImageSpecifics
	55, // 25: sync_pb.EntitySpecifics.managed_user_setting:type_name -> sync_pb.ManagedUserSettingSpecifics
	56, // 26: sync_pb.EntitySpecifics.managed_user:type_name -> sync_pb.ManagedUserSpecifics
	57, // 27: sync_pb.EntitySpecifics.managed_user_shared_setting:type_name -> sync_pb.ManagedUserSharedSettingSpecifics
	58, // 28: sync_pb.EntitySpecifics.managed_user_whitelist:type_name -> sync_pb.ManagedUserWhitelistSpecifics
	59, // 29: sync_pb.EntitySpecifics.app_list:type_name -> sync_pb.AppListSpecifics
	60, // 30: sync_pb.EntitySpecifics.autofill_wallet:type_name -> sync_pb.AutofillWalletSpecifics
	61, // 31: sync_pb.EntitySpecifics.wallet_metadata:type_name -> sync_pb.WalletMetadataSpecifics
	62, // 32: sync_pb.EntitySpecifics.arc_package:type_name -> sync_pb.ArcPackageSpecifics
	63, // 33: sync_pb.EntitySpecifics.printer:type_name -> sync_pb.PrinterSpecifics
	64, // 34: sync_pb.EntitySpecifics.reading_list:type_name -> sync_pb.ReadingListSpecifics
	65, // 35: sync_pb.EntitySpecifics.user_event:type_name -> sync_pb.UserEventSpecifics
	66, // 36: sync_pb.EntitySpecifics.user_consent:type_name -> sync_pb.UserConsentSpecifics
	67, // 37: sync_pb.EntitySpecifics.send_tab_to_self:type_name -> sync_pb.SendTabToSelfSpecifics
	68, // 38: sync_pb.EntitySpecifics.security_event:type_name -> sync_pb.SecurityEventSpecifics
	69, // 39: sync_pb.EntitySpecifics.web_app:type_name -> sync_pb.WebAppSpecifics
	70, // 40: sync_pb.EntitySpecifics.wifi_configuration:type_name -> sync_pb.WifiConfigurationSpecifics
	71, // 41: sync_pb.EntitySpecifics.os_preference:type_name -> sync_pb.OsPreferenceSpecifics
	72, // 42: sync_pb.EntitySpecifics.os_priority_preference:type_name -> sync_pb.OsPriorityPreferenceSpecifics
	73, // 43: sync_pb.EntitySpecifics.sharing_message:type_name -> sync_pb.SharingMessageSpecifics
	74, // 44: sync_pb.EntitySpecifics.autofill_offer:type_name -> sync_pb.AutofillOfferSpecifics
	4,  // 45: sync_pb.SyncEntity.specifics:type_name -> sync_pb.EntitySpecifics
	75, // 46: sync_pb.SyncEntity.unique_position:type_name -> sync_pb.UniquePosition
	5,  // 47: sync_pb.CommitMessage.entries:type_name -> sync_pb.SyncEntity
	6,  // 48: sync_pb.CommitMessage.extensions_activity:type_name -> sync_pb.ChromiumExtensionsActivity
	7,  // 49: sync_pb.CommitMessage.config_params:type_name -> sync_pb.ClientConfigParams
	17, // 50: sync_pb.CommitMessage.client_contexts:type_name -> sync_pb.DataTypeContext
	0,  // 51: sync_pb.GarbageCollectionDirective.type:type_name -> sync_pb.GarbageCollectionDirective.Type
	9,  // 52: sync_pb.DataTypeProgressMarker.get_update_triggers:type_name -> sync_pb.GetUpdateTriggers
	10, // 53: sync_pb.DataTypeProgressMarker.gc_directive:type_name -> sync_pb.GarbageCollectionDirective
	76, // 54: sync_pb.GetUpdatesMessage.caller_info:type_name -> sync_pb.GetUpdatesCallerInfo
	11, // 55: sync_pb.GetUpdatesMessage.from_progress_marker:type_name -> sync_pb.DataTypeProgressMarker
	77, // 56: sync_pb.GetUpdatesMessage.get_updates_origin:type_name -> sync_pb.SyncEnums.GetUpdatesOrigin
	17, // 57: sync_pb.GetUpdatesMessage.client_contexts:type_name -> sync_pb.DataTypeContext
	1,  // 58: sync_pb.ClientToServerMessage.message_contents:type_name -> sync_pb.ClientToServerMessage.Contents
	8,  // 59: sync_pb.ClientToServerMessage.commit:type_name -> sync_pb.CommitMessage
	12, // 60: sync_pb.ClientToServerMessage.get_updates:type_name -> sync_pb.GetUpdatesMessage
	78, // 61: sync_pb.ClientToServerMessage.debug_info:type_name -> sync_pb.DebugInfo
	15, // 62: sync_pb.ClientToServerMessage.bag_of_chips:type_name -> sync_pb.ChipBag
	16, // 63: sync_pb.ClientToServerMessage.client_status:type_name -> sync_pb.ClientStatus
	13, // 64: sync_pb.ClientToServerMessage.clear_server_data:type_name -> sync_pb.ClearServerDataMessage
	27, // 65: sync_pb.CommitResponse.entryresponse:type_name -> sync_pb.CommitResponse.EntryResponse
	5,  // 66: sync_pb.GetUpdatesResponse.entries:type_name -> sync_pb.SyncEntity
	11, // 67: sync_pb.GetUpdatesResponse.new_progress_marker:type_name -> sync_pb.DataTypeProgressMarker
	17, // 68: sync_pb.GetUpdatesResponse.context_mutations:type_name -> sync_pb.DataTypeContext
	21, // 69: sync_pb.ClientToServerResponse.commit:type_name -> sync_pb.CommitResponse
	22, // 70: sync_pb.ClientToServerResponse.get_updates:type_name -> sync_pb.GetUpdatesResponse
	79, // 71: sync_pb.ClientToServerResponse.error_code:type_name -> sync_pb.SyncEnums.ErrorType
	80, // 72: sync_pb.ClientToServerResponse.client_command:type_name -> sync_pb.ClientCommand
	3,  // 73: sync_pb.ClientToServerResponse.profiling_data:type_name -> sync_pb.ProfilingData
	29, // 74: sync_pb.ClientToServerResponse.error:type_name -> sync_pb.ClientToServerResponse.Error
	15, // 75: sync_pb.ClientToServerResponse.new_bag_of_chips:type_name -> sync_pb.ChipBag
	14, // 76: sync_pb.ClientToServerResponse.clear_server_data:type_name -> sync_pb.ClearServerDataResponse
	26, // 77: sync_pb.EventRequest.sync_disabled:type_name -> sync_pb.SyncDisabledEvent
	2,  // 78: sync_pb.CommitResponse.EntryResponse.response_type:type_name -> sync_pb.CommitResponse.ResponseType
	28, // 79: sync_pb.CommitResponse.EntryResponse.datatype_specific_error:type_name -> sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError
	81, // 80: sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError.sharing_message_error:type_name -> sync_pb.SharingMessageCommitError
	79, // 81: sync_pb.ClientToServerResponse.Error.error_type:type_name -> sync_pb.SyncEnums.ErrorType
	82, // 82: sync_pb.ClientToServerResponse.Error.action:type_name -> sync_pb.SyncEnums.Action
	83, // [83:83] is the sub-list for method output_type
	83, // [83:83] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_sync_proto_init() }
func file_sync_proto_init() {
	if File_sync_proto != nil {
		return
	}
	file_app_list_specifics_proto_init()
	file_app_notification_specifics_proto_init()
	file_app_setting_specifics_proto_init()
	file_app_specifics_proto_init()
	file_arc_package_specifics_proto_init()
	file_autofill_specifics_proto_init()
	file_autofill_offer_specifics_proto_init()
	file_bookmark_specifics_proto_init()
	file_client_commands_proto_init()
	file_client_debug_info_proto_init()
	file_device_info_specifics_proto_init()
	file_dictionary_specifics_proto_init()
	file_encryption_proto_init()
	file_experiments_specifics_proto_init()
	file_extension_setting_specifics_proto_init()
	file_extension_specifics_proto_init()
	file_favicon_image_specifics_proto_init()
	file_favicon_tracking_specifics_proto_init()
	file_get_updates_caller_info_proto_init()
	file_history_delete_directive_specifics_proto_init()
	file_managed_user_setting_specifics_proto_init()
	file_managed_user_shared_setting_specifics_proto_init()
	file_managed_user_specifics_proto_init()
	file_managed_user_whitelist_specifics_proto_init()
	file_nigori_specifics_proto_init()
	file_os_preference_specifics_proto_init()
	file_os_priority_preference_specifics_proto_init()
	file_password_specifics_proto_init()
	file_preference_specifics_proto_init()
	file_printer_specifics_proto_init()
	file_priority_preference_specifics_proto_init()
	file_reading_list_specifics_proto_init()
	file_search_engine_specifics_proto_init()
	file_security_event_specifics_proto_init()
	file_send_tab_to_self_specifics_proto_init()
	file_session_specifics_proto_init()
	file_sharing_message_specifics_proto_init()
	file_sync_enums_proto_init()
	file_synced_notification_app_info_specifics_proto_init()
	file_synced_notification_specifics_proto_init()
	file_theme_specifics_proto_init()
	file_typed_url_specifics_proto_init()
	file_unique_position_proto_init()
	file_user_consent_specifics_proto_init()
	file_user_event_specifics_proto_init()
	file_web_app_specifics_proto_init()
	file_wifi_configuration_specifics_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitySpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromiumExtensionsActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientConfigParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateTriggers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GarbageCollectionDirective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTypeProgressMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdatesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearServerDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearServerDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChipBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTypeContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientToServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrashInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrashInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientToServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDisabledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse_EntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse_EntryResponse_DatatypeSpecificError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientToServerResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sync_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*EntitySpecifics_Autofill)(nil),
		(*EntitySpecifics_Bookmark)(nil),
		(*EntitySpecifics_Preference)(nil),
		(*EntitySpecifics_TypedUrl)(nil),
		(*EntitySpecifics_Theme)(nil),
		(*EntitySpecifics_AppNotification)(nil),
		(*EntitySpecifics_Password)(nil),
		(*EntitySpecifics_Nigori)(nil),
		(*EntitySpecifics_Extension)(nil),
		(*EntitySpecifics_App)(nil),
		(*EntitySpecifics_Session)(nil),
		(*EntitySpecifics_AutofillProfile)(nil),
		(*EntitySpecifics_SearchEngine)(nil),
		(*EntitySpecifics_ExtensionSetting)(nil),
		(*EntitySpecifics_AppSetting)(nil),
		(*EntitySpecifics_HistoryDeleteDirective)(nil),
		(*EntitySpecifics_SyncedNotification)(nil),
		(*EntitySpecifics_SyncedNotificationAppInfo)(nil),
		(*EntitySpecifics_DeviceInfo)(nil),
		(*EntitySpecifics_Experiments)(nil),
		(*EntitySpecifics_PriorityPreference)(nil),
		(*EntitySpecifics_Dictionary)(nil),
		(*EntitySpecifics_FaviconTracking)(nil),
		(*EntitySpecifics_FaviconImage)(nil),
		(*EntitySpecifics_ManagedUserSetting)(nil),
		(*EntitySpecifics_ManagedUser)(nil),
		(*EntitySpecifics_ManagedUserSharedSetting)(nil),
		(*EntitySpecifics_ManagedUserWhitelist)(nil),
		(*EntitySpecifics_AppList)(nil),
		(*EntitySpecifics_AutofillWallet)(nil),
		(*EntitySpecifics_WalletMetadata)(nil),
		(*EntitySpecifics_ArcPackage)(nil),
		(*EntitySpecifics_Printer)(nil),
		(*EntitySpecifics_ReadingList)(nil),
		(*EntitySpecifics_UserEvent)(nil),
		(*EntitySpecifics_UserConsent)(nil),
		(*EntitySpecifics_SendTabToSelf)(nil),
		(*EntitySpecifics_SecurityEvent)(nil),
		(*EntitySpecifics_WebApp)(nil),
		(*EntitySpecifics_WifiConfiguration)(nil),
		(*EntitySpecifics_OsPreference)(nil),
		(*EntitySpecifics_OsPriorityPreference)(nil),
		(*EntitySpecifics_SharingMessage)(nil),
		(*EntitySpecifics_AutofillOffer)(nil),
	}
	file_sync_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*CommitResponse_EntryResponse_DatatypeSpecificError_SharingMessageError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sync_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sync_proto_goTypes,
		DependencyIndexes: file_sync_proto_depIdxs,
		EnumInfos:         file_sync_proto_enumTypes,
		MessageInfos:      file_sync_proto_msgTypes,
	}.Build()
	File_sync_proto = out.File
	file_sync_proto_rawDesc = nil
	file_sync_proto_goTypes = nil
	file_sync_proto_depIdxs = nil
}
