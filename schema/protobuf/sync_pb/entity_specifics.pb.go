// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: entity_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntitySpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If a datatype is encrypted, this field will contain the encrypted
	// original EntitySpecifics. The extension for the datatype will continue
	// to exist, but contain only the default values.
	// Note that currently passwords employ their own legacy encryption scheme and
	// do not use this field.
	Encrypted *EncryptedData `protobuf:"bytes,1,opt,name=encrypted" json:"encrypted,omitempty"`
	// Types that are assignable to SpecificsVariant:
	//	*EntitySpecifics_Autofill
	//	*EntitySpecifics_Bookmark
	//	*EntitySpecifics_Preference
	//	*EntitySpecifics_TypedUrl
	//	*EntitySpecifics_Theme
	//	*EntitySpecifics_Password
	//	*EntitySpecifics_Nigori
	//	*EntitySpecifics_Extension
	//	*EntitySpecifics_App
	//	*EntitySpecifics_Session
	//	*EntitySpecifics_AutofillProfile
	//	*EntitySpecifics_SearchEngine
	//	*EntitySpecifics_ExtensionSetting
	//	*EntitySpecifics_AppSetting
	//	*EntitySpecifics_HistoryDeleteDirective
	//	*EntitySpecifics_DeviceInfo
	//	*EntitySpecifics_PriorityPreference
	//	*EntitySpecifics_Dictionary
	//	*EntitySpecifics_ManagedUserSetting
	//	*EntitySpecifics_AppList
	//	*EntitySpecifics_AutofillWallet
	//	*EntitySpecifics_WalletMetadata
	//	*EntitySpecifics_ArcPackage
	//	*EntitySpecifics_Printer
	//	*EntitySpecifics_ReadingList
	//	*EntitySpecifics_UserEvent
	//	*EntitySpecifics_UserConsent
	//	*EntitySpecifics_SendTabToSelf
	//	*EntitySpecifics_SecurityEvent
	//	*EntitySpecifics_WebApk
	//	*EntitySpecifics_WebApp
	//	*EntitySpecifics_WifiConfiguration
	//	*EntitySpecifics_OsPreference
	//	*EntitySpecifics_OsPriorityPreference
	//	*EntitySpecifics_SharingMessage
	//	*EntitySpecifics_AutofillOffer
	//	*EntitySpecifics_WorkspaceDesk
	//	*EntitySpecifics_WebauthnCredential
	//	*EntitySpecifics_History
	//	*EntitySpecifics_PrintersAuthorizationServer
	//	*EntitySpecifics_SavedTabGroup
	//	*EntitySpecifics_AutofillWalletUsage
	//	*EntitySpecifics_ContactInfo
	//	*EntitySpecifics_Segmentation
	//	*EntitySpecifics_PowerBookmark
	//	*EntitySpecifics_IncomingPasswordSharingInvitation
	//	*EntitySpecifics_OutgoingPasswordSharingInvitation
	//	*EntitySpecifics_AutofillWalletCredential
	//	*EntitySpecifics_SharedTabGroupData
	//	*EntitySpecifics_CollaborationGroup
	//	*EntitySpecifics_Compare
	//	*EntitySpecifics_PlusAddress
	//	*EntitySpecifics_AppNotification
	//	*EntitySpecifics_SyncedNotification
	//	*EntitySpecifics_SyncedNotificationAppInfo
	//	*EntitySpecifics_Experiments
	//	*EntitySpecifics_FaviconTracking
	//	*EntitySpecifics_FaviconImage
	//	*EntitySpecifics_ManagedUser
	//	*EntitySpecifics_ManagedUserSharedSetting
	//	*EntitySpecifics_ManagedUserAllowlist
	SpecificsVariant isEntitySpecifics_SpecificsVariant `protobuf_oneof:"specifics_variant"`
}

func (x *EntitySpecifics) Reset() {
	*x = EntitySpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitySpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySpecifics) ProtoMessage() {}

func (x *EntitySpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_entity_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySpecifics.ProtoReflect.Descriptor instead.
func (*EntitySpecifics) Descriptor() ([]byte, []int) {
	return file_entity_specifics_proto_rawDescGZIP(), []int{0}
}

func (x *EntitySpecifics) GetEncrypted() *EncryptedData {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (m *EntitySpecifics) GetSpecificsVariant() isEntitySpecifics_SpecificsVariant {
	if m != nil {
		return m.SpecificsVariant
	}
	return nil
}

func (x *EntitySpecifics) GetAutofill() *AutofillSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Autofill); ok {
		return x.Autofill
	}
	return nil
}

func (x *EntitySpecifics) GetBookmark() *BookmarkSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Bookmark); ok {
		return x.Bookmark
	}
	return nil
}

func (x *EntitySpecifics) GetPreference() *PreferenceSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Preference); ok {
		return x.Preference
	}
	return nil
}

func (x *EntitySpecifics) GetTypedUrl() *TypedUrlSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_TypedUrl); ok {
		return x.TypedUrl
	}
	return nil
}

func (x *EntitySpecifics) GetTheme() *ThemeSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Theme); ok {
		return x.Theme
	}
	return nil
}

func (x *EntitySpecifics) GetPassword() *PasswordSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Password); ok {
		return x.Password
	}
	return nil
}

func (x *EntitySpecifics) GetNigori() *NigoriSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Nigori); ok {
		return x.Nigori
	}
	return nil
}

func (x *EntitySpecifics) GetExtension() *ExtensionSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Extension); ok {
		return x.Extension
	}
	return nil
}

func (x *EntitySpecifics) GetApp() *AppSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_App); ok {
		return x.App
	}
	return nil
}

func (x *EntitySpecifics) GetSession() *SessionSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Session); ok {
		return x.Session
	}
	return nil
}

func (x *EntitySpecifics) GetAutofillProfile() *AutofillProfileSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AutofillProfile); ok {
		return x.AutofillProfile
	}
	return nil
}

func (x *EntitySpecifics) GetSearchEngine() *SearchEngineSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SearchEngine); ok {
		return x.SearchEngine
	}
	return nil
}

func (x *EntitySpecifics) GetExtensionSetting() *ExtensionSettingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ExtensionSetting); ok {
		return x.ExtensionSetting
	}
	return nil
}

func (x *EntitySpecifics) GetAppSetting() *AppSettingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AppSetting); ok {
		return x.AppSetting
	}
	return nil
}

func (x *EntitySpecifics) GetHistoryDeleteDirective() *HistoryDeleteDirectiveSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_HistoryDeleteDirective); ok {
		return x.HistoryDeleteDirective
	}
	return nil
}

func (x *EntitySpecifics) GetDeviceInfo() *DeviceInfoSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_DeviceInfo); ok {
		return x.DeviceInfo
	}
	return nil
}

func (x *EntitySpecifics) GetPriorityPreference() *PriorityPreferenceSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_PriorityPreference); ok {
		return x.PriorityPreference
	}
	return nil
}

func (x *EntitySpecifics) GetDictionary() *DictionarySpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Dictionary); ok {
		return x.Dictionary
	}
	return nil
}

func (x *EntitySpecifics) GetManagedUserSetting() *ManagedUserSettingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ManagedUserSetting); ok {
		return x.ManagedUserSetting
	}
	return nil
}

func (x *EntitySpecifics) GetAppList() *AppListSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AppList); ok {
		return x.AppList
	}
	return nil
}

func (x *EntitySpecifics) GetAutofillWallet() *AutofillWalletSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AutofillWallet); ok {
		return x.AutofillWallet
	}
	return nil
}

func (x *EntitySpecifics) GetWalletMetadata() *WalletMetadataSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_WalletMetadata); ok {
		return x.WalletMetadata
	}
	return nil
}

func (x *EntitySpecifics) GetArcPackage() *ArcPackageSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ArcPackage); ok {
		return x.ArcPackage
	}
	return nil
}

func (x *EntitySpecifics) GetPrinter() *PrinterSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Printer); ok {
		return x.Printer
	}
	return nil
}

func (x *EntitySpecifics) GetReadingList() *ReadingListSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ReadingList); ok {
		return x.ReadingList
	}
	return nil
}

func (x *EntitySpecifics) GetUserEvent() *UserEventSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_UserEvent); ok {
		return x.UserEvent
	}
	return nil
}

func (x *EntitySpecifics) GetUserConsent() *UserConsentSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_UserConsent); ok {
		return x.UserConsent
	}
	return nil
}

func (x *EntitySpecifics) GetSendTabToSelf() *SendTabToSelfSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SendTabToSelf); ok {
		return x.SendTabToSelf
	}
	return nil
}

func (x *EntitySpecifics) GetSecurityEvent() *SecurityEventSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SecurityEvent); ok {
		return x.SecurityEvent
	}
	return nil
}

func (x *EntitySpecifics) GetWebApk() *WebApkSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_WebApk); ok {
		return x.WebApk
	}
	return nil
}

func (x *EntitySpecifics) GetWebApp() *WebAppSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_WebApp); ok {
		return x.WebApp
	}
	return nil
}

func (x *EntitySpecifics) GetWifiConfiguration() *WifiConfigurationSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_WifiConfiguration); ok {
		return x.WifiConfiguration
	}
	return nil
}

func (x *EntitySpecifics) GetOsPreference() *OsPreferenceSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_OsPreference); ok {
		return x.OsPreference
	}
	return nil
}

func (x *EntitySpecifics) GetOsPriorityPreference() *OsPriorityPreferenceSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_OsPriorityPreference); ok {
		return x.OsPriorityPreference
	}
	return nil
}

func (x *EntitySpecifics) GetSharingMessage() *SharingMessageSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SharingMessage); ok {
		return x.SharingMessage
	}
	return nil
}

func (x *EntitySpecifics) GetAutofillOffer() *AutofillOfferSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AutofillOffer); ok {
		return x.AutofillOffer
	}
	return nil
}

func (x *EntitySpecifics) GetWorkspaceDesk() *WorkspaceDeskSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_WorkspaceDesk); ok {
		return x.WorkspaceDesk
	}
	return nil
}

func (x *EntitySpecifics) GetWebauthnCredential() *WebauthnCredentialSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_WebauthnCredential); ok {
		return x.WebauthnCredential
	}
	return nil
}

func (x *EntitySpecifics) GetHistory() *HistorySpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_History); ok {
		return x.History
	}
	return nil
}

func (x *EntitySpecifics) GetPrintersAuthorizationServer() *PrintersAuthorizationServerSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_PrintersAuthorizationServer); ok {
		return x.PrintersAuthorizationServer
	}
	return nil
}

func (x *EntitySpecifics) GetSavedTabGroup() *SavedTabGroupSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SavedTabGroup); ok {
		return x.SavedTabGroup
	}
	return nil
}

func (x *EntitySpecifics) GetAutofillWalletUsage() *AutofillWalletUsageSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AutofillWalletUsage); ok {
		return x.AutofillWalletUsage
	}
	return nil
}

func (x *EntitySpecifics) GetContactInfo() *ContactInfoSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ContactInfo); ok {
		return x.ContactInfo
	}
	return nil
}

func (x *EntitySpecifics) GetSegmentation() *SegmentationSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Segmentation); ok {
		return x.Segmentation
	}
	return nil
}

func (x *EntitySpecifics) GetPowerBookmark() *PowerBookmarkSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_PowerBookmark); ok {
		return x.PowerBookmark
	}
	return nil
}

func (x *EntitySpecifics) GetIncomingPasswordSharingInvitation() *IncomingPasswordSharingInvitationSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_IncomingPasswordSharingInvitation); ok {
		return x.IncomingPasswordSharingInvitation
	}
	return nil
}

func (x *EntitySpecifics) GetOutgoingPasswordSharingInvitation() *OutgoingPasswordSharingInvitationSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_OutgoingPasswordSharingInvitation); ok {
		return x.OutgoingPasswordSharingInvitation
	}
	return nil
}

func (x *EntitySpecifics) GetAutofillWalletCredential() *AutofillWalletCredentialSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AutofillWalletCredential); ok {
		return x.AutofillWalletCredential
	}
	return nil
}

func (x *EntitySpecifics) GetSharedTabGroupData() *SharedTabGroupDataSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SharedTabGroupData); ok {
		return x.SharedTabGroupData
	}
	return nil
}

func (x *EntitySpecifics) GetCollaborationGroup() *CollaborationGroupSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_CollaborationGroup); ok {
		return x.CollaborationGroup
	}
	return nil
}

func (x *EntitySpecifics) GetCompare() *CompareSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Compare); ok {
		return x.Compare
	}
	return nil
}

func (x *EntitySpecifics) GetPlusAddress() *PlusAddressSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_PlusAddress); ok {
		return x.PlusAddress
	}
	return nil
}

// Deprecated: Marked as deprecated in entity_specifics.proto.
func (x *EntitySpecifics) GetAppNotification() *EmptySpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_AppNotification); ok {
		return x.AppNotification
	}
	return nil
}

// Deprecated: Marked as deprecated in entity_specifics.proto.
func (x *EntitySpecifics) GetSyncedNotification() *EmptySpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SyncedNotification); ok {
		return x.SyncedNotification
	}
	return nil
}

// Deprecated: Marked as deprecated in entity_specifics.proto.
func (x *EntitySpecifics) GetSyncedNotificationAppInfo() *EmptySpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_SyncedNotificationAppInfo); ok {
		return x.SyncedNotificationAppInfo
	}
	return nil
}

// Deprecated: Marked as deprecated in entity_specifics.proto.
func (x *EntitySpecifics) GetExperiments() *ExperimentsSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_Experiments); ok {
		return x.Experiments
	}
	return nil
}

// Deprecated: Marked as deprecated in entity_specifics.proto.
func (x *EntitySpecifics) GetFaviconTracking() *FaviconTrackingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_FaviconTracking); ok {
		return x.FaviconTracking
	}
	return nil
}

// Deprecated: Marked as deprecated in entity_specifics.proto.
func (x *EntitySpecifics) GetFaviconImage() *FaviconImageSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_FaviconImage); ok {
		return x.FaviconImage
	}
	return nil
}

// Deprecated: Marked as deprecated in entity_specifics.proto.
func (x *EntitySpecifics) GetManagedUser() *EmptySpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ManagedUser); ok {
		return x.ManagedUser
	}
	return nil
}

// Deprecated: Marked as deprecated in entity_specifics.proto.
func (x *EntitySpecifics) GetManagedUserSharedSetting() *ManagedUserSharedSettingSpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ManagedUserSharedSetting); ok {
		return x.ManagedUserSharedSetting
	}
	return nil
}

// Deprecated: Marked as deprecated in entity_specifics.proto.
func (x *EntitySpecifics) GetManagedUserAllowlist() *EmptySpecifics {
	if x, ok := x.GetSpecificsVariant().(*EntitySpecifics_ManagedUserAllowlist); ok {
		return x.ManagedUserAllowlist
	}
	return nil
}

type isEntitySpecifics_SpecificsVariant interface {
	isEntitySpecifics_SpecificsVariant()
}

type EntitySpecifics_Autofill struct {
	Autofill *AutofillSpecifics `protobuf:"bytes,31729,opt,name=autofill,oneof"`
}

type EntitySpecifics_Bookmark struct {
	Bookmark *BookmarkSpecifics `protobuf:"bytes,32904,opt,name=bookmark,oneof"`
}

type EntitySpecifics_Preference struct {
	Preference *PreferenceSpecifics `protobuf:"bytes,37702,opt,name=preference,oneof"`
}

type EntitySpecifics_TypedUrl struct {
	TypedUrl *TypedUrlSpecifics `protobuf:"bytes,40781,opt,name=typed_url,json=typedUrl,oneof"`
}

type EntitySpecifics_Theme struct {
	Theme *ThemeSpecifics `protobuf:"bytes,41210,opt,name=theme,oneof"`
}

type EntitySpecifics_Password struct {
	Password *PasswordSpecifics `protobuf:"bytes,45873,opt,name=password,oneof"`
}

type EntitySpecifics_Nigori struct {
	Nigori *NigoriSpecifics `protobuf:"bytes,47745,opt,name=nigori,oneof"`
}

type EntitySpecifics_Extension struct {
	Extension *ExtensionSpecifics `protobuf:"bytes,48119,opt,name=extension,oneof"`
}

type EntitySpecifics_App struct {
	App *AppSpecifics `protobuf:"bytes,48364,opt,name=app,oneof"`
}

type EntitySpecifics_Session struct {
	Session *SessionSpecifics `protobuf:"bytes,50119,opt,name=session,oneof"`
}

type EntitySpecifics_AutofillProfile struct {
	AutofillProfile *AutofillProfileSpecifics `protobuf:"bytes,63951,opt,name=autofill_profile,json=autofillProfile,oneof"`
}

type EntitySpecifics_SearchEngine struct {
	SearchEngine *SearchEngineSpecifics `protobuf:"bytes,88610,opt,name=search_engine,json=searchEngine,oneof"`
}

type EntitySpecifics_ExtensionSetting struct {
	ExtensionSetting *ExtensionSettingSpecifics `protobuf:"bytes,96159,opt,name=extension_setting,json=extensionSetting,oneof"`
}

type EntitySpecifics_AppSetting struct {
	AppSetting *AppSettingSpecifics `protobuf:"bytes,103656,opt,name=app_setting,json=appSetting,oneof"`
}

type EntitySpecifics_HistoryDeleteDirective struct {
	HistoryDeleteDirective *HistoryDeleteDirectiveSpecifics `protobuf:"bytes,150251,opt,name=history_delete_directive,json=historyDeleteDirective,oneof"`
}

type EntitySpecifics_DeviceInfo struct {
	DeviceInfo *DeviceInfoSpecifics `protobuf:"bytes,154522,opt,name=device_info,json=deviceInfo,oneof"`
}

type EntitySpecifics_PriorityPreference struct {
	PriorityPreference *PriorityPreferenceSpecifics `protobuf:"bytes,163425,opt,name=priority_preference,json=priorityPreference,oneof"`
}

type EntitySpecifics_Dictionary struct {
	Dictionary *DictionarySpecifics `protobuf:"bytes,170540,opt,name=dictionary,oneof"`
}

type EntitySpecifics_ManagedUserSetting struct {
	ManagedUserSetting *ManagedUserSettingSpecifics `protobuf:"bytes,186662,opt,name=managed_user_setting,json=managedUserSetting,oneof"`
}

type EntitySpecifics_AppList struct {
	AppList *AppListSpecifics `protobuf:"bytes,229170,opt,name=app_list,json=appList,oneof"`
}

type EntitySpecifics_AutofillWallet struct {
	AutofillWallet *AutofillWalletSpecifics `protobuf:"bytes,306270,opt,name=autofill_wallet,json=autofillWallet,oneof"`
}

type EntitySpecifics_WalletMetadata struct {
	WalletMetadata *WalletMetadataSpecifics `protobuf:"bytes,330441,opt,name=wallet_metadata,json=walletMetadata,oneof"`
}

type EntitySpecifics_ArcPackage struct {
	ArcPackage *ArcPackageSpecifics `protobuf:"bytes,340906,opt,name=arc_package,json=arcPackage,oneof"`
}

type EntitySpecifics_Printer struct {
	Printer *PrinterSpecifics `protobuf:"bytes,410745,opt,name=printer,oneof"`
}

type EntitySpecifics_ReadingList struct {
	ReadingList *ReadingListSpecifics `protobuf:"bytes,411028,opt,name=reading_list,json=readingList,oneof"`
}

type EntitySpecifics_UserEvent struct {
	UserEvent *UserEventSpecifics `protobuf:"bytes,455206,opt,name=user_event,json=userEvent,oneof"`
}

type EntitySpecifics_UserConsent struct {
	UserConsent *UserConsentSpecifics `protobuf:"bytes,556014,opt,name=user_consent,json=userConsent,oneof"`
}

type EntitySpecifics_SendTabToSelf struct {
	SendTabToSelf *SendTabToSelfSpecifics `protobuf:"bytes,601980,opt,name=send_tab_to_self,json=sendTabToSelf,oneof"`
}

type EntitySpecifics_SecurityEvent struct {
	SecurityEvent *SecurityEventSpecifics `protobuf:"bytes,600372,opt,name=security_event,json=securityEvent,oneof"`
}

type EntitySpecifics_WebApk struct {
	WebApk *WebApkSpecifics `protobuf:"bytes,1117170,opt,name=web_apk,json=webApk,oneof"`
}

type EntitySpecifics_WebApp struct {
	WebApp *WebAppSpecifics `protobuf:"bytes,673225,opt,name=web_app,json=webApp,oneof"`
}

type EntitySpecifics_WifiConfiguration struct {
	WifiConfiguration *WifiConfigurationSpecifics `protobuf:"bytes,662827,opt,name=wifi_configuration,json=wifiConfiguration,oneof"`
}

type EntitySpecifics_OsPreference struct {
	OsPreference *OsPreferenceSpecifics `protobuf:"bytes,702141,opt,name=os_preference,json=osPreference,oneof"`
}

type EntitySpecifics_OsPriorityPreference struct {
	OsPriorityPreference *OsPriorityPreferenceSpecifics `protobuf:"bytes,703915,opt,name=os_priority_preference,json=osPriorityPreference,oneof"`
}

type EntitySpecifics_SharingMessage struct {
	SharingMessage *SharingMessageSpecifics `protobuf:"bytes,728866,opt,name=sharing_message,json=sharingMessage,oneof"`
}

type EntitySpecifics_AutofillOffer struct {
	AutofillOffer *AutofillOfferSpecifics `protobuf:"bytes,774329,opt,name=autofill_offer,json=autofillOffer,oneof"`
}

type EntitySpecifics_WorkspaceDesk struct {
	WorkspaceDesk *WorkspaceDeskSpecifics `protobuf:"bytes,874841,opt,name=workspace_desk,json=workspaceDesk,oneof"`
}

type EntitySpecifics_WebauthnCredential struct {
	WebauthnCredential *WebauthnCredentialSpecifics `protobuf:"bytes,895275,opt,name=webauthn_credential,json=webauthnCredential,oneof"`
}

type EntitySpecifics_History struct {
	History *HistorySpecifics `protobuf:"bytes,963985,opt,name=history,oneof"`
}

type EntitySpecifics_PrintersAuthorizationServer struct {
	PrintersAuthorizationServer *PrintersAuthorizationServerSpecifics `protobuf:"bytes,974304,opt,name=printers_authorization_server,json=printersAuthorizationServer,oneof"`
}

type EntitySpecifics_SavedTabGroup struct {
	SavedTabGroup *SavedTabGroupSpecifics `protobuf:"bytes,1004874,opt,name=saved_tab_group,json=savedTabGroup,oneof"`
}

type EntitySpecifics_AutofillWalletUsage struct {
	AutofillWalletUsage *AutofillWalletUsageSpecifics `protobuf:"bytes,1033580,opt,name=autofill_wallet_usage,json=autofillWalletUsage,oneof"`
}

type EntitySpecifics_ContactInfo struct {
	ContactInfo *ContactInfoSpecifics `protobuf:"bytes,1034378,opt,name=contact_info,json=contactInfo,oneof"`
}

type EntitySpecifics_Segmentation struct {
	Segmentation *SegmentationSpecifics `protobuf:"bytes,1026052,opt,name=segmentation,oneof"`
}

type EntitySpecifics_PowerBookmark struct {
	PowerBookmark *PowerBookmarkSpecifics `protobuf:"bytes,1073150,opt,name=power_bookmark,json=powerBookmark,oneof"`
}

type EntitySpecifics_IncomingPasswordSharingInvitation struct {
	IncomingPasswordSharingInvitation *IncomingPasswordSharingInvitationSpecifics `protobuf:"bytes,1141935,opt,name=incoming_password_sharing_invitation,json=incomingPasswordSharingInvitation,oneof"`
}

type EntitySpecifics_OutgoingPasswordSharingInvitation struct {
	OutgoingPasswordSharingInvitation *OutgoingPasswordSharingInvitationSpecifics `protobuf:"bytes,1142081,opt,name=outgoing_password_sharing_invitation,json=outgoingPasswordSharingInvitation,oneof"`
}

type EntitySpecifics_AutofillWalletCredential struct {
	AutofillWalletCredential *AutofillWalletCredentialSpecifics `protobuf:"bytes,1164238,opt,name=autofill_wallet_credential,json=autofillWalletCredential,oneof"`
}

type EntitySpecifics_SharedTabGroupData struct {
	SharedTabGroupData *SharedTabGroupDataSpecifics `protobuf:"bytes,1239418,opt,name=shared_tab_group_data,json=sharedTabGroupData,oneof"`
}

type EntitySpecifics_CollaborationGroup struct {
	CollaborationGroup *CollaborationGroupSpecifics `protobuf:"bytes,1259076,opt,name=collaboration_group,json=collaborationGroup,oneof"`
}

type EntitySpecifics_Compare struct {
	Compare *CompareSpecifics `protobuf:"bytes,1329438,opt,name=compare,oneof"`
}

type EntitySpecifics_PlusAddress struct {
	PlusAddress *PlusAddressSpecifics `protobuf:"bytes,1267844,opt,name=plus_address,json=plusAddress,oneof"`
}

type EntitySpecifics_AppNotification struct {
	// No-longer-supported data types, in various stages of removal.
	// TODO(crbug.com/1395003): Eventually, these should all become "reserved"
	// fields, or at least use "EmptySpecifics". But some of them are still
	// needed by the server, e.g. to support older clients.
	//
	// Deprecated: Marked as deprecated in entity_specifics.proto.
	AppNotification *EmptySpecifics `protobuf:"bytes,45184,opt,name=app_notification,json=appNotification,oneof"`
}

type EntitySpecifics_SyncedNotification struct {
	// Deprecated: Marked as deprecated in entity_specifics.proto.
	SyncedNotification *EmptySpecifics `protobuf:"bytes,153108,opt,name=synced_notification,json=syncedNotification,oneof"`
}

type EntitySpecifics_SyncedNotificationAppInfo struct {
	// Deprecated: Marked as deprecated in entity_specifics.proto.
	SyncedNotificationAppInfo *EmptySpecifics `protobuf:"bytes,235816,opt,name=synced_notification_app_info,json=syncedNotificationAppInfo,oneof"`
}

type EntitySpecifics_Experiments struct {
	// Deprecated: Marked as deprecated in entity_specifics.proto.
	Experiments *ExperimentsSpecifics `protobuf:"bytes,161496,opt,name=experiments,oneof"`
}

type EntitySpecifics_FaviconTracking struct {
	// Deprecated: Marked as deprecated in entity_specifics.proto.
	FaviconTracking *FaviconTrackingSpecifics `protobuf:"bytes,181534,opt,name=favicon_tracking,json=faviconTracking,oneof"`
}

type EntitySpecifics_FaviconImage struct {
	// Deprecated: Marked as deprecated in entity_specifics.proto.
	FaviconImage *FaviconImageSpecifics `protobuf:"bytes,182019,opt,name=favicon_image,json=faviconImage,oneof"`
}

type EntitySpecifics_ManagedUser struct {
	// Deprecated: Marked as deprecated in entity_specifics.proto.
	ManagedUser *EmptySpecifics `protobuf:"bytes,194582,opt,name=managed_user,json=managedUser,oneof"`
}

type EntitySpecifics_ManagedUserSharedSetting struct {
	// Deprecated: Marked as deprecated in entity_specifics.proto.
	ManagedUserSharedSetting *ManagedUserSharedSettingSpecifics `protobuf:"bytes,202026,opt,name=managed_user_shared_setting,json=managedUserSharedSetting,oneof"`
}

type EntitySpecifics_ManagedUserAllowlist struct {
	// Deprecated: Marked as deprecated in entity_specifics.proto.
	ManagedUserAllowlist *EmptySpecifics `protobuf:"bytes,306060,opt,name=managed_user_allowlist,json=managedUserAllowlist,oneof"`
}

func (*EntitySpecifics_Autofill) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Bookmark) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Preference) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_TypedUrl) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Theme) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Password) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Nigori) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Extension) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_App) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Session) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AutofillProfile) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SearchEngine) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ExtensionSetting) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AppSetting) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_HistoryDeleteDirective) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_DeviceInfo) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_PriorityPreference) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Dictionary) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ManagedUserSetting) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AppList) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AutofillWallet) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_WalletMetadata) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ArcPackage) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Printer) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ReadingList) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_UserEvent) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_UserConsent) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SendTabToSelf) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SecurityEvent) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_WebApk) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_WebApp) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_WifiConfiguration) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_OsPreference) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_OsPriorityPreference) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SharingMessage) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AutofillOffer) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_WorkspaceDesk) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_WebauthnCredential) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_History) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_PrintersAuthorizationServer) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SavedTabGroup) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AutofillWalletUsage) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ContactInfo) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Segmentation) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_PowerBookmark) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_IncomingPasswordSharingInvitation) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_OutgoingPasswordSharingInvitation) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AutofillWalletCredential) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SharedTabGroupData) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_CollaborationGroup) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Compare) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_PlusAddress) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_AppNotification) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SyncedNotification) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_SyncedNotificationAppInfo) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_Experiments) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_FaviconTracking) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_FaviconImage) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ManagedUser) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ManagedUserSharedSetting) isEntitySpecifics_SpecificsVariant() {}

func (*EntitySpecifics_ManagedUserAllowlist) isEntitySpecifics_SpecificsVariant() {}

type EmptySpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptySpecifics) Reset() {
	*x = EmptySpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptySpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptySpecifics) ProtoMessage() {}

func (x *EmptySpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_entity_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptySpecifics.ProtoReflect.Descriptor instead.
func (*EmptySpecifics) Descriptor() ([]byte, []int) {
	return file_entity_specifics_proto_rawDescGZIP(), []int{1}
}

var File_entity_specifics_proto protoreflect.FileDescriptor

var file_entity_specifics_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x1a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61,
	0x70, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x61, 0x70, 0x70, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x61, 0x72, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6e, 0x69, 0x67, 0x6f,
	0x72, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x26,
	0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0xf1, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x88, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x40, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xc6, 0xa6,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xcd,
	0xbe, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x31,
	0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0xfa, 0xc1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0xb1, 0xe6,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a,
	0x06, 0x6e, 0x69, 0x67, 0x6f, 0x72, 0x69, 0x18, 0x81, 0xf5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4e, 0x69, 0x67, 0x6f, 0x72, 0x69,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x69, 0x67,
	0x6f, 0x72, 0x69, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0xf7, 0xf7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0xec, 0xf9, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12,
	0x37, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xc7, 0x87, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xcf, 0xf3, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0xa2, 0xb4, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x9f, 0xef, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xe8, 0xa9, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x66, 0x0a, 0x18, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xeb, 0x95, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x16, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x9a, 0xb7, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xe1, 0xfc,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0xac, 0xb4, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xa6, 0xb2, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x38, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb2, 0xfe, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0xde, 0xd8, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xc9, 0x95, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x72, 0x63, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xaa, 0xe7, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x63, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x72, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xf9, 0x88, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x94, 0x8b, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xa6, 0xe4, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xee, 0xf7, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0xfc, 0xde, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x54, 0x6f, 0x53,
	0x65, 0x6c, 0x66, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x4a, 0x0a,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0xb4, 0xd2, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x70, 0x6b, 0x18, 0xf2, 0x97, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x70, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x62, 0x41, 0x70, 0x6b,
	0x12, 0x35, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x18, 0xc9, 0x8b, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x65,
	0x62, 0x41, 0x70, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x77, 0x65, 0x62, 0x41, 0x70, 0x70, 0x12, 0x56, 0x0a, 0x12, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xab, 0xba,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x11, 0x77, 0x69,
	0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0xbd, 0xed, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x4f, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x73, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x6f, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0xab, 0xfb, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4f, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xa2, 0xbe,
	0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0xb9, 0xa1, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x18, 0xd9, 0xb2, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x6b, 0x12, 0x59, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xab, 0xd2, 0x36, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x61, 0x75,
	0x74, 0x68, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x12, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74,
	0x68, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x07,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x91, 0xeb, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x07, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x75, 0x0a, 0x1d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xe0, 0xbb, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x1b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0f,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0xca, 0xaa, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x54, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5d, 0x0a, 0x15, 0x61, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xec, 0x8a, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x8a, 0x91, 0x3f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x84,
	0xd0, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xfe, 0xbf, 0x41, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x88, 0x01, 0x0a, 0x24, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xaf, 0xd9, 0x45, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x21, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01,
	0x0a, 0x24, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc1, 0xda, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x21, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xce, 0x87, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x18, 0x61, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x74, 0x61, 0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0xfa, 0xd2, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xc4, 0xec, 0x4c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x37,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x9e, 0x92, 0x51, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x84, 0xb1, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x6c, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x80, 0xe1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x94, 0xac, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x1c, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa8, 0xb2, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x19, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xd8, 0xed, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x9e, 0x8a, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x76,
	0x69, 0x63, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x61, 0x76,
	0x69, 0x63, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d,
	0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x83, 0x8e,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x61, 0x76,
	0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x96, 0xf0, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x71, 0x0a,
	0x1b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xaa, 0xaa, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x55, 0x0a, 0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x8c, 0xd7, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x4a, 0x08, 0x08, 0xbf,
	0xa8, 0x0d, 0x10, 0xc0, 0xa8, 0x0d, 0x4a, 0x08, 0x08, 0x8f, 0xd4, 0x0d, 0x10, 0x90, 0xd4, 0x0d,
	0x4a, 0x08, 0x08, 0xed, 0xa1, 0x21, 0x10, 0xee, 0xa1, 0x21, 0x52, 0x0f, 0x77, 0x69, 0x66, 0x69,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x42, 0x36, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48,
	0x03, 0x50, 0x01, 0x5a, 0x09, 0x2e, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_entity_specifics_proto_rawDescOnce sync.Once
	file_entity_specifics_proto_rawDescData = file_entity_specifics_proto_rawDesc
)

func file_entity_specifics_proto_rawDescGZIP() []byte {
	file_entity_specifics_proto_rawDescOnce.Do(func() {
		file_entity_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_entity_specifics_proto_rawDescData)
	})
	return file_entity_specifics_proto_rawDescData
}

var file_entity_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_entity_specifics_proto_goTypes = []interface{}{
	(*EntitySpecifics)(nil),                            // 0: sync_pb.EntitySpecifics
	(*EmptySpecifics)(nil),                             // 1: sync_pb.EmptySpecifics
	(*EncryptedData)(nil),                              // 2: sync_pb.EncryptedData
	(*AutofillSpecifics)(nil),                          // 3: sync_pb.AutofillSpecifics
	(*BookmarkSpecifics)(nil),                          // 4: sync_pb.BookmarkSpecifics
	(*PreferenceSpecifics)(nil),                        // 5: sync_pb.PreferenceSpecifics
	(*TypedUrlSpecifics)(nil),                          // 6: sync_pb.TypedUrlSpecifics
	(*ThemeSpecifics)(nil),                             // 7: sync_pb.ThemeSpecifics
	(*PasswordSpecifics)(nil),                          // 8: sync_pb.PasswordSpecifics
	(*NigoriSpecifics)(nil),                            // 9: sync_pb.NigoriSpecifics
	(*ExtensionSpecifics)(nil),                         // 10: sync_pb.ExtensionSpecifics
	(*AppSpecifics)(nil),                               // 11: sync_pb.AppSpecifics
	(*SessionSpecifics)(nil),                           // 12: sync_pb.SessionSpecifics
	(*AutofillProfileSpecifics)(nil),                   // 13: sync_pb.AutofillProfileSpecifics
	(*SearchEngineSpecifics)(nil),                      // 14: sync_pb.SearchEngineSpecifics
	(*ExtensionSettingSpecifics)(nil),                  // 15: sync_pb.ExtensionSettingSpecifics
	(*AppSettingSpecifics)(nil),                        // 16: sync_pb.AppSettingSpecifics
	(*HistoryDeleteDirectiveSpecifics)(nil),            // 17: sync_pb.HistoryDeleteDirectiveSpecifics
	(*DeviceInfoSpecifics)(nil),                        // 18: sync_pb.DeviceInfoSpecifics
	(*PriorityPreferenceSpecifics)(nil),                // 19: sync_pb.PriorityPreferenceSpecifics
	(*DictionarySpecifics)(nil),                        // 20: sync_pb.DictionarySpecifics
	(*ManagedUserSettingSpecifics)(nil),                // 21: sync_pb.ManagedUserSettingSpecifics
	(*AppListSpecifics)(nil),                           // 22: sync_pb.AppListSpecifics
	(*AutofillWalletSpecifics)(nil),                    // 23: sync_pb.AutofillWalletSpecifics
	(*WalletMetadataSpecifics)(nil),                    // 24: sync_pb.WalletMetadataSpecifics
	(*ArcPackageSpecifics)(nil),                        // 25: sync_pb.ArcPackageSpecifics
	(*PrinterSpecifics)(nil),                           // 26: sync_pb.PrinterSpecifics
	(*ReadingListSpecifics)(nil),                       // 27: sync_pb.ReadingListSpecifics
	(*UserEventSpecifics)(nil),                         // 28: sync_pb.UserEventSpecifics
	(*UserConsentSpecifics)(nil),                       // 29: sync_pb.UserConsentSpecifics
	(*SendTabToSelfSpecifics)(nil),                     // 30: sync_pb.SendTabToSelfSpecifics
	(*SecurityEventSpecifics)(nil),                     // 31: sync_pb.SecurityEventSpecifics
	(*WebApkSpecifics)(nil),                            // 32: sync_pb.WebApkSpecifics
	(*WebAppSpecifics)(nil),                            // 33: sync_pb.WebAppSpecifics
	(*WifiConfigurationSpecifics)(nil),                 // 34: sync_pb.WifiConfigurationSpecifics
	(*OsPreferenceSpecifics)(nil),                      // 35: sync_pb.OsPreferenceSpecifics
	(*OsPriorityPreferenceSpecifics)(nil),              // 36: sync_pb.OsPriorityPreferenceSpecifics
	(*SharingMessageSpecifics)(nil),                    // 37: sync_pb.SharingMessageSpecifics
	(*AutofillOfferSpecifics)(nil),                     // 38: sync_pb.AutofillOfferSpecifics
	(*WorkspaceDeskSpecifics)(nil),                     // 39: sync_pb.WorkspaceDeskSpecifics
	(*WebauthnCredentialSpecifics)(nil),                // 40: sync_pb.WebauthnCredentialSpecifics
	(*HistorySpecifics)(nil),                           // 41: sync_pb.HistorySpecifics
	(*PrintersAuthorizationServerSpecifics)(nil),       // 42: sync_pb.PrintersAuthorizationServerSpecifics
	(*SavedTabGroupSpecifics)(nil),                     // 43: sync_pb.SavedTabGroupSpecifics
	(*AutofillWalletUsageSpecifics)(nil),               // 44: sync_pb.AutofillWalletUsageSpecifics
	(*ContactInfoSpecifics)(nil),                       // 45: sync_pb.ContactInfoSpecifics
	(*SegmentationSpecifics)(nil),                      // 46: sync_pb.SegmentationSpecifics
	(*PowerBookmarkSpecifics)(nil),                     // 47: sync_pb.PowerBookmarkSpecifics
	(*IncomingPasswordSharingInvitationSpecifics)(nil), // 48: sync_pb.IncomingPasswordSharingInvitationSpecifics
	(*OutgoingPasswordSharingInvitationSpecifics)(nil), // 49: sync_pb.OutgoingPasswordSharingInvitationSpecifics
	(*AutofillWalletCredentialSpecifics)(nil),          // 50: sync_pb.AutofillWalletCredentialSpecifics
	(*SharedTabGroupDataSpecifics)(nil),                // 51: sync_pb.SharedTabGroupDataSpecifics
	(*CollaborationGroupSpecifics)(nil),                // 52: sync_pb.CollaborationGroupSpecifics
	(*CompareSpecifics)(nil),                           // 53: sync_pb.CompareSpecifics
	(*PlusAddressSpecifics)(nil),                       // 54: sync_pb.PlusAddressSpecifics
	(*ExperimentsSpecifics)(nil),                       // 55: sync_pb.ExperimentsSpecifics
	(*FaviconTrackingSpecifics)(nil),                   // 56: sync_pb.FaviconTrackingSpecifics
	(*FaviconImageSpecifics)(nil),                      // 57: sync_pb.FaviconImageSpecifics
	(*ManagedUserSharedSettingSpecifics)(nil),          // 58: sync_pb.ManagedUserSharedSettingSpecifics
}
var file_entity_specifics_proto_depIdxs = []int32{
	2,  // 0: sync_pb.EntitySpecifics.encrypted:type_name -> sync_pb.EncryptedData
	3,  // 1: sync_pb.EntitySpecifics.autofill:type_name -> sync_pb.AutofillSpecifics
	4,  // 2: sync_pb.EntitySpecifics.bookmark:type_name -> sync_pb.BookmarkSpecifics
	5,  // 3: sync_pb.EntitySpecifics.preference:type_name -> sync_pb.PreferenceSpecifics
	6,  // 4: sync_pb.EntitySpecifics.typed_url:type_name -> sync_pb.TypedUrlSpecifics
	7,  // 5: sync_pb.EntitySpecifics.theme:type_name -> sync_pb.ThemeSpecifics
	8,  // 6: sync_pb.EntitySpecifics.password:type_name -> sync_pb.PasswordSpecifics
	9,  // 7: sync_pb.EntitySpecifics.nigori:type_name -> sync_pb.NigoriSpecifics
	10, // 8: sync_pb.EntitySpecifics.extension:type_name -> sync_pb.ExtensionSpecifics
	11, // 9: sync_pb.EntitySpecifics.app:type_name -> sync_pb.AppSpecifics
	12, // 10: sync_pb.EntitySpecifics.session:type_name -> sync_pb.SessionSpecifics
	13, // 11: sync_pb.EntitySpecifics.autofill_profile:type_name -> sync_pb.AutofillProfileSpecifics
	14, // 12: sync_pb.EntitySpecifics.search_engine:type_name -> sync_pb.SearchEngineSpecifics
	15, // 13: sync_pb.EntitySpecifics.extension_setting:type_name -> sync_pb.ExtensionSettingSpecifics
	16, // 14: sync_pb.EntitySpecifics.app_setting:type_name -> sync_pb.AppSettingSpecifics
	17, // 15: sync_pb.EntitySpecifics.history_delete_directive:type_name -> sync_pb.HistoryDeleteDirectiveSpecifics
	18, // 16: sync_pb.EntitySpecifics.device_info:type_name -> sync_pb.DeviceInfoSpecifics
	19, // 17: sync_pb.EntitySpecifics.priority_preference:type_name -> sync_pb.PriorityPreferenceSpecifics
	20, // 18: sync_pb.EntitySpecifics.dictionary:type_name -> sync_pb.DictionarySpecifics
	21, // 19: sync_pb.EntitySpecifics.managed_user_setting:type_name -> sync_pb.ManagedUserSettingSpecifics
	22, // 20: sync_pb.EntitySpecifics.app_list:type_name -> sync_pb.AppListSpecifics
	23, // 21: sync_pb.EntitySpecifics.autofill_wallet:type_name -> sync_pb.AutofillWalletSpecifics
	24, // 22: sync_pb.EntitySpecifics.wallet_metadata:type_name -> sync_pb.WalletMetadataSpecifics
	25, // 23: sync_pb.EntitySpecifics.arc_package:type_name -> sync_pb.ArcPackageSpecifics
	26, // 24: sync_pb.EntitySpecifics.printer:type_name -> sync_pb.PrinterSpecifics
	27, // 25: sync_pb.EntitySpecifics.reading_list:type_name -> sync_pb.ReadingListSpecifics
	28, // 26: sync_pb.EntitySpecifics.user_event:type_name -> sync_pb.UserEventSpecifics
	29, // 27: sync_pb.EntitySpecifics.user_consent:type_name -> sync_pb.UserConsentSpecifics
	30, // 28: sync_pb.EntitySpecifics.send_tab_to_self:type_name -> sync_pb.SendTabToSelfSpecifics
	31, // 29: sync_pb.EntitySpecifics.security_event:type_name -> sync_pb.SecurityEventSpecifics
	32, // 30: sync_pb.EntitySpecifics.web_apk:type_name -> sync_pb.WebApkSpecifics
	33, // 31: sync_pb.EntitySpecifics.web_app:type_name -> sync_pb.WebAppSpecifics
	34, // 32: sync_pb.EntitySpecifics.wifi_configuration:type_name -> sync_pb.WifiConfigurationSpecifics
	35, // 33: sync_pb.EntitySpecifics.os_preference:type_name -> sync_pb.OsPreferenceSpecifics
	36, // 34: sync_pb.EntitySpecifics.os_priority_preference:type_name -> sync_pb.OsPriorityPreferenceSpecifics
	37, // 35: sync_pb.EntitySpecifics.sharing_message:type_name -> sync_pb.SharingMessageSpecifics
	38, // 36: sync_pb.EntitySpecifics.autofill_offer:type_name -> sync_pb.AutofillOfferSpecifics
	39, // 37: sync_pb.EntitySpecifics.workspace_desk:type_name -> sync_pb.WorkspaceDeskSpecifics
	40, // 38: sync_pb.EntitySpecifics.webauthn_credential:type_name -> sync_pb.WebauthnCredentialSpecifics
	41, // 39: sync_pb.EntitySpecifics.history:type_name -> sync_pb.HistorySpecifics
	42, // 40: sync_pb.EntitySpecifics.printers_authorization_server:type_name -> sync_pb.PrintersAuthorizationServerSpecifics
	43, // 41: sync_pb.EntitySpecifics.saved_tab_group:type_name -> sync_pb.SavedTabGroupSpecifics
	44, // 42: sync_pb.EntitySpecifics.autofill_wallet_usage:type_name -> sync_pb.AutofillWalletUsageSpecifics
	45, // 43: sync_pb.EntitySpecifics.contact_info:type_name -> sync_pb.ContactInfoSpecifics
	46, // 44: sync_pb.EntitySpecifics.segmentation:type_name -> sync_pb.SegmentationSpecifics
	47, // 45: sync_pb.EntitySpecifics.power_bookmark:type_name -> sync_pb.PowerBookmarkSpecifics
	48, // 46: sync_pb.EntitySpecifics.incoming_password_sharing_invitation:type_name -> sync_pb.IncomingPasswordSharingInvitationSpecifics
	49, // 47: sync_pb.EntitySpecifics.outgoing_password_sharing_invitation:type_name -> sync_pb.OutgoingPasswordSharingInvitationSpecifics
	50, // 48: sync_pb.EntitySpecifics.autofill_wallet_credential:type_name -> sync_pb.AutofillWalletCredentialSpecifics
	51, // 49: sync_pb.EntitySpecifics.shared_tab_group_data:type_name -> sync_pb.SharedTabGroupDataSpecifics
	52, // 50: sync_pb.EntitySpecifics.collaboration_group:type_name -> sync_pb.CollaborationGroupSpecifics
	53, // 51: sync_pb.EntitySpecifics.compare:type_name -> sync_pb.CompareSpecifics
	54, // 52: sync_pb.EntitySpecifics.plus_address:type_name -> sync_pb.PlusAddressSpecifics
	1,  // 53: sync_pb.EntitySpecifics.app_notification:type_name -> sync_pb.EmptySpecifics
	1,  // 54: sync_pb.EntitySpecifics.synced_notification:type_name -> sync_pb.EmptySpecifics
	1,  // 55: sync_pb.EntitySpecifics.synced_notification_app_info:type_name -> sync_pb.EmptySpecifics
	55, // 56: sync_pb.EntitySpecifics.experiments:type_name -> sync_pb.ExperimentsSpecifics
	56, // 57: sync_pb.EntitySpecifics.favicon_tracking:type_name -> sync_pb.FaviconTrackingSpecifics
	57, // 58: sync_pb.EntitySpecifics.favicon_image:type_name -> sync_pb.FaviconImageSpecifics
	1,  // 59: sync_pb.EntitySpecifics.managed_user:type_name -> sync_pb.EmptySpecifics
	58, // 60: sync_pb.EntitySpecifics.managed_user_shared_setting:type_name -> sync_pb.ManagedUserSharedSettingSpecifics
	1,  // 61: sync_pb.EntitySpecifics.managed_user_allowlist:type_name -> sync_pb.EmptySpecifics
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_entity_specifics_proto_init() }
func file_entity_specifics_proto_init() {
	if File_entity_specifics_proto != nil {
		return
	}
	file_encryption_proto_init()
	file_app_list_specifics_proto_init()
	file_app_setting_specifics_proto_init()
	file_app_specifics_proto_init()
	file_arc_package_specifics_proto_init()
	file_autofill_specifics_proto_init()
	file_autofill_offer_specifics_proto_init()
	file_autofill_wallet_credential_specifics_proto_init()
	file_autofill_wallet_usage_specifics_proto_init()
	file_bookmark_specifics_proto_init()
	file_collaboration_group_specifics_proto_init()
	file_compare_specifics_proto_init()
	file_contact_info_specifics_proto_init()
	file_device_info_specifics_proto_init()
	file_dictionary_specifics_proto_init()
	file_experiments_specifics_proto_init()
	file_extension_setting_specifics_proto_init()
	file_extension_specifics_proto_init()
	file_favicon_image_specifics_proto_init()
	file_favicon_tracking_specifics_proto_init()
	file_history_delete_directive_specifics_proto_init()
	file_history_specifics_proto_init()
	file_managed_user_setting_specifics_proto_init()
	file_managed_user_shared_setting_specifics_proto_init()
	file_nigori_specifics_proto_init()
	file_os_preference_specifics_proto_init()
	file_os_priority_preference_specifics_proto_init()
	file_password_sharing_invitation_specifics_proto_init()
	file_password_specifics_proto_init()
	file_plus_address_specifics_proto_init()
	file_power_bookmark_specifics_proto_init()
	file_preference_specifics_proto_init()
	file_printer_specifics_proto_init()
	file_printers_authorization_server_specifics_proto_init()
	file_priority_preference_specifics_proto_init()
	file_reading_list_specifics_proto_init()
	file_saved_tab_group_specifics_proto_init()
	file_search_engine_specifics_proto_init()
	file_security_event_specifics_proto_init()
	file_send_tab_to_self_specifics_proto_init()
	file_segmentation_specifics_proto_init()
	file_session_specifics_proto_init()
	file_shared_tab_group_data_specifics_proto_init()
	file_sharing_message_specifics_proto_init()
	file_theme_specifics_proto_init()
	file_typed_url_specifics_proto_init()
	file_user_consent_specifics_proto_init()
	file_user_event_specifics_proto_init()
	file_web_apk_specifics_proto_init()
	file_web_app_specifics_proto_init()
	file_webauthn_credential_specifics_proto_init()
	file_wifi_configuration_specifics_proto_init()
	file_workspace_desk_specifics_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_entity_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitySpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entity_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptySpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_entity_specifics_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EntitySpecifics_Autofill)(nil),
		(*EntitySpecifics_Bookmark)(nil),
		(*EntitySpecifics_Preference)(nil),
		(*EntitySpecifics_TypedUrl)(nil),
		(*EntitySpecifics_Theme)(nil),
		(*EntitySpecifics_Password)(nil),
		(*EntitySpecifics_Nigori)(nil),
		(*EntitySpecifics_Extension)(nil),
		(*EntitySpecifics_App)(nil),
		(*EntitySpecifics_Session)(nil),
		(*EntitySpecifics_AutofillProfile)(nil),
		(*EntitySpecifics_SearchEngine)(nil),
		(*EntitySpecifics_ExtensionSetting)(nil),
		(*EntitySpecifics_AppSetting)(nil),
		(*EntitySpecifics_HistoryDeleteDirective)(nil),
		(*EntitySpecifics_DeviceInfo)(nil),
		(*EntitySpecifics_PriorityPreference)(nil),
		(*EntitySpecifics_Dictionary)(nil),
		(*EntitySpecifics_ManagedUserSetting)(nil),
		(*EntitySpecifics_AppList)(nil),
		(*EntitySpecifics_AutofillWallet)(nil),
		(*EntitySpecifics_WalletMetadata)(nil),
		(*EntitySpecifics_ArcPackage)(nil),
		(*EntitySpecifics_Printer)(nil),
		(*EntitySpecifics_ReadingList)(nil),
		(*EntitySpecifics_UserEvent)(nil),
		(*EntitySpecifics_UserConsent)(nil),
		(*EntitySpecifics_SendTabToSelf)(nil),
		(*EntitySpecifics_SecurityEvent)(nil),
		(*EntitySpecifics_WebApk)(nil),
		(*EntitySpecifics_WebApp)(nil),
		(*EntitySpecifics_WifiConfiguration)(nil),
		(*EntitySpecifics_OsPreference)(nil),
		(*EntitySpecifics_OsPriorityPreference)(nil),
		(*EntitySpecifics_SharingMessage)(nil),
		(*EntitySpecifics_AutofillOffer)(nil),
		(*EntitySpecifics_WorkspaceDesk)(nil),
		(*EntitySpecifics_WebauthnCredential)(nil),
		(*EntitySpecifics_History)(nil),
		(*EntitySpecifics_PrintersAuthorizationServer)(nil),
		(*EntitySpecifics_SavedTabGroup)(nil),
		(*EntitySpecifics_AutofillWalletUsage)(nil),
		(*EntitySpecifics_ContactInfo)(nil),
		(*EntitySpecifics_Segmentation)(nil),
		(*EntitySpecifics_PowerBookmark)(nil),
		(*EntitySpecifics_IncomingPasswordSharingInvitation)(nil),
		(*EntitySpecifics_OutgoingPasswordSharingInvitation)(nil),
		(*EntitySpecifics_AutofillWalletCredential)(nil),
		(*EntitySpecifics_SharedTabGroupData)(nil),
		(*EntitySpecifics_CollaborationGroup)(nil),
		(*EntitySpecifics_Compare)(nil),
		(*EntitySpecifics_PlusAddress)(nil),
		(*EntitySpecifics_AppNotification)(nil),
		(*EntitySpecifics_SyncedNotification)(nil),
		(*EntitySpecifics_SyncedNotificationAppInfo)(nil),
		(*EntitySpecifics_Experiments)(nil),
		(*EntitySpecifics_FaviconTracking)(nil),
		(*EntitySpecifics_FaviconImage)(nil),
		(*EntitySpecifics_ManagedUser)(nil),
		(*EntitySpecifics_ManagedUserSharedSetting)(nil),
		(*EntitySpecifics_ManagedUserAllowlist)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_entity_specifics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_entity_specifics_proto_goTypes,
		DependencyIndexes: file_entity_specifics_proto_depIdxs,
		MessageInfos:      file_entity_specifics_proto_msgTypes,
	}.Build()
	File_entity_specifics_proto = out.File
	file_entity_specifics_proto_rawDesc = nil
	file_entity_specifics_proto_goTypes = nil
	file_entity_specifics_proto_depIdxs = nil
}
