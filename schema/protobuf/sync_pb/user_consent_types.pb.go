// Copyright 2018 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Various user consent types used when reporting consent.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: user_consent_types.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The status of a particular User Consent. The status describes the state
// of the consent as it is: given, not_given.
type UserConsentTypes_ConsentStatus int32

const (
	// The status is unspecified e.g. because the user was not asked to
	// consent yet or an error happened or the decision was delayed.
	UserConsentTypes_CONSENT_STATUS_UNSPECIFIED UserConsentTypes_ConsentStatus = 0
	// The consent is not given. This means the user either revoked the
	// consent or did not grant it in the first place.
	UserConsentTypes_NOT_GIVEN UserConsentTypes_ConsentStatus = 1
	// The consent is given. This means the user did grant the consent.
	UserConsentTypes_GIVEN UserConsentTypes_ConsentStatus = 2
)

// Enum value maps for UserConsentTypes_ConsentStatus.
var (
	UserConsentTypes_ConsentStatus_name = map[int32]string{
		0: "CONSENT_STATUS_UNSPECIFIED",
		1: "NOT_GIVEN",
		2: "GIVEN",
	}
	UserConsentTypes_ConsentStatus_value = map[string]int32{
		"CONSENT_STATUS_UNSPECIFIED": 0,
		"NOT_GIVEN":                  1,
		"GIVEN":                      2,
	}
)

func (x UserConsentTypes_ConsentStatus) Enum() *UserConsentTypes_ConsentStatus {
	p := new(UserConsentTypes_ConsentStatus)
	*p = x
	return p
}

func (x UserConsentTypes_ConsentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserConsentTypes_ConsentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_user_consent_types_proto_enumTypes[0].Descriptor()
}

func (UserConsentTypes_ConsentStatus) Type() protoreflect.EnumType {
	return &file_user_consent_types_proto_enumTypes[0]
}

func (x UserConsentTypes_ConsentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserConsentTypes_ConsentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserConsentTypes_ConsentStatus(num)
	return nil
}

// Deprecated: Use UserConsentTypes_ConsentStatus.Descriptor instead.
func (UserConsentTypes_ConsentStatus) EnumDescriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 0}
}

// Enum describing different user flow during which the ARC Play Terms of
// service consent can be recorded.
type UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow int32

const (
	// The ARC setup flow on a CROS device.
	UserConsentTypes_ArcPlayTermsOfServiceConsent_SETUP UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow = 1
	// The user flow for changing the ARC setting on a CROS device.
	UserConsentTypes_ArcPlayTermsOfServiceConsent_SETTING_CHANGE UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow = 2
)

// Enum value maps for UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow.
var (
	UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_name = map[int32]string{
		1: "SETUP",
		2: "SETTING_CHANGE",
	}
	UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_value = map[string]int32{
		"SETUP":          1,
		"SETTING_CHANGE": 2,
	}
)

func (x UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) Enum() *UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow {
	p := new(UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow)
	*p = x
	return p
}

func (x UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) Descriptor() protoreflect.EnumDescriptor {
	return file_user_consent_types_proto_enumTypes[1].Descriptor()
}

func (UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) Type() protoreflect.EnumType {
	return &file_user_consent_types_proto_enumTypes[1]
}

func (x UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow(num)
	return nil
}

// Deprecated: Use UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow.Descriptor instead.
func (UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow) EnumDescriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Enum denoting different Assistant activity control setting type.
type UserConsentTypes_AssistantActivityControlConsent_SettingType int32

const (
	// Legacy clients (< M93) did not set a SettingType; for those,
	// UNSPECIFIED should be interpreted as ALL. Newer clients should always
	// set it explicitly.
	UserConsentTypes_AssistantActivityControlConsent_SETTING_TYPE_UNSPECIFIED UserConsentTypes_AssistantActivityControlConsent_SettingType = 0
	// All Settings.
	UserConsentTypes_AssistantActivityControlConsent_ALL                  UserConsentTypes_AssistantActivityControlConsent_SettingType = 1
	UserConsentTypes_AssistantActivityControlConsent_WEB_AND_APP_ACTIVITY UserConsentTypes_AssistantActivityControlConsent_SettingType = 2
	UserConsentTypes_AssistantActivityControlConsent_DEVICE_APPS          UserConsentTypes_AssistantActivityControlConsent_SettingType = 3
)

// Enum value maps for UserConsentTypes_AssistantActivityControlConsent_SettingType.
var (
	UserConsentTypes_AssistantActivityControlConsent_SettingType_name = map[int32]string{
		0: "SETTING_TYPE_UNSPECIFIED",
		1: "ALL",
		2: "WEB_AND_APP_ACTIVITY",
		3: "DEVICE_APPS",
	}
	UserConsentTypes_AssistantActivityControlConsent_SettingType_value = map[string]int32{
		"SETTING_TYPE_UNSPECIFIED": 0,
		"ALL":                      1,
		"WEB_AND_APP_ACTIVITY":     2,
		"DEVICE_APPS":              3,
	}
)

func (x UserConsentTypes_AssistantActivityControlConsent_SettingType) Enum() *UserConsentTypes_AssistantActivityControlConsent_SettingType {
	p := new(UserConsentTypes_AssistantActivityControlConsent_SettingType)
	*p = x
	return p
}

func (x UserConsentTypes_AssistantActivityControlConsent_SettingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserConsentTypes_AssistantActivityControlConsent_SettingType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_consent_types_proto_enumTypes[2].Descriptor()
}

func (UserConsentTypes_AssistantActivityControlConsent_SettingType) Type() protoreflect.EnumType {
	return &file_user_consent_types_proto_enumTypes[2]
}

func (x UserConsentTypes_AssistantActivityControlConsent_SettingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserConsentTypes_AssistantActivityControlConsent_SettingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserConsentTypes_AssistantActivityControlConsent_SettingType(num)
	return nil
}

// Deprecated: Use UserConsentTypes_AssistantActivityControlConsent_SettingType.Descriptor instead.
func (UserConsentTypes_AssistantActivityControlConsent_SettingType) EnumDescriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 5, 0}
}

type UserConsentTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserConsentTypes) Reset() {
	*x = UserConsentTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_consent_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConsentTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConsentTypes) ProtoMessage() {}

func (x *UserConsentTypes) ProtoReflect() protoreflect.Message {
	mi := &file_user_consent_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConsentTypes.ProtoReflect.Descriptor instead.
func (*UserConsentTypes) Descriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0}
}

// The user consent for the ARC Backup And Restore feature. The consent
// status is determined by the corresponding setting on the ARC setup dialog.
type UserConsentTypes_ArcBackupAndRestoreConsent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids of the strings of the setting text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked when consenting.
	ConfirmationGrdId *int32                          `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	Status            *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
}

func (x *UserConsentTypes_ArcBackupAndRestoreConsent) Reset() {
	*x = UserConsentTypes_ArcBackupAndRestoreConsent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_consent_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConsentTypes_ArcBackupAndRestoreConsent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConsentTypes_ArcBackupAndRestoreConsent) ProtoMessage() {}

func (x *UserConsentTypes_ArcBackupAndRestoreConsent) ProtoReflect() protoreflect.Message {
	mi := &file_user_consent_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConsentTypes_ArcBackupAndRestoreConsent.ProtoReflect.Descriptor instead.
func (*UserConsentTypes_ArcBackupAndRestoreConsent) Descriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *UserConsentTypes_ArcBackupAndRestoreConsent) GetDescriptionGrdIds() []int32 {
	if x != nil {
		return x.DescriptionGrdIds
	}
	return nil
}

func (x *UserConsentTypes_ArcBackupAndRestoreConsent) GetConfirmationGrdId() int32 {
	if x != nil && x.ConfirmationGrdId != nil {
		return *x.ConfirmationGrdId
	}
	return 0
}

func (x *UserConsentTypes_ArcBackupAndRestoreConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// The user consent for the Google Location Service. The consent status is
// determined by the corresponding setting on the ARC setup dialog.
type UserConsentTypes_ArcGoogleLocationServiceConsent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids of the strings of the setting text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked when consenting.
	ConfirmationGrdId *int32                          `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	Status            *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
}

func (x *UserConsentTypes_ArcGoogleLocationServiceConsent) Reset() {
	*x = UserConsentTypes_ArcGoogleLocationServiceConsent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_consent_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConsentTypes_ArcGoogleLocationServiceConsent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConsentTypes_ArcGoogleLocationServiceConsent) ProtoMessage() {}

func (x *UserConsentTypes_ArcGoogleLocationServiceConsent) ProtoReflect() protoreflect.Message {
	mi := &file_user_consent_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConsentTypes_ArcGoogleLocationServiceConsent.ProtoReflect.Descriptor instead.
func (*UserConsentTypes_ArcGoogleLocationServiceConsent) Descriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 1}
}

func (x *UserConsentTypes_ArcGoogleLocationServiceConsent) GetDescriptionGrdIds() []int32 {
	if x != nil {
		return x.DescriptionGrdIds
	}
	return nil
}

func (x *UserConsentTypes_ArcGoogleLocationServiceConsent) GetConfirmationGrdId() int32 {
	if x != nil && x.ConfirmationGrdId != nil {
		return *x.ConfirmationGrdId
	}
	return 0
}

func (x *UserConsentTypes_ArcGoogleLocationServiceConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// The user consent for the Play terms of service is determined by the user
// action on the ARC setup dialog that presents the Play Terms of Service.
type UserConsentTypes_ArcPlayTermsOfServiceConsent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The length of the UTF-8 encoded string of the Play Terms of Service
	// text. The length is given in number of bytes.
	PlayTermsOfServiceTextLength *int32 `protobuf:"varint,1,opt,name=play_terms_of_service_text_length,json=playTermsOfServiceTextLength" json:"play_terms_of_service_text_length,omitempty"`
	// The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
	// displayed to the user.
	PlayTermsOfServiceHash []byte `protobuf:"bytes,2,opt,name=play_terms_of_service_hash,json=playTermsOfServiceHash" json:"play_terms_of_service_hash,omitempty"`
	// GRD Ids of the strings on the consent UI that was shown to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,5,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked when consenting.
	ConfirmationGrdId *int32 `protobuf:"varint,3,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	// The status of the Play Terms of Service consent. This specifies whether
	// the consent was given or not given/revoked.
	Status *UserConsentTypes_ConsentStatus `protobuf:"varint,4,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
	// The user flow during which the consent was recorded. This is necessary in
	// order to create the correct UI context and Event for the backend.
	ConsentFlow *UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow `protobuf:"varint,6,opt,name=consent_flow,json=consentFlow,enum=sync_pb.UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow" json:"consent_flow,omitempty"`
}

func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent) Reset() {
	*x = UserConsentTypes_ArcPlayTermsOfServiceConsent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_consent_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConsentTypes_ArcPlayTermsOfServiceConsent) ProtoMessage() {}

func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent) ProtoReflect() protoreflect.Message {
	mi := &file_user_consent_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConsentTypes_ArcPlayTermsOfServiceConsent.ProtoReflect.Descriptor instead.
func (*UserConsentTypes_ArcPlayTermsOfServiceConsent) Descriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 2}
}

func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetPlayTermsOfServiceTextLength() int32 {
	if x != nil && x.PlayTermsOfServiceTextLength != nil {
		return *x.PlayTermsOfServiceTextLength
	}
	return 0
}

func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetPlayTermsOfServiceHash() []byte {
	if x != nil {
		return x.PlayTermsOfServiceHash
	}
	return nil
}

func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetDescriptionGrdIds() []int32 {
	if x != nil {
		return x.DescriptionGrdIds
	}
	return nil
}

func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetConfirmationGrdId() int32 {
	if x != nil && x.ConfirmationGrdId != nil {
		return *x.ConfirmationGrdId
	}
	return 0
}

func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

func (x *UserConsentTypes_ArcPlayTermsOfServiceConsent) GetConsentFlow() UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow {
	if x != nil && x.ConsentFlow != nil {
		return *x.ConsentFlow
	}
	return UserConsentTypes_ArcPlayTermsOfServiceConsent_SETUP
}

// The User Consent for Chrome Sync is determined by the user action on the
// corresponding Sync Consent dialog.
type UserConsentTypes_SyncConsent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids of the strings of the sync consent text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked in order to confirm
	// and close the sync consent dialog.
	ConfirmationGrdId *int32 `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	// The status of the sync consent. This specifies whether the consent was
	// given or not given/revoked.
	Status *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
}

func (x *UserConsentTypes_SyncConsent) Reset() {
	*x = UserConsentTypes_SyncConsent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_consent_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConsentTypes_SyncConsent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConsentTypes_SyncConsent) ProtoMessage() {}

func (x *UserConsentTypes_SyncConsent) ProtoReflect() protoreflect.Message {
	mi := &file_user_consent_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConsentTypes_SyncConsent.ProtoReflect.Descriptor instead.
func (*UserConsentTypes_SyncConsent) Descriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 3}
}

func (x *UserConsentTypes_SyncConsent) GetDescriptionGrdIds() []int32 {
	if x != nil {
		return x.DescriptionGrdIds
	}
	return nil
}

func (x *UserConsentTypes_SyncConsent) GetConfirmationGrdId() int32 {
	if x != nil && x.ConfirmationGrdId != nil {
		return *x.ConfirmationGrdId
	}
	return 0
}

func (x *UserConsentTypes_SyncConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// The unified User Consent for Chrome is determined by the user action on the
// corresponding Chrome Consent dialog.
type UserConsentTypes_UnifiedConsent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids of the strings of the unified Chrome consent text presented to the
	// user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked in order to confirm
	// and close the unified Chrome consent dialog.
	ConfirmationGrdId *int32 `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	// The status of the unified Chrome consent. This specifies whether the
	// consent was given or not given/revoked.
	Status *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
}

func (x *UserConsentTypes_UnifiedConsent) Reset() {
	*x = UserConsentTypes_UnifiedConsent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_consent_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConsentTypes_UnifiedConsent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConsentTypes_UnifiedConsent) ProtoMessage() {}

func (x *UserConsentTypes_UnifiedConsent) ProtoReflect() protoreflect.Message {
	mi := &file_user_consent_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConsentTypes_UnifiedConsent.ProtoReflect.Descriptor instead.
func (*UserConsentTypes_UnifiedConsent) Descriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 4}
}

func (x *UserConsentTypes_UnifiedConsent) GetDescriptionGrdIds() []int32 {
	if x != nil {
		return x.DescriptionGrdIds
	}
	return nil
}

func (x *UserConsentTypes_UnifiedConsent) GetConfirmationGrdId() int32 {
	if x != nil && x.ConfirmationGrdId != nil {
		return *x.ConfirmationGrdId
	}
	return 0
}

func (x *UserConsentTypes_UnifiedConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

// The User Consent for Assistant activity control is determined by the user
// action on the Assistant opt-in flow.
type UserConsentTypes_AssistantActivityControlConsent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An opaque token to for ui auditing, which strengthens the audit trail.
	UiAuditKey []byte `protobuf:"bytes,1,opt,name=ui_audit_key,json=uiAuditKey" json:"ui_audit_key,omitempty"`
	// The status of the Assistant activity control consent. This specifies
	// whether the consent was given or not given.
	Status *UserConsentTypes_ConsentStatus `protobuf:"varint,2,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
	// The activity control setting which the consent was given or not given to.
	// Clients before M93 did not set this field. Such consents should be
	// treated as applying to ALL.
	SettingType *UserConsentTypes_AssistantActivityControlConsent_SettingType `protobuf:"varint,3,opt,name=setting_type,json=settingType,enum=sync_pb.UserConsentTypes_AssistantActivityControlConsent_SettingType" json:"setting_type,omitempty"`
}

func (x *UserConsentTypes_AssistantActivityControlConsent) Reset() {
	*x = UserConsentTypes_AssistantActivityControlConsent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_consent_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConsentTypes_AssistantActivityControlConsent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConsentTypes_AssistantActivityControlConsent) ProtoMessage() {}

func (x *UserConsentTypes_AssistantActivityControlConsent) ProtoReflect() protoreflect.Message {
	mi := &file_user_consent_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConsentTypes_AssistantActivityControlConsent.ProtoReflect.Descriptor instead.
func (*UserConsentTypes_AssistantActivityControlConsent) Descriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 5}
}

func (x *UserConsentTypes_AssistantActivityControlConsent) GetUiAuditKey() []byte {
	if x != nil {
		return x.UiAuditKey
	}
	return nil
}

func (x *UserConsentTypes_AssistantActivityControlConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

func (x *UserConsentTypes_AssistantActivityControlConsent) GetSettingType() UserConsentTypes_AssistantActivityControlConsent_SettingType {
	if x != nil && x.SettingType != nil {
		return *x.SettingType
	}
	return UserConsentTypes_AssistantActivityControlConsent_SETTING_TYPE_UNSPECIFIED
}

// The User Consent for downloading and using passwords stored in the user's
// Google Account. Determined during the opt-in flow for the feature.
type UserConsentTypes_AccountPasswordsConsent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids of the strings of the consent text presented to the user.
	DescriptionGrdIds []int32 `protobuf:"varint,1,rep,name=description_grd_ids,json=descriptionGrdIds" json:"description_grd_ids,omitempty"`
	// Id of the string of the UI element the user clicked in order to confirm
	// the consent dialog.
	ConfirmationGrdId *int32 `protobuf:"varint,2,opt,name=confirmation_grd_id,json=confirmationGrdId" json:"confirmation_grd_id,omitempty"`
	// The status of the consent. This specifies whether the consent was given
	// or not given/revoked.
	Status *UserConsentTypes_ConsentStatus `protobuf:"varint,3,opt,name=status,enum=sync_pb.UserConsentTypes_ConsentStatus" json:"status,omitempty"`
}

func (x *UserConsentTypes_AccountPasswordsConsent) Reset() {
	*x = UserConsentTypes_AccountPasswordsConsent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_consent_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConsentTypes_AccountPasswordsConsent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConsentTypes_AccountPasswordsConsent) ProtoMessage() {}

func (x *UserConsentTypes_AccountPasswordsConsent) ProtoReflect() protoreflect.Message {
	mi := &file_user_consent_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConsentTypes_AccountPasswordsConsent.ProtoReflect.Descriptor instead.
func (*UserConsentTypes_AccountPasswordsConsent) Descriptor() ([]byte, []int) {
	return file_user_consent_types_proto_rawDescGZIP(), []int{0, 6}
}

func (x *UserConsentTypes_AccountPasswordsConsent) GetDescriptionGrdIds() []int32 {
	if x != nil {
		return x.DescriptionGrdIds
	}
	return nil
}

func (x *UserConsentTypes_AccountPasswordsConsent) GetConfirmationGrdId() int32 {
	if x != nil && x.ConfirmationGrdId != nil {
		return *x.ConfirmationGrdId
	}
	return 0
}

func (x *UserConsentTypes_AccountPasswordsConsent) GetStatus() UserConsentTypes_ConsentStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserConsentTypes_CONSENT_STATUS_UNSPECIFIED
}

var File_user_consent_types_proto protoreflect.FileDescriptor

var file_user_consent_types_proto_rawDesc = []byte{
	0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x22, 0xb2, 0x0e, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0xbd, 0x01, 0x0a, 0x1a, 0x41, 0x72, 0x63,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x1f, 0x41, 0x72, 0x63,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xd9, 0x03,
	0x0a, 0x1c, 0x41, 0x72, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x2c, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45,
	0x54, 0x55, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x1a, 0xae, 0x01, 0x0a, 0x0b, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xb1, 0x01, 0x0a, 0x0e, 0x55,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xcf,
	0x02, 0x0a, 0x1f, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x69, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x69, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x68, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x5f, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x10, 0x03,
	0x1a, 0xba, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x10, 0x02, 0x42, 0x36, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x48, 0x03, 0x50, 0x01, 0x5a, 0x09, 0x2e, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_user_consent_types_proto_rawDescOnce sync.Once
	file_user_consent_types_proto_rawDescData = file_user_consent_types_proto_rawDesc
)

func file_user_consent_types_proto_rawDescGZIP() []byte {
	file_user_consent_types_proto_rawDescOnce.Do(func() {
		file_user_consent_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_consent_types_proto_rawDescData)
	})
	return file_user_consent_types_proto_rawDescData
}

var file_user_consent_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_user_consent_types_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_user_consent_types_proto_goTypes = []interface{}{
	(UserConsentTypes_ConsentStatus)(0),                               // 0: sync_pb.UserConsentTypes.ConsentStatus
	(UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow)(0),    // 1: sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow
	(UserConsentTypes_AssistantActivityControlConsent_SettingType)(0), // 2: sync_pb.UserConsentTypes.AssistantActivityControlConsent.SettingType
	(*UserConsentTypes)(nil),                                          // 3: sync_pb.UserConsentTypes
	(*UserConsentTypes_ArcBackupAndRestoreConsent)(nil),               // 4: sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent
	(*UserConsentTypes_ArcGoogleLocationServiceConsent)(nil),          // 5: sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent
	(*UserConsentTypes_ArcPlayTermsOfServiceConsent)(nil),             // 6: sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent
	(*UserConsentTypes_SyncConsent)(nil),                              // 7: sync_pb.UserConsentTypes.SyncConsent
	(*UserConsentTypes_UnifiedConsent)(nil),                           // 8: sync_pb.UserConsentTypes.UnifiedConsent
	(*UserConsentTypes_AssistantActivityControlConsent)(nil),          // 9: sync_pb.UserConsentTypes.AssistantActivityControlConsent
	(*UserConsentTypes_AccountPasswordsConsent)(nil),                  // 10: sync_pb.UserConsentTypes.AccountPasswordsConsent
}
var file_user_consent_types_proto_depIdxs = []int32{
	0, // 0: sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.status:type_name -> sync_pb.UserConsentTypes.ConsentStatus
	0, // 1: sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.status:type_name -> sync_pb.UserConsentTypes.ConsentStatus
	0, // 2: sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.status:type_name -> sync_pb.UserConsentTypes.ConsentStatus
	1, // 3: sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.consent_flow:type_name -> sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow
	0, // 4: sync_pb.UserConsentTypes.SyncConsent.status:type_name -> sync_pb.UserConsentTypes.ConsentStatus
	0, // 5: sync_pb.UserConsentTypes.UnifiedConsent.status:type_name -> sync_pb.UserConsentTypes.ConsentStatus
	0, // 6: sync_pb.UserConsentTypes.AssistantActivityControlConsent.status:type_name -> sync_pb.UserConsentTypes.ConsentStatus
	2, // 7: sync_pb.UserConsentTypes.AssistantActivityControlConsent.setting_type:type_name -> sync_pb.UserConsentTypes.AssistantActivityControlConsent.SettingType
	0, // 8: sync_pb.UserConsentTypes.AccountPasswordsConsent.status:type_name -> sync_pb.UserConsentTypes.ConsentStatus
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_user_consent_types_proto_init() }
func file_user_consent_types_proto_init() {
	if File_user_consent_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_consent_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConsentTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_consent_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConsentTypes_ArcBackupAndRestoreConsent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_consent_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConsentTypes_ArcGoogleLocationServiceConsent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_consent_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConsentTypes_ArcPlayTermsOfServiceConsent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_consent_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConsentTypes_SyncConsent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_consent_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConsentTypes_UnifiedConsent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_consent_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConsentTypes_AssistantActivityControlConsent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_consent_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConsentTypes_AccountPasswordsConsent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_consent_types_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_consent_types_proto_goTypes,
		DependencyIndexes: file_user_consent_types_proto_depIdxs,
		EnumInfos:         file_user_consent_types_proto_enumTypes,
		MessageInfos:      file_user_consent_types_proto_msgTypes,
	}.Build()
	File_user_consent_types_proto = out.File
	file_user_consent_types_proto_rawDesc = nil
	file_user_consent_types_proto_goTypes = nil
	file_user_consent_types_proto_depIdxs = nil
}
