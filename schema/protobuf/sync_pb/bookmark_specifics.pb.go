// Copyright 2012 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for bookmarks.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: bookmark_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Introduced in M94, determines whether this entity represents a bookmark
// folder. This field is redundant to the similar field in SyncEntity. If this
// field in specifics is set, it takes precedence over the one in SyncEntity.
type BookmarkSpecifics_Type int32

const (
	// |UNSPECIFIED| is relevant only for the case where the field is not set.
	// M94 and above should not use this value.
	BookmarkSpecifics_UNSPECIFIED BookmarkSpecifics_Type = 0
	BookmarkSpecifics_URL         BookmarkSpecifics_Type = 1
	BookmarkSpecifics_FOLDER      BookmarkSpecifics_Type = 2
)

// Enum value maps for BookmarkSpecifics_Type.
var (
	BookmarkSpecifics_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "URL",
		2: "FOLDER",
	}
	BookmarkSpecifics_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"URL":         1,
		"FOLDER":      2,
	}
)

func (x BookmarkSpecifics_Type) Enum() *BookmarkSpecifics_Type {
	p := new(BookmarkSpecifics_Type)
	*p = x
	return p
}

func (x BookmarkSpecifics_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookmarkSpecifics_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bookmark_specifics_proto_enumTypes[0].Descriptor()
}

func (BookmarkSpecifics_Type) Type() protoreflect.EnumType {
	return &file_bookmark_specifics_proto_enumTypes[0]
}

func (x BookmarkSpecifics_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BookmarkSpecifics_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BookmarkSpecifics_Type(num)
	return nil
}

// Deprecated: Use BookmarkSpecifics_Type.Descriptor instead.
func (BookmarkSpecifics_Type) EnumDescriptor() ([]byte, []int) {
	return file_bookmark_specifics_proto_rawDescGZIP(), []int{1, 0}
}

// Corresponds to a single meta info key/value pair for a bookmark node.
type MetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *MetaInfo) Reset() {
	*x = MetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaInfo) ProtoMessage() {}

func (x *MetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaInfo.ProtoReflect.Descriptor instead.
func (*MetaInfo) Descriptor() ([]byte, []int) {
	return file_bookmark_specifics_proto_rawDescGZIP(), []int{0}
}

func (x *MetaInfo) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *MetaInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Properties of bookmark sync objects.
type BookmarkSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the bookmarked page (unset for folders).
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// PNG-encoded content of the favicon image (in practice 16x16, as determined
	// by |kFaviconSize|). Empty if the bookmark has no favicon (which includes
	// bookmark folders).
	Favicon []byte `protobuf:"bytes,2,opt,name=favicon" json:"favicon,omitempty"`
	// Contains legacy title which is truncated and may contain escaped symbols.
	LegacyCanonicalizedTitle *string `protobuf:"bytes,3,opt,name=legacy_canonicalized_title,json=legacyCanonicalizedTitle" json:"legacy_canonicalized_title,omitempty"`
	// Corresponds to BookmarkNode::date_added() represented as microseconds since
	// the Windows epoch.
	CreationTimeUs *int64 `protobuf:"varint,4,opt,name=creation_time_us,json=creationTimeUs" json:"creation_time_us,omitempty"`
	// The URL of the favicon image encoded in field |favicon|. Note that there
	// are various cases where this URL may be missing (field unset or empty) even
	// if the |favicon| field (image content) is populated:
	// 1. WebUI pages such as "chrome://bookmarks/" are missing a favicon URL but
	//    they have a favicon.
	// 2. Data generated by ancient clients (prior to M25) may not contain the
	//    favicon URL.
	// 3. If the favicon URL is too large (determined by |kMaxFaviconUrlSize|) it
	//    may be omitted by clients to avoid running into the max-entity-size
	//    limit. Most notably, this includes URLs prefixed with the data: scheme
	//    that may encode the image content itself in the URL.
	IconUrl  *string     `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
	MetaInfo []*MetaInfo `protobuf:"bytes,6,rep,name=meta_info,json=metaInfo" json:"meta_info,omitempty"`
	// Introduced in M81, it represents a globally unique and immutable ID.
	//
	// If present, it must be the same as originator_client_item_id in lowercase,
	// unless originator client item ID is not a valid GUID. In such cases (which
	// is the case for bookmarks created before 2015), this GUID must match the
	// value inferred from the combination of originator cache GUID and
	// originator client item ID, see InferGuidForLegacyBookmark().
	//
	// If not present, the value can be safely inferred using the very same
	// methods listed above.
	Guid *string `protobuf:"bytes,10,opt,name=guid" json:"guid,omitempty"`
	// Contains full title as is. |legacy_canonicalized_title| is a prefix of
	// |full_title| with escaped symbols.
	FullTitle *string `protobuf:"bytes,11,opt,name=full_title,json=fullTitle" json:"full_title,omitempty"`
	// Introduced in M94, represents the GUID (field |guid|) of the parent.
	ParentGuid *string                 `protobuf:"bytes,14,opt,name=parent_guid,json=parentGuid" json:"parent_guid,omitempty"`
	Type       *BookmarkSpecifics_Type `protobuf:"varint,15,opt,name=type,enum=sync_pb.BookmarkSpecifics_Type" json:"type,omitempty"`
	// Introduced in M94, determines ordering among siblings. This field is
	// redundant to the similar field in SyncEntity. If this field in specifics is
	// set, it takes precedence over the one in SyncEntity.
	UniquePosition *UniquePosition `protobuf:"bytes,16,opt,name=unique_position,json=uniquePosition" json:"unique_position,omitempty"`
	// Introduced in M106, corresponds to BookmarkNode::date_last_used()
	// represented as microseconds since the Windows epoch.
	LastUsedTimeUs *int64 `protobuf:"varint,17,opt,name=last_used_time_us,json=lastUsedTimeUs" json:"last_used_time_us,omitempty"`
}

func (x *BookmarkSpecifics) Reset() {
	*x = BookmarkSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkSpecifics) ProtoMessage() {}

func (x *BookmarkSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkSpecifics.ProtoReflect.Descriptor instead.
func (*BookmarkSpecifics) Descriptor() ([]byte, []int) {
	return file_bookmark_specifics_proto_rawDescGZIP(), []int{1}
}

func (x *BookmarkSpecifics) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *BookmarkSpecifics) GetFavicon() []byte {
	if x != nil {
		return x.Favicon
	}
	return nil
}

func (x *BookmarkSpecifics) GetLegacyCanonicalizedTitle() string {
	if x != nil && x.LegacyCanonicalizedTitle != nil {
		return *x.LegacyCanonicalizedTitle
	}
	return ""
}

func (x *BookmarkSpecifics) GetCreationTimeUs() int64 {
	if x != nil && x.CreationTimeUs != nil {
		return *x.CreationTimeUs
	}
	return 0
}

func (x *BookmarkSpecifics) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *BookmarkSpecifics) GetMetaInfo() []*MetaInfo {
	if x != nil {
		return x.MetaInfo
	}
	return nil
}

func (x *BookmarkSpecifics) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *BookmarkSpecifics) GetFullTitle() string {
	if x != nil && x.FullTitle != nil {
		return *x.FullTitle
	}
	return ""
}

func (x *BookmarkSpecifics) GetParentGuid() string {
	if x != nil && x.ParentGuid != nil {
		return *x.ParentGuid
	}
	return ""
}

func (x *BookmarkSpecifics) GetType() BookmarkSpecifics_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BookmarkSpecifics_UNSPECIFIED
}

func (x *BookmarkSpecifics) GetUniquePosition() *UniquePosition {
	if x != nil {
		return x.UniquePosition
	}
	return nil
}

func (x *BookmarkSpecifics) GetLastUsedTimeUs() int64 {
	if x != nil && x.LastUsedTimeUs != nil {
		return *x.LastUsedTimeUs
	}
	return 0
}

var File_bookmark_specifics_proto protoreflect.FileDescriptor

var file_bookmark_specifics_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x1a, 0x15, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4,
	0x04, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x1a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6c,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08,
	0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a,
	0x04, 0x08, 0x0d, 0x10, 0x0e, 0x42, 0x36, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03,
	0x50, 0x01, 0x5a, 0x09, 0x2e, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_bookmark_specifics_proto_rawDescOnce sync.Once
	file_bookmark_specifics_proto_rawDescData = file_bookmark_specifics_proto_rawDesc
)

func file_bookmark_specifics_proto_rawDescGZIP() []byte {
	file_bookmark_specifics_proto_rawDescOnce.Do(func() {
		file_bookmark_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_bookmark_specifics_proto_rawDescData)
	})
	return file_bookmark_specifics_proto_rawDescData
}

var file_bookmark_specifics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bookmark_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_bookmark_specifics_proto_goTypes = []interface{}{
	(BookmarkSpecifics_Type)(0), // 0: sync_pb.BookmarkSpecifics.Type
	(*MetaInfo)(nil),            // 1: sync_pb.MetaInfo
	(*BookmarkSpecifics)(nil),   // 2: sync_pb.BookmarkSpecifics
	(*UniquePosition)(nil),      // 3: sync_pb.UniquePosition
}
var file_bookmark_specifics_proto_depIdxs = []int32{
	1, // 0: sync_pb.BookmarkSpecifics.meta_info:type_name -> sync_pb.MetaInfo
	0, // 1: sync_pb.BookmarkSpecifics.type:type_name -> sync_pb.BookmarkSpecifics.Type
	3, // 2: sync_pb.BookmarkSpecifics.unique_position:type_name -> sync_pb.UniquePosition
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_bookmark_specifics_proto_init() }
func file_bookmark_specifics_proto_init() {
	if File_bookmark_specifics_proto != nil {
		return
	}
	file_unique_position_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bookmark_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bookmark_specifics_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bookmark_specifics_proto_goTypes,
		DependencyIndexes: file_bookmark_specifics_proto_depIdxs,
		EnumInfos:         file_bookmark_specifics_proto_enumTypes,
		MessageInfos:      file_bookmark_specifics_proto_msgTypes,
	}.Build()
	File_bookmark_specifics_proto = out.File
	file_bookmark_specifics_proto_rawDesc = nil
	file_bookmark_specifics_proto_goTypes = nil
	file_bookmark_specifics_proto_depIdxs = nil
}
