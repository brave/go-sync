// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for history entries.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: history_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A history sync entity - this roughly represents one navigation, including its
// full redirect chain (but not referrals). Fields correspond to similarly named
// fields in history::VisitRow and history::URLRow.
type HistorySpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp, also called "global ID" in some places (e.g. in delete
	// directives). This uniquely identifies the entity.
	VisitTimeWindowsEpochMicros *int64 `protobuf:"varint,1,opt,name=visit_time_windows_epoch_micros,json=visitTimeWindowsEpochMicros" json:"visit_time_windows_epoch_micros,omitempty"`
	// Cache GUID of the client that produced this entity, aka the "originator".
	OriginatorCacheGuid *string `protobuf:"bytes,2,opt,name=originator_cache_guid,json=originatorCacheGuid" json:"originator_cache_guid,omitempty"`
	// The redirect chain. The first entry is the URL the user originally
	// navigated to; the last one is where they ended up. If there were no
	// redirects, this has only one entry.
	RedirectEntries []*HistorySpecifics_RedirectEntry `protobuf:"bytes,3,rep,name=redirect_entries,json=redirectEntries" json:"redirect_entries,omitempty"`
	// Whether the redirect chain in this entity is the continuation of a prior
	// chain, and whether a continuation of this chain exists, in other entities.
	// These are effectively the inverse of the CHAIN_START/CHAIN_END page
	// transition qualifiers in Chrome. They are typically both false, since the
	// whole chain is included in `redirect_entries`, but in some cases (notably,
	// client redirects) a redirect chain may be split up across multiple
	// entities.
	RedirectChainStartIncomplete *bool `protobuf:"varint,19,opt,name=redirect_chain_start_incomplete,json=redirectChainStartIncomplete" json:"redirect_chain_start_incomplete,omitempty"`
	RedirectChainEndIncomplete   *bool `protobuf:"varint,20,opt,name=redirect_chain_end_incomplete,json=redirectChainEndIncomplete" json:"redirect_chain_end_incomplete,omitempty"`
	// If this is set to true, then the redirect chain was too long and some
	// entries were trimmed from the middle, so `redirect_entries` only
	// corresponds to some of the first plus some of the last entries of the
	// actual redirect chain.
	RedirectChainMiddleTrimmed *bool `protobuf:"varint,21,opt,name=redirect_chain_middle_trimmed,json=redirectChainMiddleTrimmed" json:"redirect_chain_middle_trimmed,omitempty"`
	// The PageTransition for the navigation.
	PageTransition *HistorySpecifics_PageTransition `protobuf:"bytes,4,opt,name=page_transition,json=pageTransition" json:"page_transition,omitempty"`
	// The ID of the visit, on the originator client, that was a referrer for
	// this one, or 0 if no referrer exists.
	OriginatorReferringVisitId *int64 `protobuf:"varint,5,opt,name=originator_referring_visit_id,json=originatorReferringVisitId" json:"originator_referring_visit_id,omitempty"`
	// The ID of the visit, on the originator client, that opened this one, or 0
	// if no opener exists.
	OriginatorOpenerVisitId *int64 `protobuf:"varint,6,opt,name=originator_opener_visit_id,json=originatorOpenerVisitId" json:"originator_opener_visit_id,omitempty"`
	// The ID of the cluster that this visit belongs to on the originator client,
	// or 0 if the originator client does not support setting this field or the
	// visit does not belong to any cluster.
	OriginatorClusterId *int64 `protobuf:"varint,22,opt,name=originator_cluster_id,json=originatorClusterId" json:"originator_cluster_id,omitempty"`
	// The duration of the visit, in microseconds. Zero if the visit hasn't been
	// finished (or the duration wasn't updated for some other reason).
	VisitDurationMicros *int64 `protobuf:"varint,7,opt,name=visit_duration_micros,json=visitDurationMicros" json:"visit_duration_micros,omitempty"`
	// The kind of browser where this visit happened.
	BrowserType *SyncEnums_BrowserType `protobuf:"varint,8,opt,name=browser_type,json=browserType,enum=sync_pb.SyncEnums_BrowserType" json:"browser_type,omitempty"`
	// The SessionID of the window and tab where the visit happened. Can be used
	// to link together possibly-related visits.
	// Note: These are only unique per-client, so always use together with
	// `originator_cache_guid`.
	WindowId *int32 `protobuf:"varint,9,opt,name=window_id,json=windowId" json:"window_id,omitempty"`
	TabId    *int32 `protobuf:"varint,10,opt,name=tab_id,json=tabId" json:"tab_id,omitempty"`
	// The ID for the task associated with this navigation, which is globally
	// unique with high probability.
	TaskId *int64 `protobuf:"varint,11,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// The IDs of ancestor tasks. These can be used to construct a tree of related
	// visits.
	RootTaskId   *int64 `protobuf:"varint,12,opt,name=root_task_id,json=rootTaskId" json:"root_task_id,omitempty"`
	ParentTaskId *int64 `protobuf:"varint,13,opt,name=parent_task_id,json=parentTaskId" json:"parent_task_id,omitempty"`
	// The HTTP response code of the navigation.
	HttpResponseCode *int32 `protobuf:"varint,14,opt,name=http_response_code,json=httpResponseCode" json:"http_response_code,omitempty"`
	// The language of the content on the page, as an ISO 639 language code
	// (usually two letters). May be "und" if the language couldn't be determined.
	PageLanguage *string `protobuf:"bytes,15,opt,name=page_language,json=pageLanguage" json:"page_language,omitempty"`
	// Whether a password field was found on the page.
	PasswordState *SyncEnums_PasswordState `protobuf:"varint,16,opt,name=password_state,json=passwordState,enum=sync_pb.SyncEnums_PasswordState" json:"password_state,omitempty"`
	// URL of the favicon for this page.
	FaviconUrl *string `protobuf:"bytes,17,opt,name=favicon_url,json=faviconUrl" json:"favicon_url,omitempty"`
	// The URL of the referrer (indicated by `originator_referring_visit_id`), if
	// any.
	ReferrerUrl *string `protobuf:"bytes,18,opt,name=referrer_url,json=referrerUrl" json:"referrer_url,omitempty"`
	// Visit has an image derived from public version of the page. This can be
	// used to provide more visual experience.
	HasUrlKeyedImage *bool `protobuf:"varint,23,opt,name=has_url_keyed_image,json=hasUrlKeyedImage" json:"has_url_keyed_image,omitempty"`
	// Categories tagged for the visit.
	Categories []*HistorySpecifics_Category `protobuf:"bytes,24,rep,name=categories" json:"categories,omitempty"`
	// Related search URLs for a Google SRP visit, to provide next steps to user.
	RelatedSearches []string `protobuf:"bytes,25,rep,name=related_searches,json=relatedSearches" json:"related_searches,omitempty"`
	// ID of the app (non-BrApp) this entity was generated for, if any. Only
	// visits originating from Android devices may have this set.
	AppId *string `protobuf:"bytes,26,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *HistorySpecifics) Reset() {
	*x = HistorySpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistorySpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistorySpecifics) ProtoMessage() {}

func (x *HistorySpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_history_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistorySpecifics.ProtoReflect.Descriptor instead.
func (*HistorySpecifics) Descriptor() ([]byte, []int) {
	return file_history_specifics_proto_rawDescGZIP(), []int{0}
}

func (x *HistorySpecifics) GetVisitTimeWindowsEpochMicros() int64 {
	if x != nil && x.VisitTimeWindowsEpochMicros != nil {
		return *x.VisitTimeWindowsEpochMicros
	}
	return 0
}

func (x *HistorySpecifics) GetOriginatorCacheGuid() string {
	if x != nil && x.OriginatorCacheGuid != nil {
		return *x.OriginatorCacheGuid
	}
	return ""
}

func (x *HistorySpecifics) GetRedirectEntries() []*HistorySpecifics_RedirectEntry {
	if x != nil {
		return x.RedirectEntries
	}
	return nil
}

func (x *HistorySpecifics) GetRedirectChainStartIncomplete() bool {
	if x != nil && x.RedirectChainStartIncomplete != nil {
		return *x.RedirectChainStartIncomplete
	}
	return false
}

func (x *HistorySpecifics) GetRedirectChainEndIncomplete() bool {
	if x != nil && x.RedirectChainEndIncomplete != nil {
		return *x.RedirectChainEndIncomplete
	}
	return false
}

func (x *HistorySpecifics) GetRedirectChainMiddleTrimmed() bool {
	if x != nil && x.RedirectChainMiddleTrimmed != nil {
		return *x.RedirectChainMiddleTrimmed
	}
	return false
}

func (x *HistorySpecifics) GetPageTransition() *HistorySpecifics_PageTransition {
	if x != nil {
		return x.PageTransition
	}
	return nil
}

func (x *HistorySpecifics) GetOriginatorReferringVisitId() int64 {
	if x != nil && x.OriginatorReferringVisitId != nil {
		return *x.OriginatorReferringVisitId
	}
	return 0
}

func (x *HistorySpecifics) GetOriginatorOpenerVisitId() int64 {
	if x != nil && x.OriginatorOpenerVisitId != nil {
		return *x.OriginatorOpenerVisitId
	}
	return 0
}

func (x *HistorySpecifics) GetOriginatorClusterId() int64 {
	if x != nil && x.OriginatorClusterId != nil {
		return *x.OriginatorClusterId
	}
	return 0
}

func (x *HistorySpecifics) GetVisitDurationMicros() int64 {
	if x != nil && x.VisitDurationMicros != nil {
		return *x.VisitDurationMicros
	}
	return 0
}

func (x *HistorySpecifics) GetBrowserType() SyncEnums_BrowserType {
	if x != nil && x.BrowserType != nil {
		return *x.BrowserType
	}
	return SyncEnums_BROWSER_TYPE_UNKNOWN
}

func (x *HistorySpecifics) GetWindowId() int32 {
	if x != nil && x.WindowId != nil {
		return *x.WindowId
	}
	return 0
}

func (x *HistorySpecifics) GetTabId() int32 {
	if x != nil && x.TabId != nil {
		return *x.TabId
	}
	return 0
}

func (x *HistorySpecifics) GetTaskId() int64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *HistorySpecifics) GetRootTaskId() int64 {
	if x != nil && x.RootTaskId != nil {
		return *x.RootTaskId
	}
	return 0
}

func (x *HistorySpecifics) GetParentTaskId() int64 {
	if x != nil && x.ParentTaskId != nil {
		return *x.ParentTaskId
	}
	return 0
}

func (x *HistorySpecifics) GetHttpResponseCode() int32 {
	if x != nil && x.HttpResponseCode != nil {
		return *x.HttpResponseCode
	}
	return 0
}

func (x *HistorySpecifics) GetPageLanguage() string {
	if x != nil && x.PageLanguage != nil {
		return *x.PageLanguage
	}
	return ""
}

func (x *HistorySpecifics) GetPasswordState() SyncEnums_PasswordState {
	if x != nil && x.PasswordState != nil {
		return *x.PasswordState
	}
	return SyncEnums_PASSWORD_STATE_UNKNOWN
}

func (x *HistorySpecifics) GetFaviconUrl() string {
	if x != nil && x.FaviconUrl != nil {
		return *x.FaviconUrl
	}
	return ""
}

func (x *HistorySpecifics) GetReferrerUrl() string {
	if x != nil && x.ReferrerUrl != nil {
		return *x.ReferrerUrl
	}
	return ""
}

func (x *HistorySpecifics) GetHasUrlKeyedImage() bool {
	if x != nil && x.HasUrlKeyedImage != nil {
		return *x.HasUrlKeyedImage
	}
	return false
}

func (x *HistorySpecifics) GetCategories() []*HistorySpecifics_Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *HistorySpecifics) GetRelatedSearches() []string {
	if x != nil {
		return x.RelatedSearches
	}
	return nil
}

func (x *HistorySpecifics) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

type HistorySpecifics_RedirectEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the visit on the originator client, unique within that client.
	OriginatorVisitId *int64 `protobuf:"varint,1,opt,name=originator_visit_id,json=originatorVisitId" json:"originator_visit_id,omitempty"`
	// URL that was visited.
	Url *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// Title of the page corresponding to this URL.
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// True if the URL should NOT be used for auto-complete.
	Hidden *bool `protobuf:"varint,4,opt,name=hidden" json:"hidden,omitempty"`
	// The redirect type (if any).
	RedirectType *SyncEnums_PageTransitionRedirectType `protobuf:"varint,5,opt,name=redirect_type,json=redirectType,enum=sync_pb.SyncEnums_PageTransitionRedirectType" json:"redirect_type,omitempty"`
}

func (x *HistorySpecifics_RedirectEntry) Reset() {
	*x = HistorySpecifics_RedirectEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistorySpecifics_RedirectEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistorySpecifics_RedirectEntry) ProtoMessage() {}

func (x *HistorySpecifics_RedirectEntry) ProtoReflect() protoreflect.Message {
	mi := &file_history_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistorySpecifics_RedirectEntry.ProtoReflect.Descriptor instead.
func (*HistorySpecifics_RedirectEntry) Descriptor() ([]byte, []int) {
	return file_history_specifics_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HistorySpecifics_RedirectEntry) GetOriginatorVisitId() int64 {
	if x != nil && x.OriginatorVisitId != nil {
		return *x.OriginatorVisitId
	}
	return 0
}

func (x *HistorySpecifics_RedirectEntry) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *HistorySpecifics_RedirectEntry) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *HistorySpecifics_RedirectEntry) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *HistorySpecifics_RedirectEntry) GetRedirectType() SyncEnums_PageTransitionRedirectType {
	if x != nil && x.RedirectType != nil {
		return *x.RedirectType
	}
	return SyncEnums_CLIENT_REDIRECT
}

type HistorySpecifics_PageTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The core transition type.
	CoreTransition *SyncEnums_PageTransition `protobuf:"varint,1,opt,name=core_transition,json=coreTransition,enum=sync_pb.SyncEnums_PageTransition,def=0" json:"core_transition,omitempty"`
	// Qualifiers:
	// A supervised user tried to access this URL but was blocked.
	Blocked *bool `protobuf:"varint,2,opt,name=blocked" json:"blocked,omitempty"`
	// User used the Forward or Back button to navigate among browsing history.
	ForwardBack *bool `protobuf:"varint,3,opt,name=forward_back,json=forwardBack" json:"forward_back,omitempty"`
	// User used the address bar to trigger this navigation.
	FromAddressBar *bool `protobuf:"varint,4,opt,name=from_address_bar,json=fromAddressBar" json:"from_address_bar,omitempty"`
	// User is navigating to the home page.
	HomePage *bool `protobuf:"varint,5,opt,name=home_page,json=homePage" json:"home_page,omitempty"`
}

// Default values for HistorySpecifics_PageTransition fields.
const (
	Default_HistorySpecifics_PageTransition_CoreTransition = SyncEnums_LINK
)

func (x *HistorySpecifics_PageTransition) Reset() {
	*x = HistorySpecifics_PageTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_specifics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistorySpecifics_PageTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistorySpecifics_PageTransition) ProtoMessage() {}

func (x *HistorySpecifics_PageTransition) ProtoReflect() protoreflect.Message {
	mi := &file_history_specifics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistorySpecifics_PageTransition.ProtoReflect.Descriptor instead.
func (*HistorySpecifics_PageTransition) Descriptor() ([]byte, []int) {
	return file_history_specifics_proto_rawDescGZIP(), []int{0, 1}
}

func (x *HistorySpecifics_PageTransition) GetCoreTransition() SyncEnums_PageTransition {
	if x != nil && x.CoreTransition != nil {
		return *x.CoreTransition
	}
	return Default_HistorySpecifics_PageTransition_CoreTransition
}

func (x *HistorySpecifics_PageTransition) GetBlocked() bool {
	if x != nil && x.Blocked != nil {
		return *x.Blocked
	}
	return false
}

func (x *HistorySpecifics_PageTransition) GetForwardBack() bool {
	if x != nil && x.ForwardBack != nil {
		return *x.ForwardBack
	}
	return false
}

func (x *HistorySpecifics_PageTransition) GetFromAddressBar() bool {
	if x != nil && x.FromAddressBar != nil {
		return *x.FromAddressBar
	}
	return false
}

func (x *HistorySpecifics_PageTransition) GetHomePage() bool {
	if x != nil && x.HomePage != nil {
		return *x.HomePage
	}
	return false
}

type HistorySpecifics_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the category, this typically is an MID.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Weight of the category, this is an integer value informing the confidence
	// of a visit belonging to this category.
	Weight *int32 `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
}

func (x *HistorySpecifics_Category) Reset() {
	*x = HistorySpecifics_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_specifics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistorySpecifics_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistorySpecifics_Category) ProtoMessage() {}

func (x *HistorySpecifics_Category) ProtoReflect() protoreflect.Message {
	mi := &file_history_specifics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistorySpecifics_Category.ProtoReflect.Descriptor instead.
func (*HistorySpecifics_Category) Descriptor() ([]byte, []int) {
	return file_history_specifics_proto_rawDescGZIP(), []int{0, 2}
}

func (x *HistorySpecifics_Category) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *HistorySpecifics_Category) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

var File_history_specifics_proto protoreflect.FileDescriptor

var file_history_specifics_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x70, 0x62, 0x1a, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x0e, 0x0a, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x1d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x6d,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x54, 0x72, 0x69,
	0x6d, 0x6d, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x69, 0x73, 0x69, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x72,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12,
	0x41, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x67, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x55, 0x72, 0x6c, 0x4b, 0x65, 0x79, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x1a, 0xd3, 0x01, 0x0a,
	0x0d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x52,
	0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0xe6, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x32, 0x0a, 0x08, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x36, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03, 0x50, 0x01, 0x5a, 0x09, 0x2e, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_history_specifics_proto_rawDescOnce sync.Once
	file_history_specifics_proto_rawDescData = file_history_specifics_proto_rawDesc
)

func file_history_specifics_proto_rawDescGZIP() []byte {
	file_history_specifics_proto_rawDescOnce.Do(func() {
		file_history_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_history_specifics_proto_rawDescData)
	})
	return file_history_specifics_proto_rawDescData
}

var file_history_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_history_specifics_proto_goTypes = []interface{}{
	(*HistorySpecifics)(nil),                  // 0: sync_pb.HistorySpecifics
	(*HistorySpecifics_RedirectEntry)(nil),    // 1: sync_pb.HistorySpecifics.RedirectEntry
	(*HistorySpecifics_PageTransition)(nil),   // 2: sync_pb.HistorySpecifics.PageTransition
	(*HistorySpecifics_Category)(nil),         // 3: sync_pb.HistorySpecifics.Category
	(SyncEnums_BrowserType)(0),                // 4: sync_pb.SyncEnums.BrowserType
	(SyncEnums_PasswordState)(0),              // 5: sync_pb.SyncEnums.PasswordState
	(SyncEnums_PageTransitionRedirectType)(0), // 6: sync_pb.SyncEnums.PageTransitionRedirectType
	(SyncEnums_PageTransition)(0),             // 7: sync_pb.SyncEnums.PageTransition
}
var file_history_specifics_proto_depIdxs = []int32{
	1, // 0: sync_pb.HistorySpecifics.redirect_entries:type_name -> sync_pb.HistorySpecifics.RedirectEntry
	2, // 1: sync_pb.HistorySpecifics.page_transition:type_name -> sync_pb.HistorySpecifics.PageTransition
	4, // 2: sync_pb.HistorySpecifics.browser_type:type_name -> sync_pb.SyncEnums.BrowserType
	5, // 3: sync_pb.HistorySpecifics.password_state:type_name -> sync_pb.SyncEnums.PasswordState
	3, // 4: sync_pb.HistorySpecifics.categories:type_name -> sync_pb.HistorySpecifics.Category
	6, // 5: sync_pb.HistorySpecifics.RedirectEntry.redirect_type:type_name -> sync_pb.SyncEnums.PageTransitionRedirectType
	7, // 6: sync_pb.HistorySpecifics.PageTransition.core_transition:type_name -> sync_pb.SyncEnums.PageTransition
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_history_specifics_proto_init() }
func file_history_specifics_proto_init() {
	if File_history_specifics_proto != nil {
		return
	}
	file_sync_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_history_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistorySpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistorySpecifics_RedirectEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_specifics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistorySpecifics_PageTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_specifics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistorySpecifics_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_history_specifics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_history_specifics_proto_goTypes,
		DependencyIndexes: file_history_specifics_proto_depIdxs,
		MessageInfos:      file_history_specifics_proto_msgTypes,
	}.Build()
	File_history_specifics_proto = out.File
	file_history_specifics_proto_rawDesc = nil
	file_history_specifics_proto_goTypes = nil
	file_history_specifics_proto_depIdxs = nil
}
